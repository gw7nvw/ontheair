<div id="actionbar" class="span7">
  <div id="crumbs">
    <%=link_to "Home", '/', :remote => true,  :onclick => "linkHandler('home')" %>
    &nbsp;--&gt;&nbsp;
    <%=link_to "Logs", '/logs', :remote => true,  :onclick => "linkHandler('logs')" %>
    &nbsp;--&gt;&nbsp;
    <% if @log and @log.id then %>
      <%=link_to @log.id.to_s, '/logs/'+@log.id.to_s, :remote => true,  :onclick => "linkHandler('log')" %>
      &nbsp;--&gt;&nbsp;
      <b>Edit</b>
    <% else %>
      <b>New</b>
    <% end %>
  </div>
  <div id="controls">
    <% if @log.id and (@log.user1_id==current_user.id or current_user.is_admin) then %>
      <%=  link_to "Delete", '/logs/'+@log.id.to_s+'/delete', class: "btn btn-small btn-primary", data: {confirm: "Delete log: Are you sure?"}, :remote => true,  :onclick => "linkHandler('delete')"%>
    <% end %>
    <% if @log.id then %>
      <%=  link_to "Cancel", '/logs/'+@log.id.to_s, class: 'btn btn-small btn-primary', :remote => true,  :onclick => "linkHandler('cancel')"%>
    <% else %>
      <%=  link_to "Cancel", '/logs/', class: 'btn btn-small btn-primary', :remote => true,  :onclick => "linkHandler('cancel')" %>
    <% end %>
    <%=  link_to "Index", '/logs/', class: "btn btn-small btn-primary", :remote => true,  :onclick => "linkHandler('index')"%>
    <%=render 'map_controls'%>   
  </div>
</div>

<div id="right_scroll">
  <div class="fullform">
    <%= hidden_field_tag(:referring, @referring) %>
    <%= render 'flash' %>
    <%= render 'shared/error_messages' %>
 
    <%= form_for @log, remote: true, :html => {:name => 'logform'} do |f| %>

      <%= hidden_field_tag(:referring, 'new') %>
 
      <div class="erow"><div class="sectiontitle_bold">Your Details:</div></div>
      <table style="table-layout: fixed" id="your_details_table">
        <tr>
          <td class="td-l">Callsign</td>
          <td colspan=2 class="td-d"> 
            <% if current_user.is_admin then %> 
              <%= f.text_field :callsign1 %> 
            <% else %> 
              <%= collection_select( :log, :callsign1, current_user.callsigns, :callsign, :callsign, {}) %>
            <% end %>
          </td>
          <td class="td-l">Date:</td>
          <td colspan=2 class="td-d"> <%= f.date_field :date%></td>
          <td class="td-l">QRP?</td>
          <td class="td-d"> <%= f.check_box :is_qrp1%></td>
        </tr>
        <tr>
          <td class="td-l">Timezone:</td>
          <td colspan=2 class="td-d"><%= collection_select( :log, :timezone, Timezone.all.order(:name), :id, :name, {}, {:disabled => true}) %></td>
          <td class="td-l">Power:</td>
          <td colspan=2 class="td-d"> <%= f.text_field :power1%></td>

          <td class="td-l">Portable?</td>
          <td class="td-d"> <%= f.check_box :is_portable1%></td>
        </tr>
        <tr>
        </tr>
        <tr>
          <td class="td-l">Description</td>
          <td colspan=2 class="td-d"> <%= f.text_field :loc_desc1%></td>
          <td>
            <ul style="float: left;margin: 0" class="nav pull-left" id="menus">
              <li id="fat-menu" class="dropdown">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                     Add Place <b class="caret"></b>
                </a>
                <ul class="dropdown-menu">
                  <li><%= link_to "... from list", '/query?assetfield=asset', :remote => true,  :onclick => "search_assets('asset')" %></li>
                  <li><%= link_to "... from map", '#',  :onclick => "site_selectPlace(null,'log_asset_codes', 'asset_names', 'log_location1', 'log_x1', 'log_y1', null, null, site_green_star,true);return false;" %></li>
                  <li><%= link_to "Clear", '#',  :onclick => "site_clear_element(['log_asset_codes', 'log_location1', 'log_x1', 'log_y1']);site_clear_html_element(['asset_names']);map_clear_scratch_layer(null,site_green_star);return false;" %></li>
                </ul>
              </li>
            </ul>
          </td>
          <td colspan=4 class="td-d">
             <div id="asset_names" name="asset_names"><%=if @log.asset_code_names then raw(@log.asset_code_names.join("<br/>")) else "" end%></div>
             <%= f.text_field :asset_codes, :readonly => true, :style => 'display:none' %>
          </td>
        </tr>

        <%= f.hidden_field :x1 %>
        <%= f.hidden_field :y1 %>
        <%= f.hidden_field :location1 %>

        <tr>
          <td colspan=3> <%= f.submit @submit_button, id: 'submit_button', class: "btn btn-small btn-primary btn-highlight", :onclick => "submitHandler('Saving ...');" %></td>
          <td class="td-l" colspan=4>
            <%=f.label "I will specify parks manually - do not add automatically" %>
          </td>
          <td class="td-d">
            <%= f.check_box :do_not_lookup %>
          </td>
        </tr>
      </table>
    <% end %>   

    <div class="erow">
      <div class="hrline">
         <hr noshade size="4">
      </div>
    </div>

    <%# Contact details table%>
    <%# In Edit Log mode, show fully editable table %>
    <% if @edit then %>
      <div class="erow">
        <div class="sectiontitle_bold">Contact logs:</div>
      </div>

      <div class="erow">
        <div class="controls rowtitle">
          <button name="load" id="load" class="intext-btn" style="display:none">Load</button>
          <button name="save" id="save" class="intext-btn btn btn-small btn-primary">Save Log</button>
          <label style="display:none"><input type="checkbox" name="autosave" id="autosave" autocomplete="off">Autosave</label>
        </div>
        <div class="rowtext">
          <pre id="grid1console" class="console">Enter your contacts below. Click 'Save Log' when done.</pre>
        </div>
      </div>
      <div class="erow" id="grid_scroll">
        <div id="grid1" class="hot"></div>
      </div>
      <script type="text/javascript" charset="UTF-8">

        function ajax(url, method, params, callback) {
          var obj;

          try {
            obj = new XMLHttpRequest();
          } catch (e) {
            try {
              obj = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                obj = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
                alert("Your browser does not support Ajax.");
                return false;
              }
            }
          }
          obj.onreadystatechange = function () {
            if (obj.readyState == 4) {
              callback(obj);
            }
          };
          obj.open(method, url, true);
          obj.setRequestHeader("X-Requested-With", "XMLHttpRequest");
          obj.setRequestHeader("Content-type", "application/json");
          obj.send(params);
        
          return obj;
        }
        var
          $$ = function(id) {
            return document.getElementById(id);
          },
          container = $$('grid1'),
          exampleConsole = $$('grid1console'),
          autosave = $$('autosave'),
          load = $$('load'),
          save = $$('save'),
          autosaveNotification,
          hot;
        
        function reqTextRenderer(instance, td, row, col, prop, value, cellProperties) {
        Handsontable.renderers.TextRenderer.apply(this, arguments);
          id=instance.getDataAtCell(row, 0); // check id is present before flagging
          if (id>0) {
            if (!value || value == '') {
              td.style.background = '#fcc';
            }
            else {
              td.style.background = '';
            }
          }
        }
        function truncatedTextRenderer(instance, td, row, col, prop, value, cellProperties) {
          Handsontable.renderers.TextRenderer.apply(this, arguments);
          td.innerHTML = `<div class="truncated">${value||""}</div>`
        }
        function arrayRenderer(instance, td, row, col, prop, value, cellProperties) {
          Handsontable.renderers.TextRenderer.apply(this, arguments);
          if(value) { stringval=value.join(',');} else {stringval=[];}
          td.innerHTML = stringval;
        }
        
        function reqValueRenderer(instance, td, row, col, prop, value, cellProperties) {
        Handsontable.renderers.NumericRenderer.apply(this, arguments);
          id=instance.getDataAtCell(row, 0);
          if (id>0) {
            if (!value || value == '') {
              td.style.background = '#fcc';
            }
            else {
              td.style.background = '';
            }
          }
        }
        
        var actionRenderer = function (instance, td, row, col, prop, value, cellProperties) {
          var tzindex=7000-row*10;
          h1='<li><a href="#", onclick="search_assets(\'row_'+row+'\');return false;">... from list</a></li>';
          h2='<li><a href="#",  onclick="site_selectPlace('+row+',\'asset2_codes\',\'asset2_names\',\'location2\',\'x2\',\'y2\', null, null, site_green_star,true);return false;">.. from map</a></li>';
          h3='<li><a href="#",  onclick="site_clear_elementData('+row+',[\'asset2_codes\',\'asset2_names\',\'location2\' ]);map_clear_scratch_layer(null,site_green_star);return false;">Clear</a></li>';
        
          var $button = $('<div class="navbar ilnb" style="padding:0; margin:0;"><ul style="float: left;margin: 0;z-index:'+tzindex+'" class="nav pull-left" id="menus"> <li id="fat-menu" class="dropdown ildd" > <a href="#" class="dropdown-toggle" data-toggle="dropdown" > Add Place <b class="caret"></b> </a> <ul class="dropdown-menu ildd-menu"> '+h1+h2+h3+' </ul> </li> </ul></div>');
          tzindex=tzindex-100;
          $(td).empty().append($button); //empty is needed because you are rendering to an existing cell
          td.style.overflow="visible";
        };
        
        var data2= <%=raw @contacts.to_json(methods: [:timetext, :asset2_names])%>;
        var hot = new Handsontable(container, {
          data: data2,
          colHeaders: ['id','Time','Callsign','QRP', 'Port', 'Mode','Frq (MHz)','Snt RST','Rcd RST','Name','Description','', 'codes', 'name', 'Id','loc','x','y'],
          columns: [
        {data: 'id', type: 'numeric',readOnly:true} , 
        {data: 'timetext', type: 'text', renderer: reqTextRenderer},  
        {data: 'callsign2', type: 'text', renderer: reqTextRenderer}, 
        {data: 'is_qrp2', type: 'checkbox'}, 
        {data: 'is_portable2', type: 'checkbox'}, 
        {data: 'mode', type: 'dropdown', source: ['SSB', 'CW', 'AM', 'FM', 'FT4', 'FT8', 'JS8', 'Data', 'Other']}, 
        {data: 'frequency', type: 'text', renderer: reqTextRenderer}, 
        {data: 'signal2', type: 'numeric', renderer: reqValueRenderer}, 
        {data: 'signal1', type: 'numeric', renderer: reqValueRenderer}, 
        {data: 'name2', type: 'text', wordWrap: 'false', renderer: truncatedTextRenderer}, 
        {data: 'loc_desc2', type: 'text', renderer: truncatedTextRenderer}, 
        {data: 'acton', renderer: actionRenderer}, 
        {data: 'asset2_names', type: 'text',readOnly:true}, 
        {data: 'asset2_codes', readOnly:true, renderer: arrayRenderer}, 
        {data: 'location2', type: 'numeric',readOnly:true} , 
        {data: 'x2', type: 'numeric',readOnly:true}, 
        {data: 'y2', type: 'numeric',readOnly:true} ], 
          manualColumnResize: [,,,40,40,,,50,50,50,150,,,,,,,],
          startRows: 1,
          minSpareRows: 1,
          minSpareCols: 0,
          enterMoves: {row: 0, col: 1},
          maxCols: 23,
          licenseKey: 'non-commercial-and-evaluation',
          rowHeaders: false,
          afterChange: function (change, source) {
            if (source === 'loadData') {
              return; //don't save this change
            }
            exampleConsole.innerText  = 'Table has data that has not yet been saved';
            document.getElementById("submit_button").disabled = true
         
            if (!autosave.checked) {
              return;
            }
            clearTimeout(autosaveNotification);
            ajax('patch.json', 'POST', JSON.stringify({data: change}), function (data) {
              exampleConsole.innerText  = 'Autosaved (' + change.length + ' ' + 'cell' + (change.length > 1 ? 's' : '') + ')';
              autosaveNotification = setTimeout(function() {
                exampleConsole.innerText ='Changes will be autosaved';
              }, 1000);
            });
          }
        });
         hot.updateSettings({
                hiddenColumns: {
                  columns: [0,13,14,15,16],
                  indicators: false
                }
              })
        Handsontable.dom.addEvent(load, 'click', function() {
          ajax('load.json', 'GET', '', function(res) {
            var data = JSON.parse(res.response);
        
            hot.loadData(data.data);
            exampleConsole.innerText = 'Data loaded';
          });
        });
        
        Handsontable.dom.addEvent(save, 'click', function() {
          // save all cell's data
          ajax('/logs/<%=@log.id.to_s%>/save.json', 'POST', JSON.stringify({data: hot.getData()}), function (res) {
            data2 = JSON.parse(res.response);
            result=hot.loadData(data2);
        
            if (!result) {
              exampleConsole.innerText = 'Data saved';
              document.getElementById("submit_button").disabled = false
            }
            else {
              exampleConsole.innerText = 'Save error';
            }
          });
        });
        
        Handsontable.dom.addEvent(autosave, 'click', function() {
          if (autosave.checked) {
            exampleConsole.innerText = 'Changes will be autosaved';
          }
          else {
            exampleConsole.innerText ='Changes will not be autosaved';
          }
        });
        Handsontable.hooks.add('afterCreateRow',newRowCallback);
        
        function newRowCallback() {
           newrow=data2.length-2;
           lastrow=newrow-1;
           if(lastrow>=0) {
             if(!data2[newrow]['mode']) {data2[newrow]['mode']=data2[lastrow]['mode']};
             if(!data2[newrow]['frequency']) {data2[newrow]['frequency']=data2[lastrow]['frequency']};
             if(!data2[newrow]['time']) {data2[newrow]['time']=data2[lastrow]['time']};
           };
           hot.render();
        
        }
      </script>

    #In New mode just show headers
    <% else %>
      <table>
        <tr>
          <th>Id</th>
          <th>Time</th>
          <th>Callsign</th>
          <th>QRP?</th>
          <th>Portable?</th>
          <th>Mode</th>
          <th>Freq (MHz)</th>
          <th>Name</th>
          <th>Location</th>
          <th>RST Sent</th>
          <th>RST Rec'd</th>
        </tr>
      </table>
    <% end %>
  </div>
</div>
<script>
  document.getElementById('actionbar-full').innerHTML=document.getElementById('actionbar').innerHTML;
</script>
