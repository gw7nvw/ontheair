# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activerecord` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module ActiveRecord
  extend(::ActiveSupport::Autoload)

  class << self
    def eager_load!; end
    def gem_version; end
    def version; end
  end
end

class ActiveRecord::ActiveRecordError < ::StandardError
end

class ActiveRecord::AdapterNotFound < ::ActiveRecord::ActiveRecordError
end

class ActiveRecord::AdapterNotSpecified < ::ActiveRecord::ActiveRecordError
end

module ActiveRecord::Aggregations
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::Aggregations::ClassMethods)

  def clear_aggregation_cache; end
end

module ActiveRecord::Aggregations::ClassMethods
  def composed_of(part_id, options = T.unsafe(nil)); end

  private

  def reader_method(name, class_name, mapping, allow_nil, constructor); end
  def writer_method(name, class_name, mapping, allow_nil, converter); end
end

class ActiveRecord::AssociationRelation < ::ActiveRecord::Relation
  def initialize(klass, table, association); end

  def proxy_association; end

  private

  def exec_queries; end
end

class ActiveRecord::AssociationTypeMismatch < ::ActiveRecord::ActiveRecordError
end

module ActiveRecord::Associations
  extend(::ActiveSupport::Autoload)
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::Associations::ClassMethods)

  def association(name); end
  def association_cache; end
  def clear_association_cache; end

  private

  def association_instance_get(name); end
  def association_instance_set(name, association); end
end

class ActiveRecord::Associations::AliasTracker
  def initialize(connection, aliases); end

  def aliased_name_for(table_name, aliased_name); end
  def aliased_table_for(table_name, aliased_name); end
  def aliases; end
  def connection; end

  private

  def truncate(name); end

  class << self
    def create(connection, table_joins); end
    def empty(connection); end
    def initial_count_for(connection, name, table_joins); end
  end
end

class ActiveRecord::Associations::Association
  def initialize(owner, reflection); end

  def aliased_table_name; end
  def association_scope; end
  def initialize_attributes(record); end
  def interpolate(sql, record = T.unsafe(nil)); end
  def inversed; end
  def inversed=(_); end
  def klass; end
  def load_target; end
  def loaded!; end
  def loaded?; end
  def marshal_dump; end
  def marshal_load(data); end
  def options(*args, &block); end
  def owner; end
  def reflection; end
  def reload; end
  def reset; end
  def reset_scope; end
  def scope; end
  def set_inverse_instance(record); end
  def stale_target?; end
  def target; end
  def target=(target); end
  def target_scope; end

  private

  def build_record(attributes); end
  def creation_attributes; end
  def find_target?; end
  def foreign_key_for?(record); end
  def foreign_key_present?; end
  def inverse_reflection_for(record); end
  def invertible_for?(record); end
  def raise_on_type_mismatch!(record); end
  def set_owner_attributes(record); end
  def stale_state; end
end

class ActiveRecord::Associations::AssociationScope
  def join_type; end
  def scope(association, connection); end

  private

  def add_constraints(scope, owner, assoc_klass, refl, tracker); end
  def alias_suffix(refl); end
  def bind(scope, table_name, column_name, value, tracker); end
  def bind_value(scope, column, value, alias_tracker); end
  def column_for(table_name, column_name, alias_tracker); end
  def construct_tables(chain, klass, refl, alias_tracker); end
  def eval_scope(klass, scope, owner); end
  def join(table, constraint); end
  def table_alias_for(reflection, refl, join = T.unsafe(nil)); end
  def table_name_for(reflection, klass, refl); end

  class << self
    def scope(association, connection); end
  end
end

ActiveRecord::Associations::AssociationScope::INSTANCE = T.let(T.unsafe(nil), ActiveRecord::Associations::AssociationScope)

class ActiveRecord::Associations::BelongsToAssociation < ::ActiveRecord::Associations::SingularAssociation
  def handle_dependency; end
  def replace(record); end
  def reset; end
  def updated?; end

  private

  def decrement_counter(counter_cache_name); end
  def decrement_counters; end
  def different_target?(record); end
  def find_target?; end
  def foreign_key_present?; end
  def invertible_for?(record); end
  def remove_keys; end
  def replace_keys(record); end
  def stale_state; end
  def target_id; end
  def update_counters(record); end
  def with_cache_name; end
end

class ActiveRecord::Associations::BelongsToPolymorphicAssociation < ::ActiveRecord::Associations::BelongsToAssociation
  def klass; end

  private

  def different_target?(record); end
  def inverse_reflection_for(record); end
  def raise_on_type_mismatch!(record); end
  def remove_keys; end
  def replace_keys(record); end
  def stale_state; end
end

module ActiveRecord::Associations::Builder
end

class ActiveRecord::Associations::Builder::Association
  def initialize(model, name, scope, options); end

  def build(model); end
  def define_extensions(model); end
  def macro; end
  def name; end
  def options; end
  def scope; end
  def valid_options; end
  def validate_options; end

  class << self
    def add_before_destroy_callbacks(model, reflection); end
    def build(model, name, scope, options, &block); end
    def create_builder(model, name, scope, options, &block); end
    def define_accessors(model, reflection); end
    def define_callbacks(model, reflection); end
    def define_readers(mixin, name); end
    def define_writers(mixin, name); end
    def extensions; end
    def extensions=(_); end
    def valid_dependent_options; end
    def valid_options; end
    def valid_options=(_); end
  end
end

class ActiveRecord::Associations::Builder::BelongsTo < ::ActiveRecord::Associations::Builder::SingularAssociation
  def macro; end
  def valid_options; end

  class << self
    def add_counter_cache_callbacks(model, reflection); end
    def add_counter_cache_methods(mixin); end
    def add_touch_callbacks(model, reflection); end
    def define_accessors(mixin, reflection); end
    def define_callbacks(model, reflection); end
    def touch_record(o, foreign_key, name, touch); end
    def valid_dependent_options; end
  end
end

class ActiveRecord::Associations::Builder::CollectionAssociation < ::ActiveRecord::Associations::Builder::Association
  def initialize(model, name, scope, options); end

  def block_extension; end
  def define_extensions(model); end
  def valid_options; end

  private

  def wrap_scope(scope, mod); end

  class << self
    def define_callback(model, callback_name, name, options); end
    def define_callbacks(model, reflection); end
    def define_readers(mixin, name); end
    def define_writers(mixin, name); end
  end
end

ActiveRecord::Associations::Builder::CollectionAssociation::CALLBACKS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Associations::Builder::HasAndBelongsToMany
  def initialize(association_name, lhs_model, options); end

  def association_name; end
  def lhs_model; end
  def middle_reflection(join_model); end
  def options; end
  def through_model; end

  private

  def belongs_to_options(options); end
  def middle_options(join_model); end
end

class ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver
  class << self
    def build(lhs_class, name, options); end
  end
end

class ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver::KnownClass
  def initialize(lhs_class, rhs_class_name); end

  def join_table; end

  private

  def klass; end
end

class ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver::KnownTable < ::Struct
  def join_table; end
  def join_table=(_); end

  class << self
    def [](*_); end
    def members; end
    def new(*_); end
  end
end

class ActiveRecord::Associations::Builder::HasMany < ::ActiveRecord::Associations::Builder::CollectionAssociation
  def macro; end
  def valid_options; end

  class << self
    def valid_dependent_options; end
  end
end

class ActiveRecord::Associations::Builder::HasOne < ::ActiveRecord::Associations::Builder::SingularAssociation
  def macro; end
  def valid_options; end

  class << self
    def add_before_destroy_callbacks(model, reflection); end
    def valid_dependent_options; end
  end
end

class ActiveRecord::Associations::Builder::SingularAssociation < ::ActiveRecord::Associations::Builder::Association
  def valid_options; end

  class << self
    def define_accessors(model, reflection); end
    def define_constructors(mixin, name); end
  end
end

module ActiveRecord::Associations::ClassMethods
  def belongs_to(name, scope = T.unsafe(nil), options = T.unsafe(nil)); end
  def has_and_belongs_to_many(name, scope = T.unsafe(nil), options = T.unsafe(nil), &extension); end
  def has_many(name, scope = T.unsafe(nil), options = T.unsafe(nil), &extension); end
  def has_one(name, scope = T.unsafe(nil), options = T.unsafe(nil)); end
end

class ActiveRecord::Associations::CollectionAssociation < ::ActiveRecord::Associations::Association
  def add_to_target(record, skip_callbacks = T.unsafe(nil)); end
  def any?; end
  def build(attributes = T.unsafe(nil), &block); end
  def concat(*records); end
  def count(column_name = T.unsafe(nil), count_options = T.unsafe(nil)); end
  def create(attributes = T.unsafe(nil), &block); end
  def create!(attributes = T.unsafe(nil), &block); end
  def delete(*records); end
  def delete_all(dependent = T.unsafe(nil)); end
  def destroy(*records); end
  def destroy_all; end
  def distinct; end
  def empty?; end
  def fifth(*args); end
  def find(*args); end
  def first(*args); end
  def forty_two(*args); end
  def fourth(*args); end
  def ids_reader; end
  def ids_writer(ids); end
  def include?(record); end
  def last(*args); end
  def length; end
  def load_target; end
  def many?; end
  def null_scope?; end
  def reader(force_reload = T.unsafe(nil)); end
  def replace(other_array); end
  def reset; end
  def scope(opts = T.unsafe(nil)); end
  def second(*args); end
  def select(*fields); end
  def size; end
  def third(*args); end
  def transaction(*args); end
  def uniq; end
  def writer(records); end

  private

  def callback(method, record); end
  def callbacks_for(callback_name); end
  def concat_records(records, should_raise = T.unsafe(nil)); end
  def create_record(attributes, raise = T.unsafe(nil), &block); end
  def create_scope; end
  def delete_or_destroy(records, method); end
  def delete_records(records, method); end
  def fetch_first_nth_or_last_using_find?(args); end
  def find_by_scan(*args); end
  def find_target; end
  def first_nth_or_last(type, *args); end
  def include_in_memory?(record); end
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil)); end
  def merge_target_lists(persisted, memory); end
  def remove_records(existing_records, records, method); end
  def replace_records(new_target, original_target); end
end

class ActiveRecord::Associations::CollectionProxy < ::ActiveRecord::Relation
  def initialize(klass, association); end

  def <<(*records); end
  def ==(other); end
  def any?(&block); end
  def append(*records); end
  def average(*args, &block); end
  def build(attributes = T.unsafe(nil), &block); end
  def calculate(*args, &block); end
  def clear; end
  def concat(*records); end
  def count(column_name = T.unsafe(nil), options = T.unsafe(nil)); end
  def create(attributes = T.unsafe(nil), &block); end
  def create!(attributes = T.unsafe(nil), &block); end
  def delete(*records); end
  def delete_all(dependent = T.unsafe(nil)); end
  def destroy(*records); end
  def destroy_all; end
  def distinct; end
  def empty?; end
  def fifth(*args); end
  def find(*args, &block); end
  def first(*args); end
  def forty_two(*args); end
  def fourth(*args); end
  def ids(*args, &block); end
  def include?(record); end
  def last(*args); end
  def length; end
  def load_target; end
  def loaded?; end
  def many?(&block); end
  def maximum(*args, &block); end
  def minimum(*args, &block); end
  def new(attributes = T.unsafe(nil), &block); end
  def pluck(*args, &block); end
  def prepend(*args); end
  def proxy_association; end
  def push(*records); end
  def reload; end
  def replace(other_array); end
  def reset; end
  def scope; end
  def scoping; end
  def second(*args); end
  def select(*fields, &block); end
  def size; end
  def spawn; end
  def sum(*args, &block); end
  def target; end
  def third(*args); end
  def to_a; end
  def to_ary; end
  def uniq; end
end

class ActiveRecord::Associations::HasManyAssociation < ::ActiveRecord::Associations::CollectionAssociation
  def handle_dependency; end
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil)); end

  private

  def cached_counter_attribute_name(reflection = T.unsafe(nil)); end
  def count_records; end
  def delete_records(records, method); end
  def foreign_key_present?; end
  def has_cached_counter?(reflection = T.unsafe(nil)); end
  def inverse_updates_counter_cache?(reflection = T.unsafe(nil)); end
  def update_counter(difference, reflection = T.unsafe(nil)); end
end

class ActiveRecord::Associations::HasManyThroughAssociation < ::ActiveRecord::Associations::HasManyAssociation
  include(::ActiveRecord::Associations::ThroughAssociation)

  def initialize(owner, reflection); end

  def concat(*records); end
  def concat_records(records); end
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil)); end
  def size; end

  private

  def build_record(attributes); end
  def build_through_record(record); end
  def delete_records(records, method); end
  def delete_through_records(records); end
  def find_target; end
  def invertible_for?(record); end
  def save_through_record(record); end
  def target_reflection_has_associated_record?; end
  def through_association; end
  def through_records_for(record); end
  def update_through_counter?(method); end
end

class ActiveRecord::Associations::HasOneAssociation < ::ActiveRecord::Associations::SingularAssociation
  def delete(method = T.unsafe(nil)); end
  def handle_dependency; end
  def replace(record, save = T.unsafe(nil)); end

  private

  def nullify_owner_attributes(record); end
  def remove_target!(method); end
  def set_new_record(record); end
  def transaction_if(value); end
end

class ActiveRecord::Associations::HasOneThroughAssociation < ::ActiveRecord::Associations::HasOneAssociation
  include(::ActiveRecord::Associations::ThroughAssociation)

  def replace(record); end

  private

  def create_through_record(record); end
end

class ActiveRecord::Associations::JoinDependency
  def initialize(base, associations, joins); end

  def alias_tracker; end
  def aliases; end
  def base_klass; end
  def instantiate(result_set, aliases); end
  def join_constraints(outer_joins); end
  def join_root; end
  def reflections; end

  private

  def build(associations, base_klass); end
  def construct(ar_parent, parent, row, rs, seen, model_cache, aliases); end
  def construct_model(record, node, row, model_cache, id, aliases); end
  def construct_tables!(parent, node); end
  def find_reflection(klass, name); end
  def make_constraints(parent, child, tables, join_type); end
  def make_inner_joins(parent, child); end
  def make_outer_joins(parent, child); end
  def table_alias_for(reflection, parent, join); end
  def table_aliases_for(parent, node); end
  def walk(left, right); end

  class << self
    def make_tree(associations); end
    def walk_tree(associations, hash); end
  end
end

class ActiveRecord::Associations::JoinDependency::Aliases
  def initialize(tables); end

  def column_alias(node, column); end
  def column_aliases(node); end
  def columns; end
end

class ActiveRecord::Associations::JoinDependency::Aliases::Column < ::Struct
  def alias; end
  def alias=(_); end
  def name; end
  def name=(_); end

  class << self
    def [](*_); end
    def members; end
    def new(*_); end
  end
end

class ActiveRecord::Associations::JoinDependency::Aliases::Table < ::Struct
  def column_aliases; end
  def table; end
end

class ActiveRecord::Associations::JoinDependency::JoinAssociation < ::ActiveRecord::Associations::JoinDependency::JoinPart
  def initialize(reflection, children); end

  def aliased_table_name; end
  def build_constraint(klass, table, key, foreign_table, foreign_key); end
  def join_constraints(foreign_table, foreign_klass, node, join_type, tables, scope_chain, chain); end
  def match?(other); end
  def reflection; end
  def table; end
  def tables; end
  def tables=(_); end
end

class ActiveRecord::Associations::JoinDependency::JoinBase < ::ActiveRecord::Associations::JoinDependency::JoinPart
  def aliased_table_name; end
  def match?(other); end
  def table; end
end

class ActiveRecord::Associations::Preloader
  extend(::ActiveSupport::Autoload)

  def preload(records, associations, preload_scope = T.unsafe(nil)); end

  private

  def association_klass(reflection, record); end
  def grouped_records(association, records); end
  def preloader_for(reflection, owners, rhs_klass); end
  def preloaders_for_hash(association, records, scope); end
  def preloaders_for_one(association, records, scope); end
  def preloaders_on(association, records, scope); end
  def raise_config_error(record, association); end
  def records_by_reflection(association, records); end
end

class ActiveRecord::Associations::Preloader::AlreadyLoaded
  def initialize(klass, owners, reflection, preload_scope); end

  def owners; end
  def preloaded_records; end
  def reflection; end
  def run(preloader); end
end

class ActiveRecord::Associations::Preloader::Association
  def initialize(klass, owners, reflection, preload_scope); end

  def association_key; end
  def association_key_name; end
  def klass; end
  def model; end
  def options; end
  def owner_key_name; end
  def owners; end
  def owners_by_key; end
  def preload(preloader); end
  def preload_scope; end
  def preloaded_records; end
  def query_scope(ids); end
  def records_for(ids); end
  def reflection; end
  def run(preloader); end
  def scope; end
  def table; end

  private

  def associated_records_by_owner(preloader); end
  def build_scope; end
  def load_slices(slices); end
  def reflection_scope; end
end

class ActiveRecord::Associations::Preloader::BelongsTo < ::ActiveRecord::Associations::Preloader::SingularAssociation
  def association_key_name; end
  def owner_key_name; end
end

class ActiveRecord::Associations::Preloader::CollectionAssociation < ::ActiveRecord::Associations::Preloader::Association

  private

  def build_scope; end
  def preload(preloader); end
end

class ActiveRecord::Associations::Preloader::HasMany < ::ActiveRecord::Associations::Preloader::CollectionAssociation
  def association_key_name; end
  def owner_key_name; end
end

class ActiveRecord::Associations::Preloader::HasManyThrough < ::ActiveRecord::Associations::Preloader::CollectionAssociation
  include(::ActiveRecord::Associations::Preloader::ThroughAssociation)

  def associated_records_by_owner(preloader); end
end

class ActiveRecord::Associations::Preloader::HasOne < ::ActiveRecord::Associations::Preloader::SingularAssociation
  def association_key_name; end
  def owner_key_name; end

  private

  def build_scope; end
end

class ActiveRecord::Associations::Preloader::HasOneThrough < ::ActiveRecord::Associations::Preloader::SingularAssociation
  include(::ActiveRecord::Associations::Preloader::ThroughAssociation)
end

ActiveRecord::Associations::Preloader::NULL_RELATION = T.let(T.unsafe(nil), T.untyped)

class ActiveRecord::Associations::Preloader::NullPreloader
  class << self
    def new(klass, owners, reflection, preload_scope); end
    def run(preloader); end
  end
end

class ActiveRecord::Associations::Preloader::SingularAssociation < ::ActiveRecord::Associations::Preloader::Association

  private

  def preload(preloader); end
end

module ActiveRecord::Associations::Preloader::ThroughAssociation
  def associated_records_by_owner(preloader); end
  def source_reflection; end
  def through_reflection; end

  private

  def reset_association(owners, association_name); end
  def through_scope; end
end

class ActiveRecord::Associations::SingularAssociation < ::ActiveRecord::Associations::Association
  def build(attributes = T.unsafe(nil)); end
  def create(attributes = T.unsafe(nil), &block); end
  def create!(attributes = T.unsafe(nil), &block); end
  def reader(force_reload = T.unsafe(nil)); end
  def writer(record); end

  private

  def create_record(attributes, raise_error = T.unsafe(nil)); end
  def create_scope; end
  def find_target; end
  def replace(record); end
  def set_new_record(record); end
end

module ActiveRecord::Associations::ThroughAssociation
  def chain(*args, &block); end
  def source_reflection(*args, &block); end
  def through_reflection(*args, &block); end

  protected

  def target_scope; end

  private

  def construct_join_attributes(*records); end
  def ensure_mutable; end
  def ensure_not_nested; end
  def foreign_key_present?; end
  def stale_state; end
end

module ActiveRecord::AttributeAssignment
  include(::ActiveModel::ForbiddenAttributesProtection)
  extend(::ActiveSupport::Concern)

  def assign_attributes(new_attributes); end
  def attributes=(new_attributes); end

  private

  def _assign_attribute(k, v); end
  def assign_multiparameter_attributes(pairs); end
  def assign_nested_parameter_attributes(pairs); end
  def execute_callstack_for_multiparameter_attributes(callstack); end
  def extract_callstack_for_multiparameter_attributes(pairs); end
  def find_parameter_position(multiparameter_name); end
  def type_cast_attribute_value(multiparameter_name, value); end
end

class ActiveRecord::AttributeAssignment::MultiparameterAttribute
  def initialize(object, name, values); end

  def column; end
  def name; end
  def object; end
  def read_value; end
  def values; end

  private

  def blank_date_parameter?; end
  def extract_max_param(upper_cap = T.unsafe(nil)); end
  def instantiate_time_object(set_values); end
  def read_date; end
  def read_other(klass); end
  def read_time; end
  def validate_required_parameters!(positions); end
end

class ActiveRecord::AttributeAssignmentError < ::ActiveRecord::ActiveRecordError
  def initialize(message, exception, attribute); end

  def attribute; end
  def exception; end
end

module ActiveRecord::AttributeMethods
  extend(::ActiveSupport::Concern)
  extend(::ActiveSupport::Autoload)

  include(::ActiveModel::AttributeMethods)
  include(::ActiveRecord::AttributeMethods::Read)
  include(::ActiveRecord::AttributeMethods::Write)
  include(::ActiveRecord::AttributeMethods::BeforeTypeCast)
  include(::ActiveRecord::AttributeMethods::Query)
  include(::ActiveRecord::AttributeMethods::PrimaryKey)
  include(::ActiveRecord::AttributeMethods::TimeZoneConversion)
  include(::ActiveModel::Dirty)
  include(::ActiveRecord::AttributeMethods::Dirty)
  include(::ActiveRecord::AttributeMethods::Serialization)

  mixes_in_class_methods(::ActiveRecord::AttributeMethods::ClassMethods)

  def [](attr_name); end
  def []=(attr_name, value); end
  def attribute_for_inspect(attr_name); end
  def attribute_names; end
  def attribute_present?(attribute); end
  def attributes; end
  def attributes_for_coder; end
  def column_for_attribute(name); end
  def has_attribute?(attr_name); end
  def method_missing(method, *args, &block); end
  def respond_to?(name, include_private = T.unsafe(nil)); end

  protected

  def arel_attributes_with_values_for_create(attribute_names); end
  def arel_attributes_with_values_for_update(attribute_names); end
  def attribute_method?(attr_name); end
  def clone_attribute_value(reader_method, attribute_name); end
  def clone_attributes(reader_method = T.unsafe(nil), attributes = T.unsafe(nil)); end

  private

  def arel_attributes_with_values(attribute_names); end
  def attributes_for_create(attribute_names); end
  def attributes_for_update(attribute_names); end
  def pk_attribute?(name); end
  def readonly_attribute?(name); end
  def typecasted_attribute_value(name); end
end

module ActiveRecord::AttributeMethods::AttrNames
  class << self
    def set_name_cache(name, value); end
  end
end

class ActiveRecord::AttributeMethods::AttributeMethodCache
  def initialize; end

  def [](name); end

  private

  def method_body; end
end

ActiveRecord::AttributeMethods::BLACKLISTED_CLASS_METHODS = T.let(T.unsafe(nil), Array)

module ActiveRecord::AttributeMethods::BeforeTypeCast
  extend(::ActiveSupport::Concern)

  def attributes_before_type_cast; end
  def read_attribute_before_type_cast(attr_name); end

  private

  def attribute_before_type_cast(attribute_name); end
end

module ActiveRecord::AttributeMethods::ClassMethods
  def attribute_method?(attribute); end
  def attribute_names; end
  def class_method_defined_within?(name, klass, superklass = T.unsafe(nil)); end
  def dangerous_attribute_method?(name); end
  def dangerous_class_method?(method_name); end
  def define_attribute_methods; end
  def find_generated_attribute_method(method_name); end
  def inherited(child_class); end
  def initialize_generated_modules; end
  def instance_method_already_implemented?(method_name); end
  def method_defined_within?(name, klass, superklass = T.unsafe(nil)); end
  def undefine_attribute_methods; end
end

module ActiveRecord::AttributeMethods::Dirty
  extend(::ActiveSupport::Concern)

  include(::ActiveModel::AttributeMethods)
  include(::ActiveModel::Dirty)

  def reload(*_); end
  def save(*_); end
  def save!(*_); end

  private

  def _field_changed?(attr, old, value); end
  def changes_from_nil_to_empty_string?(column, old, value); end
  def changes_from_zero_to_string?(old, value); end
  def create_record(*_); end
  def init_changed_attributes; end
  def initialize_dup(other); end
  def initialize_internals_callback; end
  def keys_for_partial_write; end
  def non_zero?(value); end
  def save_changed_attribute(attr, value); end
  def update_record(*_); end
  def write_attribute(attr, value); end
end

module ActiveRecord::AttributeMethods::PrimaryKey
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods)

  def id; end
  def id=(value); end
  def id?; end
  def id_before_type_cast; end
  def to_key; end

  protected

  def attribute_method?(attr_name); end
end

module ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  def dangerous_attribute_method?(method_name); end
  def define_method_attribute(attr_name); end
  def get_primary_key(base_name); end
  def primary_key; end
  def primary_key=(value); end
  def quoted_primary_key; end
  def reset_primary_key; end
end

ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods::ID_ATTRIBUTE_METHODS = T.let(T.unsafe(nil), Set)

module ActiveRecord::AttributeMethods::Query
  extend(::ActiveSupport::Concern)

  def query_attribute(attr_name); end

  private

  def attribute?(attribute_name); end
end

module ActiveRecord::AttributeMethods::Read
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::AttributeMethods::Read::ClassMethods)

  def read_attribute(attr_name); end

  private

  def attribute(attribute_name); end
end

ActiveRecord::AttributeMethods::Read::ATTRIBUTE_TYPES_CACHED_BY_DEFAULT = T.let(T.unsafe(nil), Array)

module ActiveRecord::AttributeMethods::Read::ClassMethods
  def cache_attribute?(attr_name); end
  def cache_attributes(*attribute_names); end
  def cached_attributes; end

  protected

  def define_method_attribute(name); end

  private

  def cacheable_column?(column); end
end

ActiveRecord::AttributeMethods::Read::ReaderMethodCache = T.let(T.unsafe(nil), T.untyped)

module ActiveRecord::AttributeMethods::Serialization
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::AttributeMethods::Serialization::ClassMethods)
end

class ActiveRecord::AttributeMethods::Serialization::Attribute < ::Struct
  def serialize; end
  def serialized_value; end
  def unserialize(v); end
  def unserialized_value(v = T.unsafe(nil)); end
end

module ActiveRecord::AttributeMethods::Serialization::Behavior
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::AttributeMethods::Serialization::Behavior::ClassMethods)

  def _field_changed?(attr, old, value); end
  def attributes_before_type_cast; end
  def attributes_for_coder; end
  def keys_for_partial_write; end
  def read_attribute_before_type_cast(attr_name); end
  def should_record_timestamps?; end
  def type_cast_attribute_for_write(column, value); end
  def typecasted_attribute_value(name); end
end

module ActiveRecord::AttributeMethods::Serialization::Behavior::ClassMethods
  def initialize_attributes(attributes, options = T.unsafe(nil)); end
end

module ActiveRecord::AttributeMethods::Serialization::ClassMethods
  def serialize(attr_name, class_name = T.unsafe(nil)); end
end

class ActiveRecord::AttributeMethods::Serialization::Type
  def initialize(column); end

  def accessor; end
  def type; end
  def type_cast(value); end
end

module ActiveRecord::AttributeMethods::TimeZoneConversion
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods)
end

module ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods

  protected

  def define_method_attribute=(attr_name); end

  private

  def create_time_zone_conversion_attribute?(name, column); end
end

class ActiveRecord::AttributeMethods::TimeZoneConversion::Type
  def initialize(column); end

  def type; end
  def type_cast(value); end
end

module ActiveRecord::AttributeMethods::Write
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::AttributeMethods::Write::ClassMethods)

  def raw_write_attribute(attr_name, value); end
  def write_attribute(attr_name, value); end

  private

  def attribute=(attribute_name, value); end
  def type_cast_attribute_for_write(column, value); end
end

module ActiveRecord::AttributeMethods::Write::ClassMethods

  protected

  def define_method_attribute=(name); end
end

ActiveRecord::AttributeMethods::Write::WriterMethodCache = T.let(T.unsafe(nil), T.untyped)

module ActiveRecord::AutosaveAssociation
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::AutosaveAssociation::ClassMethods)

  def changed_for_autosave?; end
  def destroyed_by_association; end
  def destroyed_by_association=(reflection); end
  def mark_for_destruction; end
  def marked_for_destruction?; end
  def reload(options = T.unsafe(nil)); end

  private

  def associated_records_to_validate_or_save(association, new_record, autosave); end
  def association_valid?(reflection, record); end
  def before_save_collection_association; end
  def nested_records_changed_for_autosave?; end
  def record_changed?(reflection, record, key); end
  def save_belongs_to_association(reflection); end
  def save_collection_association(reflection); end
  def save_has_one_association(reflection); end
  def validate_collection_association(reflection); end
  def validate_single_association(reflection); end
end

module ActiveRecord::AutosaveAssociation::AssociationBuilderExtension
  class << self
    def build(model, reflection); end
    def valid_options; end
  end
end

module ActiveRecord::AutosaveAssociation::ClassMethods

  private

  def add_autosave_association_callbacks(reflection); end
  def define_non_cyclic_method(name, &block); end
end

class ActiveRecord::Base
  include(::ActiveRecord::Core)
  include(::ActiveRecord::Persistence)
  include(::ActiveRecord::NoTouching)
  include(::ActiveRecord::ReadonlyAttributes)
  include(::ActiveRecord::ModelSchema)
  include(::ActiveRecord::Inheritance)
  include(::ActiveRecord::Scoping)
  include(::ActiveRecord::Scoping::Default)
  include(::ActiveRecord::Scoping::Named)
  include(::ActiveRecord::Sanitization)
  include(::ActiveModel::ForbiddenAttributesProtection)
  include(::ActiveRecord::AttributeAssignment)
  include(::ActiveModel::Conversion)
  include(::ActiveRecord::Integration)
  include(::ActiveModel::Validations)
  include(::ActiveSupport::Callbacks)
  include(::ActiveModel::Validations::HelperMethods)
  include(::ActiveRecord::Validations)
  include(::ActiveRecord::CounterCache)
  include(::ActiveRecord::Locking::Optimistic)
  include(::ActiveRecord::Locking::Pessimistic)
  include(::ActiveModel::AttributeMethods)
  include(::ActiveRecord::AttributeMethods)
  include(::ActiveRecord::AttributeMethods::Read)
  include(::ActiveRecord::AttributeMethods::Write)
  include(::ActiveRecord::AttributeMethods::BeforeTypeCast)
  include(::ActiveRecord::AttributeMethods::Query)
  include(::ActiveRecord::AttributeMethods::PrimaryKey)
  include(::ActiveRecord::AttributeMethods::TimeZoneConversion)
  include(::ActiveModel::Dirty)
  include(::ActiveRecord::AttributeMethods::Dirty)
  include(::ActiveRecord::AttributeMethods::Serialization)
  include(::ActiveRecord::Callbacks)
  include(::ActiveModel::Validations::Callbacks)
  include(::ActiveRecord::Timestamp)
  include(::ActiveRecord::Associations)
  include(::ActiveModel::SecurePassword)
  include(::ActiveRecord::AutosaveAssociation)
  include(::ActiveRecord::NestedAttributes)
  include(::ActiveRecord::Aggregations)
  include(::ActiveRecord::Transactions)
  include(::ActiveRecord::Reflection)
  include(::ActiveModel::Serialization)
  include(::ActiveModel::Serializers::JSON)
  include(::ActiveModel::Serializers::Xml)
  include(::ActiveRecord::Serialization)
  include(::ActiveRecord::Store)
  extend(::ActiveModel::Naming)
  extend(::ActiveSupport::Benchmarkable)
  extend(::ActiveSupport::DescendantsTracker)
  extend(::ActiveRecord::ConnectionHandling)
  extend(::ActiveRecord::QueryCache::ClassMethods)
  extend(::ActiveRecord::Querying)
  extend(::ActiveModel::Translation)
  extend(::ActiveRecord::Translation)
  extend(::ActiveRecord::DynamicMatchers)
  extend(::ActiveRecord::Explain)
  extend(::ActiveRecord::Enum)
  extend(::ActiveRecord::Delegation::DelegateCache)
  extend(::ActiveRecord::Core::ClassMethods)
  extend(::ActiveRecord::Persistence::ClassMethods)
  extend(::ActiveRecord::NoTouching::ClassMethods)
  extend(::ActiveRecord::ReadonlyAttributes::ClassMethods)
  extend(::ActiveRecord::ModelSchema::ClassMethods)
  extend(::ActiveRecord::Inheritance::ClassMethods)
  extend(::ActiveRecord::Scoping::ClassMethods)
  extend(::ActiveRecord::Scoping::Default::ClassMethods)
  extend(::ActiveRecord::Scoping::Named::ClassMethods)
  extend(::ActiveRecord::Sanitization::ClassMethods)
  extend(::ActiveModel::Conversion::ClassMethods)
  extend(::ActiveRecord::Integration::ClassMethods)
  extend(::ActiveModel::Validations::ClassMethods)
  extend(::ActiveModel::Callbacks)
  extend(::ActiveSupport::Callbacks::ClassMethods)
  extend(::ActiveModel::Validations::HelperMethods)
  extend(::ActiveRecord::Validations::ClassMethods)
  extend(::ActiveRecord::CounterCache::ClassMethods)
  extend(::ActiveRecord::Locking::Optimistic::ClassMethods)
  extend(::ActiveModel::AttributeMethods::ClassMethods)
  extend(::ActiveRecord::AttributeMethods::ClassMethods)
  extend(::ActiveRecord::AttributeMethods::Read::ClassMethods)
  extend(::ActiveRecord::AttributeMethods::Write::ClassMethods)
  extend(::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods)
  extend(::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods)
  extend(::ActiveRecord::AttributeMethods::Serialization::ClassMethods)
  extend(::ActiveRecord::Callbacks::ClassMethods)
  extend(::ActiveModel::Validations::Callbacks::ClassMethods)
  extend(::ActiveRecord::Associations::ClassMethods)
  extend(::ActiveModel::SecurePassword::ClassMethods)
  extend(::ActiveRecord::AutosaveAssociation::ClassMethods)
  extend(::ActiveRecord::NestedAttributes::ClassMethods)
  extend(::ActiveRecord::Aggregations::ClassMethods)
  extend(::ActiveRecord::Transactions::ClassMethods)
  extend(::ActiveRecord::Reflection::ClassMethods)
  extend(::ActiveRecord::Store::ClassMethods)
  extend(::RGeo::ActiveRecord::ActiveRecordBaseFactorySettings)
  extend(::ActiveRecord::ConnectionAdapters::PostGISAdapter::DecorateColumnsModification)

  def _commit_callbacks; end
  def _commit_callbacks=(_); end
  def _commit_callbacks?; end
  def _create_callbacks; end
  def _create_callbacks=(_); end
  def _create_callbacks?; end
  def _destroy_callbacks; end
  def _destroy_callbacks=(_); end
  def _destroy_callbacks?; end
  def _find_callbacks; end
  def _find_callbacks=(_); end
  def _find_callbacks?; end
  def _initialize_callbacks; end
  def _initialize_callbacks=(_); end
  def _initialize_callbacks?; end
  def _rollback_callbacks; end
  def _rollback_callbacks=(_); end
  def _rollback_callbacks?; end
  def _save_callbacks; end
  def _save_callbacks=(_); end
  def _save_callbacks?; end
  def _touch_callbacks; end
  def _touch_callbacks=(_); end
  def _touch_callbacks?; end
  def _update_callbacks; end
  def _update_callbacks=(_); end
  def _update_callbacks?; end
  def _validate_callbacks; end
  def _validate_callbacks=(_); end
  def _validate_callbacks?; end
  def _validation_callbacks; end
  def _validation_callbacks=(_); end
  def _validation_callbacks?; end
  def _validators; end
  def _validators=(_); end
  def _validators?; end
  def aggregate_reflections; end
  def aggregate_reflections=(_); end
  def aggregate_reflections?; end
  def attribute_aliases; end
  def attribute_aliases?; end
  def attribute_method_matchers; end
  def attribute_method_matchers?; end
  def attribute_types_cached_by_default; end
  def attribute_types_cached_by_default?; end
  def cache_timestamp_format; end
  def cache_timestamp_format?; end
  def default_connection_handler; end
  def default_connection_handler?; end
  def default_scopes; end
  def default_timezone; end
  def defined_enums; end
  def defined_enums=(_); end
  def defined_enums?; end
  def dump_schema_after_migration; end
  def include_root_in_json; end
  def include_root_in_json=(_); end
  def include_root_in_json?; end
  def lock_optimistically; end
  def lock_optimistically?; end
  def logger; end
  def nested_attributes_options; end
  def nested_attributes_options?; end
  def partial_writes; end
  def partial_writes?; end
  def pluralize_table_names; end
  def pluralize_table_names?; end
  def primary_key_prefix_type; end
  def record_timestamps; end
  def record_timestamps=(_); end
  def record_timestamps?; end
  def reflections; end
  def reflections=(_); end
  def reflections?; end
  def schema_format; end
  def skip_time_zone_conversion_for_attributes; end
  def skip_time_zone_conversion_for_attributes?; end
  def store_full_sti_class; end
  def store_full_sti_class?; end
  def table_name_prefix; end
  def table_name_prefix?; end
  def table_name_suffix; end
  def table_name_suffix?; end
  def time_zone_aware_attributes; end
  def timestamped_migrations; end
  def validation_context; end
  def validation_context=(_); end

  class << self
    def _attr_readonly; end
    def _attr_readonly=(val); end
    def _attr_readonly?; end
    def _commit_callbacks; end
    def _commit_callbacks=(val); end
    def _commit_callbacks?; end
    def _create_callbacks; end
    def _create_callbacks=(val); end
    def _create_callbacks?; end
    def _destroy_callbacks; end
    def _destroy_callbacks=(val); end
    def _destroy_callbacks?; end
    def _find_callbacks; end
    def _find_callbacks=(val); end
    def _find_callbacks?; end
    def _initialize_callbacks; end
    def _initialize_callbacks=(val); end
    def _initialize_callbacks?; end
    def _rollback_callbacks; end
    def _rollback_callbacks=(val); end
    def _rollback_callbacks?; end
    def _save_callbacks; end
    def _save_callbacks=(val); end
    def _save_callbacks?; end
    def _touch_callbacks; end
    def _touch_callbacks=(val); end
    def _touch_callbacks?; end
    def _update_callbacks; end
    def _update_callbacks=(val); end
    def _update_callbacks?; end
    def _validate_callbacks; end
    def _validate_callbacks=(val); end
    def _validate_callbacks?; end
    def _validation_callbacks; end
    def _validation_callbacks=(val); end
    def _validation_callbacks?; end
    def _validators; end
    def _validators=(val); end
    def _validators?; end
    def after_create(*args, &block); end
    def after_destroy(*args, &block); end
    def after_find(*args, &block); end
    def after_initialize(*args, &block); end
    def after_save(*args, &block); end
    def after_touch(*args, &block); end
    def after_update(*args, &block); end
    def aggregate_reflections; end
    def aggregate_reflections=(val); end
    def aggregate_reflections?; end
    def around_create(*args, &block); end
    def around_destroy(*args, &block); end
    def around_save(*args, &block); end
    def around_update(*args, &block); end
    def attribute_aliases; end
    def attribute_aliases=(val); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(val); end
    def attribute_method_matchers?; end
    def attribute_types_cached_by_default; end
    def attribute_types_cached_by_default=(val); end
    def attribute_types_cached_by_default?; end
    def before_create(*args, &block); end
    def before_destroy(*args, &block); end
    def before_save(*args, &block); end
    def before_update(*args, &block); end
    def cache_timestamp_format; end
    def cache_timestamp_format=(val); end
    def cache_timestamp_format?; end
    def configurations; end
    def configurations=(config); end
    def connection_handler; end
    def connection_handler=(handler); end
    def default_connection_handler; end
    def default_connection_handler=(val); end
    def default_connection_handler?; end
    def default_scopes; end
    def default_scopes=(val); end
    def default_timezone; end
    def default_timezone=(obj); end
    def defined_enums; end
    def defined_enums=(val); end
    def defined_enums?; end
    def disable_implicit_join_references=(value); end
    def dump_schema_after_migration; end
    def dump_schema_after_migration=(obj); end
    def include_root_in_json; end
    def include_root_in_json=(val); end
    def include_root_in_json?; end
    def lock_optimistically; end
    def lock_optimistically=(val); end
    def lock_optimistically?; end
    def logger; end
    def logger=(obj); end
    def maintain_test_schema; end
    def maintain_test_schema=(obj); end
    def nested_attributes_options; end
    def nested_attributes_options=(val); end
    def nested_attributes_options?; end
    def partial_writes; end
    def partial_writes=(val); end
    def partial_writes?; end
    def pluralize_table_names; end
    def pluralize_table_names=(val); end
    def pluralize_table_names?; end
    def primary_key_prefix_type; end
    def primary_key_prefix_type=(obj); end
    def record_timestamps; end
    def record_timestamps=(val); end
    def record_timestamps?; end
    def reflections; end
    def reflections=(val); end
    def reflections?; end
    def schema_format; end
    def schema_format=(obj); end
    def schema_migrations_table_name; end
    def schema_migrations_table_name=(val); end
    def schema_migrations_table_name?; end
    def serialized_attributes; end
    def serialized_attributes=(val); end
    def serialized_attributes?; end
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes=(val); end
    def skip_time_zone_conversion_for_attributes?; end
    def store_full_sti_class; end
    def store_full_sti_class=(val); end
    def store_full_sti_class?; end
    def stored_attributes; end
    def stored_attributes=(val); end
    def stored_attributes?; end
    def table_name_prefix; end
    def table_name_prefix=(val); end
    def table_name_prefix?; end
    def table_name_suffix; end
    def table_name_suffix=(val); end
    def table_name_suffix?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes=(obj); end
    def timestamped_migrations; end
    def timestamped_migrations=(obj); end
  end
end

module ActiveRecord::Batches
  def find_each(options = T.unsafe(nil)); end
  def find_in_batches(options = T.unsafe(nil)); end

  private

  def batch_order; end
end

module ActiveRecord::Calculations
  def average(column_name, options = T.unsafe(nil)); end
  def calculate(operation, column_name, options = T.unsafe(nil)); end
  def count(column_name = T.unsafe(nil), options = T.unsafe(nil)); end
  def ids; end
  def maximum(column_name, options = T.unsafe(nil)); end
  def minimum(column_name, options = T.unsafe(nil)); end
  def pluck(*column_names); end
  def sum(*args); end

  private

  def aggregate_column(column_name); end
  def build_count_subquery(relation, column_name, distinct); end
  def column_alias_for(keys); end
  def column_for(field); end
  def execute_grouped_calculation(operation, column_name, distinct); end
  def execute_simple_calculation(operation, column_name, distinct); end
  def has_include?(column_name); end
  def operation_over_aggregate_column(column, operation, distinct); end
  def perform_calculation(operation, column_name, options = T.unsafe(nil)); end
  def select_for_count; end
  def type_cast_calculated_value(value, column, operation = T.unsafe(nil)); end
  def type_cast_using_column(value, column); end
end

module ActiveRecord::Callbacks
  extend(::ActiveSupport::Concern)

  include(::ActiveSupport::Callbacks)
  include(::ActiveModel::Validations::Callbacks)

  mixes_in_class_methods(::ActiveRecord::Callbacks::ClassMethods)

  def destroy; end
  def touch(*_); end

  private

  def create_or_update; end
  def create_record; end
  def update_record(*_); end
end

ActiveRecord::Callbacks::CALLBACKS = T.let(T.unsafe(nil), Array)

module ActiveRecord::Callbacks::ClassMethods
  include(::ActiveModel::Callbacks)
end

module ActiveRecord::Coders
end

class ActiveRecord::Coders::YAMLColumn
  def initialize(object_class = T.unsafe(nil)); end

  def dump(obj); end
  def load(yaml); end
  def object_class; end
  def object_class=(_); end
end

class ActiveRecord::ConfigurationError < ::ActiveRecord::ActiveRecordError
end

module ActiveRecord::ConnectionAdapters
  extend(::ActiveSupport::Autoload)
end

class ActiveRecord::ConnectionAdapters::AbstractAdapter
  include(::ActiveRecord::Migration::JoinTable)
  include(::ActiveRecord::ConnectionAdapters::SchemaStatements)
  include(::ActiveRecord::ConnectionAdapters::DatabaseStatements)
  include(::ActiveRecord::ConnectionAdapters::Quoting)
  include(::ActiveRecord::ConnectionAdapters::DatabaseLimits)
  include(::ActiveRecord::ConnectionAdapters::QueryCache)
  include(::ActiveSupport::Callbacks)
  include(::MonitorMixin)
  include(::ActiveRecord::ConnectionAdapters::ColumnDumper)
  extend(::ActiveSupport::Callbacks::ClassMethods)
  extend(::ActiveSupport::DescendantsTracker)

  def initialize(connection, logger = T.unsafe(nil), pool = T.unsafe(nil)); end

  def _checkin_callbacks; end
  def _checkin_callbacks=(_); end
  def _checkin_callbacks?; end
  def _checkout_callbacks; end
  def _checkout_callbacks=(_); end
  def _checkout_callbacks?; end
  def active?; end
  def active_threadsafe?; end
  def adapter_name; end
  def case_insensitive_comparison(table, attribute, column, value); end
  def case_sensitive_modifier(node); end
  def clear_cache!; end
  def close; end
  def create_savepoint(name = T.unsafe(nil)); end
  def current_savepoint_name; end
  def delete(*_); end
  def disable_extension(name); end
  def disable_referential_integrity; end
  def disconnect!; end
  def enable_extension(name); end
  def expire; end
  def extensions; end
  def in_use; end
  def in_use?; end
  def index_algorithms; end
  def insert(*_); end
  def last_use; end
  def lease; end
  def logger; end
  def open_transactions; end
  def pool; end
  def pool=(_); end
  def prefetch_primary_key?(table_name = T.unsafe(nil)); end
  def raw_connection; end
  def reconnect!; end
  def release_savepoint(name = T.unsafe(nil)); end
  def requires_reloading?; end
  def reset!; end
  def rollback_to_savepoint(name = T.unsafe(nil)); end
  def schema_cache; end
  def schema_cache=(cache); end
  def schema_creation; end
  def substitute_at(column, index); end
  def supports_bulk_alter?; end
  def supports_count_distinct?; end
  def supports_ddl_transactions?; end
  def supports_explain?; end
  def supports_extensions?; end
  def supports_index_sort_order?; end
  def supports_migrations?; end
  def supports_partial_index?; end
  def supports_primary_key?; end
  def supports_savepoints?; end
  def supports_transaction_isolation?; end
  def unprepared_statement; end
  def unprepared_visitor; end
  def update(*_); end
  def valid_type?(type); end
  def verify!(*ignored); end
  def visitor; end
  def visitor=(_); end

  protected

  def log(sql, name = T.unsafe(nil), binds = T.unsafe(nil), statement_name = T.unsafe(nil)); end
  def translate_exception(exception, message); end
  def translate_exception_class(e, sql); end
  def without_prepared_statement?(binds); end

  class << self
    def _checkin_callbacks; end
    def _checkin_callbacks=(val); end
    def _checkin_callbacks?; end
    def _checkout_callbacks; end
    def _checkout_callbacks=(val); end
    def _checkout_callbacks?; end
    def type_cast_config_to_boolean(config); end
    def type_cast_config_to_integer(config); end
  end
end

ActiveRecord::ConnectionAdapters::AbstractAdapter::SIMPLE_INT = T.let(T.unsafe(nil), Regexp)

class ActiveRecord::ConnectionAdapters::AbstractAdapter::SchemaCreation
  def initialize(conn); end

  def accept(o); end
  def visit_AddColumn(o); end

  private

  def add_column_options!(sql, options); end
  def column_options(o); end
  def options_include_default?(options); end
  def quote_column_name(name); end
  def quote_table_name(name); end
  def type_to_sql(type, limit, precision, scale); end
  def visit_AlterTable(o); end
  def visit_ColumnDefinition(o); end
  def visit_TableDefinition(o); end
end

class ActiveRecord::ConnectionAdapters::AlterTable
  def initialize(td); end

  def add_column(name, type, options); end
  def adds; end
  def name; end
end

class ActiveRecord::ConnectionAdapters::ChangeColumnDefinition < ::Struct
end

class ActiveRecord::ConnectionAdapters::ClosedTransaction < ::ActiveRecord::ConnectionAdapters::Transaction
  def add_record(record); end
  def begin(options = T.unsafe(nil)); end
  def closed?; end
  def joinable?; end
  def number; end
  def open?; end
end

class ActiveRecord::ConnectionAdapters::Column
  def initialize(name, default, sql_type = T.unsafe(nil), null = T.unsafe(nil)); end

  def binary?; end
  def coder; end
  def coder=(_); end
  def default; end
  def default_function; end
  def encoded?; end
  def extract_default(default); end
  def has_default?; end
  def human_name; end
  def klass; end
  def limit; end
  def name; end
  def null; end
  def number?; end
  def precision; end
  def primary; end
  def primary=(_); end
  def scale; end
  def sql_type; end
  def text?; end
  def type; end
  def type_cast(value); end
  def type_cast_for_write(value); end

  private

  def extract_limit(sql_type); end
  def extract_precision(sql_type); end
  def extract_scale(sql_type); end
  def simplified_type(field_type); end

  class << self
    def binary_to_string(value); end
    def string_to_dummy_time(string); end
    def string_to_time(string); end
    def value_to_boolean(value); end
    def value_to_date(value); end
    def value_to_decimal(value); end
    def value_to_integer(value); end

    protected

    def fallback_string_to_date(string); end
    def fallback_string_to_time(string); end
    def fast_string_to_date(string); end
    def fast_string_to_time(string); end
    def microseconds(time); end
    def new_date(year, mon, mday); end
    def new_time(year, mon, mday, hour, min, sec, microsec, offset = T.unsafe(nil)); end
  end
end

ActiveRecord::ConnectionAdapters::Column::FALSE_VALUES = T.let(T.unsafe(nil), Set)

module ActiveRecord::ConnectionAdapters::Column::Format
end

ActiveRecord::ConnectionAdapters::Column::Format::ISO_DATE = T.let(T.unsafe(nil), Regexp)

ActiveRecord::ConnectionAdapters::Column::Format::ISO_DATETIME = T.let(T.unsafe(nil), Regexp)

ActiveRecord::ConnectionAdapters::Column::TRUE_VALUES = T.let(T.unsafe(nil), Set)

class ActiveRecord::ConnectionAdapters::ColumnDefinition < ::Struct
  def primary_key?; end
end

module ActiveRecord::ConnectionAdapters::ColumnDumper
  def column_spec(column, types); end
  def migration_keys; end
  def prepare_column_options(column, types); end

  private

  def default_string(value); end
end

class ActiveRecord::ConnectionAdapters::ConnectionHandler
  def initialize; end

  def active_connections?; end
  def clear_active_connections!; end
  def clear_all_connections!; end
  def clear_reloadable_connections!; end
  def connected?(klass); end
  def connection_pool_list; end
  def connection_pools; end
  def establish_connection(owner, spec); end
  def remove_connection(owner); end
  def retrieve_connection(klass); end
  def retrieve_connection_pool(klass); end

  private

  def class_to_pool; end
  def owner_to_pool; end
  def pool_for(owner); end
  def pool_from_any_process_for(owner); end
end

class ActiveRecord::ConnectionAdapters::ConnectionManagement
  def initialize(app); end

  def call(env); end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool
  include(::MonitorMixin)

  def initialize(spec); end

  def active_connection?; end
  def automatic_reconnect; end
  def automatic_reconnect=(_); end
  def checkin(conn); end
  def checkout; end
  def checkout_timeout; end
  def checkout_timeout=(_); end
  def clear_reloadable_connections!; end
  def connected?; end
  def connection; end
  def connections; end
  def dead_connection_timeout; end
  def dead_connection_timeout=(_); end
  def disconnect!; end
  def reap; end
  def reaper; end
  def release_connection(with_id = T.unsafe(nil)); end
  def remove(conn); end
  def rgeo_factory_settings; end
  def size; end
  def spec; end
  def with_connection; end

  private

  def acquire_connection; end
  def checkout_and_verify(c); end
  def checkout_new_connection; end
  def current_connection_id; end
  def new_connection; end
  def new_connection_without_rgeo_modification; end
  def release(conn); end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::Queue
  def initialize(lock = T.unsafe(nil)); end

  def add(element); end
  def any_waiting?; end
  def clear; end
  def delete(element); end
  def num_waiting; end
  def poll(timeout = T.unsafe(nil)); end

  private

  def any?; end
  def can_remove_no_wait?; end
  def no_wait_poll; end
  def remove; end
  def synchronize(&block); end
  def wait_poll(timeout); end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper
  def initialize(pool, frequency); end

  def frequency; end
  def pool; end
  def run; end
end

class ActiveRecord::ConnectionAdapters::ConnectionSpecification
  def initialize(config, adapter_method); end

  def adapter_method; end
  def config; end

  private

  def initialize_dup(original); end
end

class ActiveRecord::ConnectionAdapters::ConnectionSpecification::ConnectionUrlResolver
  def initialize(url); end

  def to_hash; end

  private

  def database_from_path; end
  def query_hash; end
  def raw_config; end
  def uri; end
  def uri_parser; end
end

class ActiveRecord::ConnectionAdapters::ConnectionSpecification::Resolver
  def initialize(configurations); end

  def configurations; end
  def resolve(config); end
  def resolve_all; end
  def spec(config); end

  private

  def resolve_connection(spec); end
  def resolve_hash_connection(spec); end
  def resolve_string_connection(spec); end
  def resolve_symbol_connection(spec); end
  def resolve_url_connection(url); end
end

module ActiveRecord::ConnectionAdapters::DatabaseLimits
  def allowed_index_name_length; end
  def column_name_length; end
  def columns_per_multicolumn_index; end
  def columns_per_table; end
  def in_clause_length; end
  def index_name_length; end
  def indexes_per_table; end
  def joins_per_query; end
  def sql_query_length; end
  def table_alias_length; end
  def table_name_length; end
end

module ActiveRecord::ConnectionAdapters::DatabaseStatements
  def initialize; end

  def add_transaction_record(record); end
  def begin_db_transaction; end
  def begin_isolated_db_transaction(isolation); end
  def begin_transaction(options = T.unsafe(nil)); end
  def commit_db_transaction; end
  def commit_transaction; end
  def current_transaction; end
  def default_sequence_name(table, column); end
  def delete(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def empty_insert_statement_value; end
  def exec_delete(sql, name, binds); end
  def exec_insert(sql, name, binds, pk = T.unsafe(nil), sequence_name = T.unsafe(nil)); end
  def exec_query(sql, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def exec_update(sql, name, binds); end
  def insert(arel, name = T.unsafe(nil), pk = T.unsafe(nil), id_value = T.unsafe(nil), sequence_name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def insert_fixture(fixture, table_name); end
  def join_to_delete(delete, select, key); end
  def join_to_update(update, select); end
  def limited_update_conditions(where_sql, quoted_table_name, quoted_primary_key); end
  def reset_sequence!(table, column, sequence = T.unsafe(nil)); end
  def reset_transaction; end
  def rollback_db_transaction; end
  def rollback_transaction; end
  def sanitize_limit(limit); end
  def select_all(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def select_one(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def select_value(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def select_values(arel, name = T.unsafe(nil)); end
  def supports_statement_cache?; end
  def to_sql(arel, binds = T.unsafe(nil)); end
  def transaction(options = T.unsafe(nil)); end
  def transaction_isolation_levels; end
  def transaction_open?; end
  def update(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def within_new_transaction(options = T.unsafe(nil)); end

  protected

  def delete_sql(sql, name = T.unsafe(nil)); end
  def insert_sql(sql, name = T.unsafe(nil), pk = T.unsafe(nil), id_value = T.unsafe(nil), sequence_name = T.unsafe(nil)); end
  def last_inserted_id(result); end
  def sql_for_insert(sql, pk, id_value, sequence_name, binds); end
  def subquery_for(key, select); end
  def update_sql(sql, name = T.unsafe(nil)); end
end

class ActiveRecord::ConnectionAdapters::IndexDefinition < ::Struct
end

class ActiveRecord::ConnectionAdapters::OpenTransaction < ::ActiveRecord::ConnectionAdapters::Transaction
  def initialize(connection, parent, options = T.unsafe(nil)); end

  def add_record(record); end
  def begin(options = T.unsafe(nil)); end
  def closed?; end
  def commit; end
  def commit_records; end
  def finishing?; end
  def joinable=(_); end
  def joinable?; end
  def number; end
  def open?; end
  def parent; end
  def records; end
  def rollback; end
  def rollback_records; end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter < ::ActiveRecord::ConnectionAdapters::AbstractAdapter
  include(::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting)
  include(::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ReferentialIntegrity)
  include(::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements)
  include(::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements)
  include(::ActiveRecord::ConnectionAdapters::Savepoints)

  def initialize(connection, logger, connection_parameters, config); end

  def active?; end
  def active_threadsafe?; end
  def adapter_name; end
  def clear_cache!; end
  def disable_extension(name); end
  def disconnect!; end
  def enable_extension(name); end
  def extension_enabled?(name); end
  def extensions; end
  def index_algorithms; end
  def migration_keys; end
  def native_database_types; end
  def prepare_column_options(column, types); end
  def reconnect!; end
  def reset!; end
  def schema_creation; end
  def session_auth=(user); end
  def set_standard_conforming_strings; end
  def supports_ddl_transactions?; end
  def supports_explain?; end
  def supports_extensions?; end
  def supports_index_sort_order?; end
  def supports_insert_with_returning?; end
  def supports_migrations?; end
  def supports_partial_index?; end
  def supports_primary_key?; end
  def supports_ranges?; end
  def supports_statement_cache?; end
  def supports_transaction_isolation?; end
  def table_alias_length; end
  def update_table_definition(table_name, base); end
  def use_insert_returning?; end
  def valid_type?(type); end

  protected

  def postgresql_version; end
  def translate_exception(exception, message); end

  private

  def add_oid(row, records_by_oid, type_map); end
  def column_definitions(table_name); end
  def configure_connection; end
  def connect; end
  def create_table_definition(name, temporary, options, as = T.unsafe(nil)); end
  def exec_cache(sql, name, binds); end
  def exec_no_cache(sql, name, binds); end
  def extract_pg_identifier_from_name(name); end
  def extract_table_ref_from_insert_sql(sql); end
  def initialize_type_map(type_map); end
  def last_insert_id(sequence_name); end
  def last_insert_id_result(sequence_name); end
  def last_insert_id_value(sequence_name); end
  def prepare_statement(sql); end
  def reload_type_map; end
  def select(sql, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def sql_key(sql); end
  def type_map; end
end

ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ADAPTER_NAME = T.let(T.unsafe(nil), String)

ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::BYTEA_COLUMN_TYPE_OID = T.let(T.unsafe(nil), Fixnum)

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::BindSubstitution < ::Arel::Visitors::PostgreSQL
  include(::Arel::Visitors::BindVisitor)
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnDefinition < ::ActiveRecord::ConnectionAdapters::ColumnDefinition
  def array; end
  def array=(_); end
end

module ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods
  def cidr(name, options = T.unsafe(nil)); end
  def daterange(name, options = T.unsafe(nil)); end
  def hstore(name, options = T.unsafe(nil)); end
  def inet(name, options = T.unsafe(nil)); end
  def int4range(name, options = T.unsafe(nil)); end
  def int8range(name, options = T.unsafe(nil)); end
  def json(name, options = T.unsafe(nil)); end
  def ltree(name, options = T.unsafe(nil)); end
  def macaddr(name, options = T.unsafe(nil)); end
  def numrange(name, options = T.unsafe(nil)); end
  def tsrange(name, options = T.unsafe(nil)); end
  def tstzrange(name, options = T.unsafe(nil)); end
  def tsvector(*args); end
  def uuid(name, options = T.unsafe(nil)); end
  def xml(*args); end
end

module ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements
  def begin_db_transaction; end
  def begin_isolated_db_transaction(isolation); end
  def commit_db_transaction; end
  def create; end
  def exec_delete(sql, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def exec_insert(sql, name, binds, pk = T.unsafe(nil), sequence_name = T.unsafe(nil)); end
  def exec_query(sql, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def exec_update(sql, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def execute(sql, name = T.unsafe(nil)); end
  def explain(arel, binds = T.unsafe(nil)); end
  def insert_sql(sql, name = T.unsafe(nil), pk = T.unsafe(nil), id_value = T.unsafe(nil), sequence_name = T.unsafe(nil)); end
  def query(sql, name = T.unsafe(nil)); end
  def result_as_array(res); end
  def rollback_db_transaction; end
  def select_rows(sql, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def sql_for_insert(sql, pk, id_value, sequence_name, binds); end
  def substitute_at(column, index); end
  def update_sql(sql, name = T.unsafe(nil)); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements::ExplainPrettyPrinter
  def pp(result); end
end

ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::FEATURE_NOT_SUPPORTED = T.let(T.unsafe(nil), String)

ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::FOREIGN_KEY_VIOLATION = T.let(T.unsafe(nil), String)

ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::MONEY_COLUMN_TYPE_OID = T.let(T.unsafe(nil), Fixnum)

ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::NATIVE_DATABASE_TYPES = T.let(T.unsafe(nil), Hash)

module ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID
  class << self
    def alias_type(new, old); end
    def register_type(name, type); end
    def registered_type?(name); end
  end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Array < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def initialize(subtype); end

  def subtype; end
  def type_cast(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Bit < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def type_cast(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Boolean < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def type_cast(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Bytea < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def type_cast(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Cidr < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def type_cast(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Date < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def type; end
  def type_cast(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Decimal < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def type_cast(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Float < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def type_cast(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Hstore < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def accessor; end
  def type_cast(value); end
  def type_cast_for_write(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Identity < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def type_cast(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Integer < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def type_cast(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Json < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def accessor; end
  def type_cast(value); end
  def type_cast_for_write(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Money < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def type_cast(value); end
end

ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::NAMES = T.let(T.unsafe(nil), Hash)

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Point < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def type_cast(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def initialize(subtype); end

  def extract_bounds(value); end
  def infinity(options = T.unsafe(nil)); end
  def infinity?(value); end
  def subtype; end
  def to_integer(value); end
  def type_cast(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Time < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def type_cast(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Timestamp < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def type; end
  def type_cast(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def type; end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap
  def initialize; end

  def [](oid); end
  def []=(oid, type); end
  def clear; end
  def fetch(ftype, fmod); end
  def key?(oid); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Vector < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def initialize(delim, subtype); end

  def delim; end
  def subtype; end
  def type_cast(value); end
end

module ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting
  def escape_bytea(value); end
  def quote(value, column = T.unsafe(nil)); end
  def quote_column_name(name); end
  def quote_string(s); end
  def quote_table_name(name); end
  def quote_table_name_for_assignment(table, attr); end
  def quoted_date(value); end
  def type_cast(value, column, array_member = T.unsafe(nil)); end
  def unescape_bytea(value); end
end

module ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ReferentialIntegrity
  def disable_referential_integrity; end
  def supports_disable_referential_integrity?; end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaCreation < ::ActiveRecord::ConnectionAdapters::AbstractAdapter::SchemaCreation

  private

  def add_column_options!(sql, options); end
  def visit_AddColumn(o); end
  def visit_ColumnDefinition(o); end
end

module ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements
  def add_column(table_name, column_name, type, options = T.unsafe(nil)); end
  def add_index(table_name, column_name, options = T.unsafe(nil)); end
  def change_column(table_name, column_name, type, options = T.unsafe(nil)); end
  def change_column_default(table_name, column_name, default); end
  def change_column_null(table_name, column_name, null, default = T.unsafe(nil)); end
  def client_min_messages; end
  def client_min_messages=(level); end
  def collation; end
  def columns(table_name); end
  def columns_for_distinct(columns, orders); end
  def create_database(name, options = T.unsafe(nil)); end
  def create_schema(schema_name); end
  def ctype; end
  def current_database; end
  def current_schema; end
  def default_sequence_name(table_name, pk = T.unsafe(nil)); end
  def drop_database(name); end
  def drop_schema(schema_name); end
  def encoding; end
  def index_name_exists?(table_name, index_name, default); end
  def index_name_length; end
  def indexes(table_name, name = T.unsafe(nil)); end
  def pk_and_sequence_for(table); end
  def primary_key(table); end
  def recreate_database(name, options = T.unsafe(nil)); end
  def remove_index!(table_name, index_name); end
  def rename_column(table_name, column_name, new_column_name); end
  def rename_index(table_name, old_name, new_name); end
  def rename_table(table_name, new_name); end
  def reset_pk_sequence!(table, pk = T.unsafe(nil), sequence = T.unsafe(nil)); end
  def schema_exists?(name); end
  def schema_names; end
  def schema_search_path; end
  def schema_search_path=(schema_csv); end
  def serial_sequence(table, column); end
  def table_exists?(name); end
  def tables(name = T.unsafe(nil)); end
  def type_to_sql(type, limit = T.unsafe(nil), precision = T.unsafe(nil), scale = T.unsafe(nil)); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool < ::ActiveRecord::ConnectionAdapters::StatementPool
  def initialize(connection, max); end

  def [](key); end
  def []=(sql, key); end
  def clear; end
  def delete(sql_key); end
  def each(&block); end
  def key?(key); end
  def length; end
  def next_key; end

  private

  def cache; end
  def connection_active?; end
  def dealloc(key); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Table < ::ActiveRecord::ConnectionAdapters::Table
  include(::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods)
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition < ::ActiveRecord::ConnectionAdapters::TableDefinition
  include(::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods)

  def column(name, type = T.unsafe(nil), options = T.unsafe(nil)); end
  def primary_key(name, type = T.unsafe(nil), options = T.unsafe(nil)); end

  private

  def create_column_definition(name, type); end
end

ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::UNIQUE_VIOLATION = T.let(T.unsafe(nil), String)

module ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Utils
  extend(::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Utils)

  def extract_schema_and_table(name); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLColumn < ::ActiveRecord::ConnectionAdapters::Column
  extend(::ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast)
  extend(::ActiveRecord::ConnectionAdapters::PostgreSQLColumn::ArrayParser)

  def initialize(name, default, oid_type, sql_type = T.unsafe(nil), null = T.unsafe(nil)); end

  def accessor; end
  def array; end
  def array=(_); end
  def number?; end
  def text?; end
  def type_cast(value); end
  def type_cast_for_write(value); end

  private

  def extract_limit(sql_type); end
  def extract_precision(sql_type); end
  def extract_scale(sql_type); end
  def has_default_function?(default_value, default); end
  def simplified_type(field_type); end

  class << self
    def extract_value_from_default(default); end
    def money_precision; end
    def money_precision=(_); end
  end
end

module ActiveRecord::ConnectionAdapters::PostgreSQLColumn::ArrayParser

  private

  def add_item_to_array(array, current_item, quoted); end
  def parse_array_contents(array, string, index); end
  def parse_data(string); end
  def parse_pg_array(string); end
end

ActiveRecord::ConnectionAdapters::PostgreSQLColumn::ArrayParser::BACKSLASH = T.let(T.unsafe(nil), String)

ActiveRecord::ConnectionAdapters::PostgreSQLColumn::ArrayParser::BRACKET_CLOSE = T.let(T.unsafe(nil), String)

ActiveRecord::ConnectionAdapters::PostgreSQLColumn::ArrayParser::BRACKET_OPEN = T.let(T.unsafe(nil), String)

ActiveRecord::ConnectionAdapters::PostgreSQLColumn::ArrayParser::COMMA = T.let(T.unsafe(nil), String)

ActiveRecord::ConnectionAdapters::PostgreSQLColumn::ArrayParser::DOUBLE_QUOTE = T.let(T.unsafe(nil), String)

module ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast
  def array_to_string(value, column, adapter); end
  def cidr_to_string(object); end
  def hstore_to_string(object, array_member = T.unsafe(nil)); end
  def json_to_string(object); end
  def point_to_string(point); end
  def range_to_string(object); end
  def string_to_array(string, oid); end
  def string_to_bit(value); end
  def string_to_cidr(string); end
  def string_to_hstore(string); end
  def string_to_json(string); end
  def string_to_point(string); end
  def string_to_time(string); end

  private

  def escape_hstore(value); end
  def quote_and_escape(value); end
  def type_cast_array(oid, value); end
end

ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast::ARRAY_ESCAPE = T.let(T.unsafe(nil), String)

ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast::HstorePair = T.let(T.unsafe(nil), Regexp)

module ActiveRecord::ConnectionAdapters::QueryCache
  def initialize(*_); end

  def cache; end
  def clear_query_cache; end
  def disable_query_cache!; end
  def enable_query_cache!; end
  def query_cache; end
  def query_cache_enabled; end
  def select_all(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def uncached; end

  private

  def cache_sql(sql, binds); end
  def locked?(arel); end

  class << self
    def dirties_query_cache(base, *method_names); end
    def included(base); end
  end
end

module ActiveRecord::ConnectionAdapters::Quoting
  def quote(value, column = T.unsafe(nil)); end
  def quote_column_name(column_name); end
  def quote_string(s); end
  def quote_table_name(table_name); end
  def quote_table_name_for_assignment(table, attr); end
  def quoted_date(value); end
  def quoted_false; end
  def quoted_true; end
  def type_cast(value, column); end
end

class ActiveRecord::ConnectionAdapters::RealTransaction < ::ActiveRecord::ConnectionAdapters::OpenTransaction
  def initialize(connection, parent, options = T.unsafe(nil)); end

  def perform_commit; end
  def perform_rollback; end
end

class ActiveRecord::ConnectionAdapters::SavepointTransaction < ::ActiveRecord::ConnectionAdapters::OpenTransaction
  def initialize(connection, parent, options = T.unsafe(nil)); end

  def perform_commit; end
  def perform_rollback; end
end

module ActiveRecord::ConnectionAdapters::Savepoints
  def create_savepoint(name = T.unsafe(nil)); end
  def release_savepoint(name = T.unsafe(nil)); end
  def rollback_to_savepoint(name = T.unsafe(nil)); end
  def supports_savepoints?; end
end

class ActiveRecord::ConnectionAdapters::SchemaCache
  def initialize(conn); end

  def add(table_name); end
  def clear!; end
  def clear_table_cache!(table_name); end
  def columns(table); end
  def columns_hash(table); end
  def connection; end
  def connection=(_); end
  def marshal_dump; end
  def marshal_load(array); end
  def primary_keys(table_name); end
  def size; end
  def table_exists?(name); end
  def tables(name); end
  def version; end

  private

  def prepare_default_proc; end
end

module ActiveRecord::ConnectionAdapters::SchemaStatements
  include(::ActiveRecord::Migration::JoinTable)

  def add_belongs_to(table_name, ref_name, options = T.unsafe(nil)); end
  def add_column(table_name, column_name, type, options = T.unsafe(nil)); end
  def add_index(table_name, column_name, options = T.unsafe(nil)); end
  def add_reference(table_name, ref_name, options = T.unsafe(nil)); end
  def add_timestamps(table_name); end
  def assume_migrated_upto_version(version, migrations_paths = T.unsafe(nil)); end
  def change_column(table_name, column_name, type, options = T.unsafe(nil)); end
  def change_column_default(table_name, column_name, default); end
  def change_column_null(table_name, column_name, null, default = T.unsafe(nil)); end
  def change_table(table_name, options = T.unsafe(nil)); end
  def column_exists?(table_name, column_name, type = T.unsafe(nil), options = T.unsafe(nil)); end
  def columns(table_name); end
  def columns_for_distinct(columns, orders); end
  def create_join_table(table_1, table_2, options = T.unsafe(nil)); end
  def create_table(table_name, options = T.unsafe(nil)); end
  def drop_join_table(table_1, table_2, options = T.unsafe(nil)); end
  def drop_table(table_name, options = T.unsafe(nil)); end
  def dump_schema_information; end
  def index_exists?(table_name, column_name, options = T.unsafe(nil)); end
  def index_name(table_name, options); end
  def index_name_exists?(table_name, index_name, default); end
  def initialize_schema_migrations_table; end
  def native_database_types; end
  def remove_belongs_to(table_name, ref_name, options = T.unsafe(nil)); end
  def remove_column(table_name, column_name, type = T.unsafe(nil), options = T.unsafe(nil)); end
  def remove_columns(table_name, *column_names); end
  def remove_index(table_name, options = T.unsafe(nil)); end
  def remove_index!(table_name, index_name); end
  def remove_reference(table_name, ref_name, options = T.unsafe(nil)); end
  def remove_timestamps(table_name); end
  def rename_column(table_name, column_name, new_column_name); end
  def rename_index(table_name, old_name, new_name); end
  def rename_table(table_name, new_name); end
  def table_alias_for(table_name); end
  def table_exists?(table_name); end
  def type_to_sql(type, limit = T.unsafe(nil), precision = T.unsafe(nil), scale = T.unsafe(nil)); end
  def update_table_definition(table_name, base); end

  protected

  def add_index_options(table_name, column_name, options = T.unsafe(nil)); end
  def add_index_sort_order(option_strings, column_names, options = T.unsafe(nil)); end
  def index_name_for_remove(table_name, options = T.unsafe(nil)); end
  def options_include_default?(options); end
  def quoted_columns_for_index(column_names, options = T.unsafe(nil)); end
  def rename_column_indexes(table_name, column_name, new_column_name); end
  def rename_table_indexes(table_name, new_name); end

  private

  def create_alter_table(name); end
  def create_table_definition(name, temporary, options, as = T.unsafe(nil)); end
end

class ActiveRecord::ConnectionAdapters::StatementPool
  include(::Enumerable)

  def initialize(connection, max = T.unsafe(nil)); end

  def [](key); end
  def []=(sql, key); end
  def clear; end
  def delete(key); end
  def each; end
  def key?(key); end
  def length; end
end

class ActiveRecord::ConnectionAdapters::Table
  include(::RGeo::ActiveRecord::GeoConnectionAdapters)

  def initialize(table_name, base); end

  def belongs_to(*args); end
  def binary(*args); end
  def boolean(*args); end
  def change(column_name, type, options = T.unsafe(nil)); end
  def change_default(column_name, default); end
  def column(column_name, type, options = T.unsafe(nil)); end
  def column_exists?(column_name, type = T.unsafe(nil), options = T.unsafe(nil)); end
  def date(*args); end
  def datetime(*args); end
  def decimal(*args); end
  def float(*args); end
  def index(column_name, options = T.unsafe(nil)); end
  def index_exists?(column_name, options = T.unsafe(nil)); end
  def integer(*args); end
  def method_missing(method_name, *args, &block); end
  def references(*args); end
  def remove(*column_names); end
  def remove_belongs_to(*args); end
  def remove_index(options = T.unsafe(nil)); end
  def remove_references(*args); end
  def remove_timestamps; end
  def rename(column_name, new_column_name); end
  def rename_index(index_name, new_index_name); end
  def string(*args); end
  def text(*args); end
  def time(*args); end
  def timestamp(*args); end
  def timestamps; end

  private

  def method_missing_without_rgeo(*_); end
  def native; end
end

class ActiveRecord::ConnectionAdapters::TableDefinition
  include(::RGeo::ActiveRecord::GeoTableDefinitions)

  def initialize(types, name, temporary, options, as = T.unsafe(nil)); end

  def [](name); end
  def as; end
  def belongs_to(*args); end
  def binary(*args); end
  def boolean(*args); end
  def column(name, type, options = T.unsafe(nil)); end
  def columns; end
  def date(*args); end
  def datetime(*args); end
  def decimal(*args); end
  def float(*args); end
  def index(column_name, options = T.unsafe(nil)); end
  def indexes; end
  def indexes=(_); end
  def integer(*args); end
  def method_missing(method_name, *args, &block); end
  def name; end
  def new_column_definition(name, type, options); end
  def options; end
  def primary_key(name, type = T.unsafe(nil), options = T.unsafe(nil)); end
  def references(*args); end
  def remove_column(name); end
  def string(*args); end
  def temporary; end
  def text(*args); end
  def time(*args); end
  def timestamp(*args); end
  def timestamps(*args); end

  private

  def create_column_definition(name, type); end
  def method_missing_without_rgeo(*_); end
  def native; end
  def primary_key_column_name; end
end

class ActiveRecord::ConnectionAdapters::Transaction
  def initialize(connection); end

  def connection; end
  def state; end
end

class ActiveRecord::ConnectionAdapters::TransactionState
  def initialize(state = T.unsafe(nil)); end

  def committed?; end
  def finalized?; end
  def parent; end
  def parent=(_); end
  def rolledback?; end
  def set_state(state); end
end

ActiveRecord::ConnectionAdapters::TransactionState::VALID_STATES = T.let(T.unsafe(nil), Set)

module ActiveRecord::ConnectionHandling
  def clear_active_connections!(*args, &block); end
  def clear_all_connections!(*args, &block); end
  def clear_cache!; end
  def clear_reloadable_connections!(*args, &block); end
  def connected?; end
  def connection; end
  def connection_config; end
  def connection_id; end
  def connection_id=(connection_id); end
  def connection_pool; end
  def establish_connection(spec = T.unsafe(nil)); end
  def postgis_connection(config); end
  def postgresql_connection(config); end
  def remove_connection(klass = T.unsafe(nil)); end
  def retrieve_connection; end
end

ActiveRecord::ConnectionHandling::DEFAULT_ENV = T.let(T.unsafe(nil), Proc)

class ActiveRecord::ConnectionHandling::MergeAndResolveDefaultUrlConfig
  def initialize(raw_configurations); end

  def resolve; end

  private

  def config; end
end

ActiveRecord::ConnectionHandling::RAILS_ENV = T.let(T.unsafe(nil), Proc)

ActiveRecord::ConnectionHandling::VALID_CONN_PARAMS = T.let(T.unsafe(nil), Array)

class ActiveRecord::ConnectionNotEstablished < ::ActiveRecord::ActiveRecordError
end

class ActiveRecord::ConnectionTimeoutError < ::ActiveRecord::ConnectionNotEstablished
end

module ActiveRecord::Core
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::Core::ClassMethods)

  def initialize(attributes = T.unsafe(nil), options = T.unsafe(nil)); end

  def <=>(other_object); end
  def ==(comparison_object); end
  def connection_handler; end
  def encode_with(coder); end
  def eql?(comparison_object); end
  def freeze; end
  def frozen?; end
  def has_transactional_callbacks?; end
  def hash; end
  def init_with(coder); end
  def inspect; end
  def readonly!; end
  def readonly?; end
  def set_transaction_state(state); end
  def slice(*methods); end

  private

  def init_attributes(attributes, options); end
  def init_internals; end
  def initialize_dup(other); end
  def initialize_internals_callback; end
  def sync_with_transaction_state; end
  def to_ary; end
  def update_attributes_from_transaction_state(transaction_state, depth); end
end

module ActiveRecord::Core::ClassMethods
  def ===(object); end
  def arel_engine; end
  def arel_table; end
  def generated_association_methods; end
  def initialize_generated_modules; end
  def inspect; end

  private

  def relation; end
end

module ActiveRecord::CounterCache
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::CounterCache::ClassMethods)
end

module ActiveRecord::CounterCache::ClassMethods
  def decrement_counter(counter_name, id); end
  def increment_counter(counter_name, id); end
  def reset_counters(id, *counters); end
  def update_counters(id, counters); end
end

class ActiveRecord::DangerousAttributeError < ::ActiveRecord::ActiveRecordError
end

module ActiveRecord::Delegation
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::Delegation::ClassMethods)

  def all?(*args, &block); end
  def collect(*args, &block); end
  def columns_hash(*args, &block); end
  def connection(*args, &block); end
  def each(*args, &block); end
  def include?(*args, &block); end
  def length(*args, &block); end
  def map(*args, &block); end
  def primary_key(*args, &block); end
  def quoted_primary_key(*args, &block); end
  def quoted_table_name(*args, &block); end
  def respond_to?(method, include_private = T.unsafe(nil)); end
  def table_name(*args, &block); end
  def to_ary(*args, &block); end
  def to_xml(*args, &block); end
  def to_yaml(*args, &block); end

  protected

  def array_delegable?(method); end
  def method_missing(method, *args, &block); end
end

ActiveRecord::Delegation::BLACKLISTED_ARRAY_METHODS = T.let(T.unsafe(nil), Set)

module ActiveRecord::Delegation::ClassMethods
  def create(klass, *args); end

  private

  def relation_class_for(klass); end
end

module ActiveRecord::Delegation::ClassSpecificRelation
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods)


  protected

  def method_missing(method, *args, &block); end
end

module ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  def delegate(method, opts = T.unsafe(nil)); end
  def delegate_to_scoped_klass(method); end
  def name; end
end

module ActiveRecord::Delegation::DelegateCache
  def inherited(child_class); end
  def initialize_relation_delegate_cache; end
  def relation_delegate_class(klass); end
end

class ActiveRecord::DeleteRestrictionError < ::ActiveRecord::ActiveRecordError
  def initialize(name); end
end

class ActiveRecord::DuplicateMigrationNameError < ::ActiveRecord::MigrationError
  def initialize(name); end
end

class ActiveRecord::DuplicateMigrationVersionError < ::ActiveRecord::MigrationError
  def initialize(version); end
end

module ActiveRecord::DynamicMatchers
  def respond_to?(name, include_private = T.unsafe(nil)); end

  private

  def method_missing(name, *arguments, &block); end
end

class ActiveRecord::DynamicMatchers::FindBy < ::ActiveRecord::DynamicMatchers::Method
  include(::ActiveRecord::DynamicMatchers::Finder)

  def finder; end

  class << self
    def prefix; end
  end
end

class ActiveRecord::DynamicMatchers::FindByBang < ::ActiveRecord::DynamicMatchers::Method
  include(::ActiveRecord::DynamicMatchers::Finder)

  def finder; end

  class << self
    def prefix; end
    def suffix; end
  end
end

module ActiveRecord::DynamicMatchers::Finder
  def attributes_hash; end
  def body; end
  def finder; end
  def result; end
  def signature; end
end

class ActiveRecord::DynamicMatchers::Method
  def initialize(model, name); end

  def attribute_names; end
  def body; end
  def define; end
  def model; end
  def name; end
  def valid?; end

  class << self
    def match(model, name); end
    def matchers; end
    def pattern; end
    def prefix; end
    def suffix; end
  end
end

class ActiveRecord::EagerLoadPolymorphicError < ::ActiveRecord::ActiveRecordError
  def initialize(reflection); end
end

module ActiveRecord::Enum
  def enum(definitions); end
  def inherited(base); end

  private

  def _enum_methods_module; end
  def detect_enum_conflict!(enum_name, method_name, klass_method = T.unsafe(nil)); end

  class << self
    def extended(base); end
  end
end

ActiveRecord::Enum::ENUM_CONFLICT_MESSAGE = T.let(T.unsafe(nil), String)

module ActiveRecord::Explain
  def collecting_queries_for_explain; end
  def exec_explain(queries); end
end

class ActiveRecord::ExplainRegistry
  extend(::ActiveSupport::PerThreadRegistry)

  def initialize; end

  def collect; end
  def collect=(_); end
  def collect?; end
  def queries; end
  def queries=(_); end
  def reset; end
end

class ActiveRecord::ExplainSubscriber
  def finish(name, id, payload); end
  def ignore_payload?(payload); end
  def start(name, id, payload); end
end

ActiveRecord::ExplainSubscriber::EXPLAINED_SQLS = T.let(T.unsafe(nil), Regexp)

ActiveRecord::ExplainSubscriber::IGNORED_PAYLOADS = T.let(T.unsafe(nil), Array)

module ActiveRecord::FinderMethods
  def exists?(conditions = T.unsafe(nil)); end
  def fifth; end
  def fifth!; end
  def find(*args); end
  def find_by(*args); end
  def find_by!(*args); end
  def first(limit = T.unsafe(nil)); end
  def first!; end
  def forty_two; end
  def forty_two!; end
  def fourth; end
  def fourth!; end
  def last(limit = T.unsafe(nil)); end
  def last!; end
  def raise_record_not_found_exception!(ids, result_size, expected_size); end
  def second; end
  def second!; end
  def take(limit = T.unsafe(nil)); end
  def take!; end
  def third; end
  def third!; end

  protected

  def find_last; end
  def find_nth(ordinal, offset); end
  def find_nth_with_limit(offset, limit); end
  def find_one(id); end
  def find_some(ids); end
  def find_take; end
  def find_with_ids(*ids); end

  private

  def apply_join_dependency(relation, join_dependency); end
  def construct_join_dependency(joins = T.unsafe(nil)); end
  def construct_relation_for_association_calculations; end
  def find_with_associations; end
  def limited_ids_for(relation); end
  def using_limitable_reflections?(reflections); end
end

ActiveRecord::FinderMethods::ONE_AS_ONE = T.let(T.unsafe(nil), String)

class ActiveRecord::Fixture
  include(::Enumerable)

  def initialize(fixture, model_class); end

  def [](key); end
  def class_name; end
  def each; end
  def find; end
  def fixture; end
  def model_class; end
  def to_hash; end
end

class ActiveRecord::Fixture::FixtureError < ::StandardError
end

class ActiveRecord::Fixture::FormatError < ::ActiveRecord::Fixture::FixtureError
end

class ActiveRecord::FixtureClassNotFound < ::ActiveRecord::ActiveRecordError
end

class ActiveRecord::FixtureSet
  def initialize(connection, name, class_name, path, config = T.unsafe(nil)); end

  def [](x); end
  def []=(k, v); end
  def all_loaded_fixtures; end
  def all_loaded_fixtures=(obj); end
  def config; end
  def each(&block); end
  def fixtures; end
  def model_class; end
  def name; end
  def size; end
  def table_name; end
  def table_rows; end

  private

  def add_join_records(rows, row, association); end
  def column_names; end
  def has_primary_key_column?; end
  def inheritance_column_name; end
  def primary_key_name; end
  def read_fixture_files(path, model_class); end
  def timestamp_column_names; end
  def yaml_file_path(path); end

  class << self
    def all_loaded_fixtures; end
    def all_loaded_fixtures=(obj); end
    def cache_fixtures(connection, fixtures_map); end
    def cache_for_connection(connection); end
    def cached_fixtures(connection, keys_to_fetch = T.unsafe(nil)); end
    def context_class; end
    def create_fixtures(fixtures_directory, fixture_set_names, class_names = T.unsafe(nil), config = T.unsafe(nil)); end
    def default_fixture_model_name(fixture_set_name, config = T.unsafe(nil)); end
    def default_fixture_table_name(fixture_set_name, config = T.unsafe(nil)); end
    def fixture_is_cached?(connection, table_name); end
    def identify(label); end
    def instantiate_all_loaded_fixtures(object, load_instances = T.unsafe(nil)); end
    def instantiate_fixtures(object, fixture_set, load_instances = T.unsafe(nil)); end
    def reset_cache; end
  end
end

class ActiveRecord::FixtureSet::ClassCache
  def initialize(class_names, config); end

  def [](fs_name); end

  private

  def default_fixture_model(fs_name, config); end
  def insert_class(class_names, name, klass); end
end

class ActiveRecord::FixtureSet::File
  include(::Enumerable)

  def initialize(file); end

  def each(&block); end

  private

  def render(content); end
  def rows; end
  def validate(data); end

  class << self
    def open(file); end
  end
end

class ActiveRecord::FixtureSet::HasManyThroughProxy < ::ActiveRecord::FixtureSet::ReflectionProxy
  def lhs_key; end
  def rhs_key; end
end

ActiveRecord::FixtureSet::MAX_ID = T.let(T.unsafe(nil), Fixnum)

class ActiveRecord::FixtureSet::ReflectionProxy
  def initialize(association); end

  def join_table; end
  def name; end
end

class ActiveRecord::FixtureSet::RenderContext
  class << self
    def create_subclass; end
  end
end

ActiveRecord::Fixtures = T.let(T.unsafe(nil), ActiveSupport::Deprecation::DeprecatedConstantProxy)

class ActiveRecord::HasManyThroughAssociationNotFoundError < ::ActiveRecord::ActiveRecordError
  def initialize(owner_class_name, reflection); end
end

class ActiveRecord::HasManyThroughAssociationPointlessSourceTypeError < ::ActiveRecord::ActiveRecordError
  def initialize(owner_class_name, reflection, source_reflection); end
end

class ActiveRecord::HasManyThroughAssociationPolymorphicSourceError < ::ActiveRecord::ActiveRecordError
  def initialize(owner_class_name, reflection, source_reflection); end
end

class ActiveRecord::HasManyThroughAssociationPolymorphicThroughError < ::ActiveRecord::ActiveRecordError
  def initialize(owner_class_name, reflection); end
end

class ActiveRecord::HasManyThroughCantAssociateNewRecords < ::ActiveRecord::ActiveRecordError
  def initialize(owner, reflection); end
end

class ActiveRecord::HasManyThroughCantAssociateThroughHasOneOrManyReflection < ::ActiveRecord::ActiveRecordError
  def initialize(owner, reflection); end
end

class ActiveRecord::HasManyThroughCantDissociateNewRecords < ::ActiveRecord::ActiveRecordError
  def initialize(owner, reflection); end
end

class ActiveRecord::HasManyThroughNestedAssociationsAreReadonly < ::ActiveRecord::ActiveRecordError
  def initialize(owner, reflection); end
end

class ActiveRecord::HasManyThroughSourceAssociationNotFoundError < ::ActiveRecord::ActiveRecordError
  def initialize(reflection); end
end

class ActiveRecord::HasOneThroughCantAssociateThroughCollection < ::ActiveRecord::ActiveRecordError
  def initialize(owner_class_name, reflection, through_reflection); end
end

class ActiveRecord::IllegalMigrationNameError < ::ActiveRecord::MigrationError
  def initialize(name); end
end

class ActiveRecord::ImmutableRelation < ::ActiveRecord::ActiveRecordError
end

module ActiveRecord::Inheritance
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::Inheritance::ClassMethods)


  private

  def ensure_proper_type; end
  def initialize_dup(other); end
  def initialize_internals_callback; end
end

module ActiveRecord::Inheritance::ClassMethods
  def abstract_class; end
  def abstract_class=(_); end
  def abstract_class?; end
  def base_class; end
  def descends_from_active_record?; end
  def finder_needs_type_condition?; end
  def new(*args, &block); end
  def sti_name; end
  def symbolized_base_class; end
  def symbolized_sti_name; end

  protected

  def compute_type(type_name); end

  private

  def discriminate_class_for_record(record); end
  def find_sti_class(type_name); end
  def subclass_from_attributes(attrs); end
  def subclass_from_attributes?(attrs); end
  def type_condition(table = T.unsafe(nil)); end
  def using_single_table_inheritance?(record); end
end

module ActiveRecord::Integration
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::Integration::ClassMethods)

  def cache_key(*timestamp_names); end
  def to_param; end
end

module ActiveRecord::Integration::ClassMethods
  def to_param(method_name = T.unsafe(nil)); end
end

class ActiveRecord::InvalidForeignKey < ::ActiveRecord::WrappedDatabaseException
end

class ActiveRecord::InverseOfAssociationNotFoundError < ::ActiveRecord::ActiveRecordError
  def initialize(reflection, associated_class = T.unsafe(nil)); end
end

class ActiveRecord::IrreversibleMigration < ::ActiveRecord::MigrationError
end

module ActiveRecord::Locking
  extend(::ActiveSupport::Autoload)
end

module ActiveRecord::Locking::Optimistic
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::Locking::Optimistic::ClassMethods)

  def locking_enabled?; end

  private

  def destroy_row; end
  def increment_lock; end
  def relation_for_destroy; end
  def update_record(attribute_names = T.unsafe(nil)); end
end

module ActiveRecord::Locking::Optimistic::ClassMethods
  def column_defaults; end
  def locking_column; end
  def locking_column=(value); end
  def locking_enabled?; end
  def quoted_locking_column; end
  def reset_locking_column; end
  def update_counters(id, counters); end
end

ActiveRecord::Locking::Optimistic::ClassMethods::DEFAULT_LOCKING_COLUMN = T.let(T.unsafe(nil), String)

module ActiveRecord::Locking::Pessimistic
  def lock!(lock = T.unsafe(nil)); end
  def with_lock(lock = T.unsafe(nil)); end
end

class ActiveRecord::LogSubscriber < ::ActiveSupport::LogSubscriber
  def initialize; end

  def logger; end
  def odd?; end
  def render_bind(column, value); end
  def sql(event); end

  class << self
    def reset_runtime; end
    def runtime; end
    def runtime=(value); end
  end
end

ActiveRecord::LogSubscriber::IGNORE_PAYLOAD_NAMES = T.let(T.unsafe(nil), Array)

class ActiveRecord::Migration
  def initialize(name = T.unsafe(nil), version = T.unsafe(nil)); end

  def announce(message); end
  def connection; end
  def copy(destination, sources, options = T.unsafe(nil)); end
  def disable_ddl_transaction; end
  def down; end
  def exec_migration(conn, direction); end
  def method_missing(method, *arguments, &block); end
  def migrate(direction); end
  def name; end
  def name=(_); end
  def next_migration_number(number); end
  def proper_table_name(name, options = T.unsafe(nil)); end
  def reversible; end
  def revert(*migration_classes); end
  def reverting?; end
  def run(*migration_classes); end
  def say(message, subitem = T.unsafe(nil)); end
  def say_with_time(message); end
  def suppress_messages; end
  def table_name_options(config = T.unsafe(nil)); end
  def up; end
  def verbose; end
  def verbose=(obj); end
  def version; end
  def version=(_); end
  def write(text = T.unsafe(nil)); end

  private

  def execute_block; end

  class << self
    def check_pending!(connection = T.unsafe(nil)); end
    def delegate; end
    def delegate=(_); end
    def disable_ddl_transaction; end
    def disable_ddl_transaction!; end
    def disable_ddl_transaction=(_); end
    def load_schema_if_pending!; end
    def maintain_test_schema!; end
    def method_missing(name, *args, &block); end
    def migrate(direction); end
    def verbose; end
    def verbose=(obj); end
  end
end

class ActiveRecord::Migration::CheckPending
  def initialize(app); end

  def call(env); end
end

class ActiveRecord::Migration::CommandRecorder
  include(::ActiveRecord::Migration::JoinTable)
  include(::ActiveRecord::Migration::CommandRecorder::StraightReversions)

  def initialize(delegate = T.unsafe(nil)); end

  def add_belongs_to(*args, &block); end
  def add_column(*args, &block); end
  def add_index(*args, &block); end
  def add_reference(*args, &block); end
  def add_timestamps(*args, &block); end
  def change_column(*args, &block); end
  def change_column_default(*args, &block); end
  def change_column_null(*args, &block); end
  def change_table(table_name, options = T.unsafe(nil)); end
  def commands; end
  def commands=(_); end
  def create_join_table(*args, &block); end
  def create_table(*args, &block); end
  def delegate; end
  def delegate=(_); end
  def drop_join_table(*args, &block); end
  def drop_table(*args, &block); end
  def enable_extension(*args, &block); end
  def execute(*args, &block); end
  def execute_block(*args, &block); end
  def inverse_of(command, args, &block); end
  def invert_add_belongs_to(args, &block); end
  def invert_remove_belongs_to(args, &block); end
  def record(*command, &block); end
  def remove_belongs_to(*args, &block); end
  def remove_column(*args, &block); end
  def remove_columns(*args, &block); end
  def remove_index(*args, &block); end
  def remove_reference(*args, &block); end
  def remove_timestamps(*args, &block); end
  def rename_column(*args, &block); end
  def rename_index(*args, &block); end
  def rename_table(*args, &block); end
  def respond_to?(*args); end
  def revert; end
  def reverting; end
  def reverting=(_); end
  def transaction(*args, &block); end

  private

  def invert_add_index(args); end
  def invert_change_column_null(args); end
  def invert_drop_table(args, &block); end
  def invert_remove_column(args); end
  def invert_remove_index(args); end
  def invert_rename_column(args); end
  def invert_rename_index(args); end
  def invert_rename_table(args); end
  def method_missing(method, *args, &block); end
end

module ActiveRecord::Migration::CommandRecorder::StraightReversions
  def invert_add_column(args, &block); end
  def invert_add_reference(args, &block); end
  def invert_add_timestamps(args, &block); end
  def invert_create_join_table(args, &block); end
  def invert_create_table(args, &block); end
  def invert_disable_extension(args, &block); end
  def invert_drop_join_table(args, &block); end
  def invert_drop_table(args, &block); end
  def invert_enable_extension(args, &block); end
  def invert_execute_block(args, &block); end
  def invert_remove_column(args, &block); end
  def invert_remove_reference(args, &block); end
  def invert_remove_timestamps(args, &block); end
  def invert_transaction(args, &block); end
end

module ActiveRecord::Migration::JoinTable

  private

  def find_join_table_name(table_1, table_2, options = T.unsafe(nil)); end
  def join_table_name(table_1, table_2); end
end

class ActiveRecord::Migration::ReversibleBlockHelper < ::Struct
  def down; end
  def up; end
end

class ActiveRecord::MigrationError < ::ActiveRecord::ActiveRecordError
  def initialize(message = T.unsafe(nil)); end
end

class ActiveRecord::MigrationProxy < ::Struct
  def initialize(name, version, filename, scope); end

  def announce(*args, &block); end
  def basename; end
  def disable_ddl_transaction(*args, &block); end
  def migrate(*args, &block); end
  def mtime; end
  def write(*args, &block); end

  private

  def load_migration; end
  def migration; end
end

class ActiveRecord::Migrator
  def initialize(direction, migrations, target_version = T.unsafe(nil)); end

  def current; end
  def current_migration; end
  def current_version; end
  def migrate; end
  def migrated; end
  def migrations; end
  def pending_migrations; end
  def run; end
  def runnable; end

  private

  def ddl_transaction(migration); end
  def down?; end
  def execute_migration_in_transaction(migration, direction); end
  def finish; end
  def ran?(migration); end
  def record_version_state_after_migrating(version); end
  def start; end
  def target; end
  def up?; end
  def use_transaction?(migration); end
  def validate(migrations); end

  class << self
    def current_version(connection = T.unsafe(nil)); end
    def down(migrations_paths, target_version = T.unsafe(nil), &block); end
    def forward(migrations_paths, steps = T.unsafe(nil)); end
    def get_all_versions; end
    def last_migration; end
    def last_version; end
    def migrate(migrations_paths, target_version = T.unsafe(nil), &block); end
    def migrations(paths); end
    def migrations_path; end
    def migrations_path=(_); end
    def migrations_paths; end
    def migrations_paths=(_); end
    def needs_migration?(connection = T.unsafe(nil)); end
    def open(migrations_paths); end
    def proper_table_name(name, options = T.unsafe(nil)); end
    def rollback(migrations_paths, steps = T.unsafe(nil)); end
    def run(direction, migrations_paths, target_version); end
    def schema_migrations_table_name; end
    def up(migrations_paths, target_version = T.unsafe(nil)); end

    private

    def move(direction, migrations_paths, steps); end
  end
end

module ActiveRecord::ModelSchema
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::ModelSchema::ClassMethods)
end

module ActiveRecord::ModelSchema::ClassMethods
  def column_defaults; end
  def column_names; end
  def column_types; end
  def columns; end
  def columns_hash; end
  def content_columns; end
  def decorate_columns(columns_hash); end
  def full_table_name_prefix; end
  def inheritance_column; end
  def inheritance_column=(value); end
  def initialize_attributes(attributes, options = T.unsafe(nil)); end
  def quoted_table_name; end
  def reset_column_information; end
  def reset_sequence_name; end
  def reset_table_name; end
  def sequence_name; end
  def sequence_name=(value); end
  def table_exists?; end
  def table_name; end
  def table_name=(value); end

  private

  def compute_table_name; end
  def undecorated_table_name(class_name = T.unsafe(nil)); end
end

class ActiveRecord::MultiparameterAssignmentErrors < ::ActiveRecord::ActiveRecordError
  def initialize(errors); end

  def errors; end
end

module ActiveRecord::NestedAttributes
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::NestedAttributes::ClassMethods)

  def _destroy; end

  private

  def assign_nested_attributes_for_collection_association(association_name, attributes_collection); end
  def assign_nested_attributes_for_one_to_one_association(association_name, attributes); end
  def assign_to_or_mark_for_destruction(record, attributes, allow_destroy); end
  def call_reject_if(association_name, attributes); end
  def check_record_limit!(limit, attributes_collection); end
  def has_destroy_flag?(hash); end
  def raise_nested_attributes_record_not_found!(association_name, record_id); end
  def reject_new_record?(association_name, attributes); end
end

module ActiveRecord::NestedAttributes::ClassMethods
  def accepts_nested_attributes_for(*attr_names); end

  private

  def generate_association_writer(association_name, type); end
end

ActiveRecord::NestedAttributes::ClassMethods::REJECT_ALL_BLANK_PROC = T.let(T.unsafe(nil), Proc)

class ActiveRecord::NestedAttributes::TooManyRecords < ::ActiveRecord::ActiveRecordError
end

ActiveRecord::NestedAttributes::UNASSIGNABLE_KEYS = T.let(T.unsafe(nil), Array)

class ActiveRecord::NoDatabaseError < ::ActiveRecord::ActiveRecordError
  def initialize(message); end

  def extend_message(message); end
end

module ActiveRecord::NoTouching
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::NoTouching::ClassMethods)

  def no_touching?; end
  def touch(*_); end

  class << self
    def applied_to?(klass); end
    def apply_to(klass); end

    private

    def klasses; end
  end
end

module ActiveRecord::NoTouching::ClassMethods
  def no_touching(&block); end
end

class ActiveRecord::NullMigration < ::ActiveRecord::MigrationProxy
  def initialize; end

  def mtime; end
end

module ActiveRecord::NullRelation
  def any?; end
  def calculate(operation, _column_name, _options = T.unsafe(nil)); end
  def count(*_); end
  def delete(_id_or_array); end
  def delete_all(_conditions = T.unsafe(nil)); end
  def empty?; end
  def exec_queries; end
  def exists?(_id = T.unsafe(nil)); end
  def many?; end
  def pluck(*column_names); end
  def size; end
  def sum(*_); end
  def to_sql; end
  def update_all(_updates, _conditions = T.unsafe(nil), _options = T.unsafe(nil)); end
end

class ActiveRecord::PendingMigrationError < ::ActiveRecord::MigrationError
  def initialize; end
end

module ActiveRecord::Persistence
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::Persistence::ClassMethods)

  def becomes(klass); end
  def becomes!(klass); end
  def decrement(attribute, by = T.unsafe(nil)); end
  def decrement!(attribute, by = T.unsafe(nil)); end
  def delete; end
  def destroy; end
  def destroy!; end
  def destroyed?; end
  def increment(attribute, by = T.unsafe(nil)); end
  def increment!(attribute, by = T.unsafe(nil)); end
  def new_record?; end
  def persisted?; end
  def reload(options = T.unsafe(nil)); end
  def save(*_); end
  def save!(*_); end
  def toggle(attribute); end
  def toggle!(attribute); end
  def touch(name = T.unsafe(nil)); end
  def update(attributes); end
  def update!(attributes); end
  def update_attribute(name, value); end
  def update_attributes(attributes); end
  def update_attributes!(attributes); end
  def update_column(name, value); end
  def update_columns(attributes); end

  private

  def create_or_update; end
  def create_record(attribute_names = T.unsafe(nil)); end
  def destroy_associations; end
  def destroy_row; end
  def relation_for_destroy; end
  def update_record(attribute_names = T.unsafe(nil)); end
  def verify_readonly_attribute(name); end
end

module ActiveRecord::Persistence::ClassMethods
  def create(attributes = T.unsafe(nil), &block); end
  def instantiate(record, column_types = T.unsafe(nil)); end

  private

  def discriminate_class_for_record(record); end
end

class ActiveRecord::PredicateBuilder
  class << self
    def build(attribute, value); end
    def build_from_hash(klass, attributes, default_table); end
    def expand(klass, table, column, value); end
    def handler_for(object); end
    def polymorphic_base_class_from_value(value); end
    def references(attributes); end
    def register_handler(klass, handler); end
    def resolve_column_aliases(klass, hash); end
  end
end

class ActiveRecord::PredicateBuilder::ArrayHandler
  def call(attribute, value); end
end

class ActiveRecord::PredicateBuilder::RelationHandler
  def call(attribute, value); end
end

class ActiveRecord::PreparedStatementInvalid < ::ActiveRecord::ActiveRecordError
end

class ActiveRecord::QueryCache
  def initialize(app); end

  def call(env); end

  private

  def restore_query_cache_settings(connection_id, enabled); end
end

module ActiveRecord::QueryCache::ClassMethods
  def cache(&block); end
  def uncached(&block); end
end

module ActiveRecord::QueryMethods
  extend(::ActiveSupport::Concern)

  def arel; end
  def bind(value); end
  def bind!(value); end
  def bind_values; end
  def bind_values=(values); end
  def create_with(value); end
  def create_with!(value); end
  def create_with_value; end
  def create_with_value=(value); end
  def distinct(value = T.unsafe(nil)); end
  def distinct!(value = T.unsafe(nil)); end
  def distinct_value; end
  def distinct_value=(value); end
  def eager_load(*args); end
  def eager_load!(*args); end
  def eager_load_values; end
  def eager_load_values=(values); end
  def extending(*modules, &block); end
  def extending!(*modules, &block); end
  def extending_values; end
  def extending_values=(values); end
  def extensions; end
  def from(value, subquery_name = T.unsafe(nil)); end
  def from!(value, subquery_name = T.unsafe(nil)); end
  def from_value; end
  def from_value=(value); end
  def group(*args); end
  def group!(*args); end
  def group_values; end
  def group_values=(values); end
  def having(opts, *rest); end
  def having!(opts, *rest); end
  def having_values; end
  def having_values=(values); end
  def includes(*args); end
  def includes!(*args); end
  def includes_values; end
  def includes_values=(values); end
  def joins(*args); end
  def joins!(*args); end
  def joins_values; end
  def joins_values=(values); end
  def limit(value); end
  def limit!(value); end
  def limit_value; end
  def limit_value=(value); end
  def lock(locks = T.unsafe(nil)); end
  def lock!(locks = T.unsafe(nil)); end
  def lock_value; end
  def lock_value=(value); end
  def none; end
  def none!; end
  def offset(value); end
  def offset!(value); end
  def offset_value; end
  def offset_value=(value); end
  def order(*args); end
  def order!(*args); end
  def order_values; end
  def order_values=(values); end
  def preload(*args); end
  def preload!(*args); end
  def preload_values; end
  def preload_values=(values); end
  def readonly(value = T.unsafe(nil)); end
  def readonly!(value = T.unsafe(nil)); end
  def readonly_value; end
  def readonly_value=(value); end
  def references(*table_names); end
  def references!(*table_names); end
  def references_values; end
  def references_values=(values); end
  def reorder(*args); end
  def reorder!(*args); end
  def reordering_value; end
  def reordering_value=(value); end
  def reverse_order; end
  def reverse_order!; end
  def reverse_order_value; end
  def reverse_order_value=(value); end
  def rewhere(conditions); end
  def select(*fields); end
  def select!(*fields); end
  def select_values; end
  def select_values=(values); end
  def uniq(value = T.unsafe(nil)); end
  def uniq!(value = T.unsafe(nil)); end
  def uniq_value; end
  def uniq_value=(value); end
  def unscope(*args); end
  def unscope!(*args); end
  def unscope_values; end
  def unscope_values=(values); end
  def where(opts = T.unsafe(nil), *rest); end
  def where!(opts = T.unsafe(nil), *rest); end
  def where_values; end
  def where_values=(values); end

  private

  def array_of_strings?(o); end
  def build_arel; end
  def build_from; end
  def build_joins(manager, joins); end
  def build_order(arel); end
  def build_select(arel, selects); end
  def build_where(opts, other = T.unsafe(nil)); end
  def check_if_method_has_arguments!(method_name, args); end
  def collapse_wheres(arel, wheres); end
  def custom_join_ast(table, joins); end
  def preprocess_order_args(order_args); end
  def reverse_sql_order(order_query); end
  def symbol_unscoping(scope); end
  def validate_order_args(args); end
  def where_unscoping(target_value); end
end

ActiveRecord::QueryMethods::VALID_UNSCOPING_VALUES = T.let(T.unsafe(nil), Set)

class ActiveRecord::QueryMethods::WhereChain
  def initialize(scope); end

  def not(opts, *rest); end
end

module ActiveRecord::Querying
  def any?(*args, &block); end
  def average(*args, &block); end
  def calculate(*args, &block); end
  def count(*args, &block); end
  def count_by_sql(sql); end
  def create_with(*args, &block); end
  def delete(*args, &block); end
  def delete_all(*args, &block); end
  def destroy(*args, &block); end
  def destroy_all(*args, &block); end
  def distinct(*args, &block); end
  def eager_load(*args, &block); end
  def except(*args, &block); end
  def exists?(*args, &block); end
  def fifth(*args, &block); end
  def fifth!(*args, &block); end
  def find(*args, &block); end
  def find_by(*args, &block); end
  def find_by!(*args, &block); end
  def find_by_sql(sql, binds = T.unsafe(nil)); end
  def find_each(*args, &block); end
  def find_in_batches(*args, &block); end
  def find_or_create_by(*args, &block); end
  def find_or_create_by!(*args, &block); end
  def find_or_initialize_by(*args, &block); end
  def first(*args, &block); end
  def first!(*args, &block); end
  def first_or_create(*args, &block); end
  def first_or_create!(*args, &block); end
  def first_or_initialize(*args, &block); end
  def forty_two(*args, &block); end
  def forty_two!(*args, &block); end
  def fourth(*args, &block); end
  def fourth!(*args, &block); end
  def from(*args, &block); end
  def group(*args, &block); end
  def having(*args, &block); end
  def ids(*args, &block); end
  def includes(*args, &block); end
  def joins(*args, &block); end
  def last(*args, &block); end
  def last!(*args, &block); end
  def limit(*args, &block); end
  def lock(*args, &block); end
  def many?(*args, &block); end
  def maximum(*args, &block); end
  def minimum(*args, &block); end
  def none(*args, &block); end
  def offset(*args, &block); end
  def order(*args, &block); end
  def pluck(*args, &block); end
  def preload(*args, &block); end
  def readonly(*args, &block); end
  def references(*args, &block); end
  def reorder(*args, &block); end
  def rewhere(*args, &block); end
  def second(*args, &block); end
  def second!(*args, &block); end
  def select(*args, &block); end
  def sum(*args, &block); end
  def take(*args, &block); end
  def take!(*args, &block); end
  def third(*args, &block); end
  def third!(*args, &block); end
  def uniq(*args, &block); end
  def unscope(*args, &block); end
  def update(*args, &block); end
  def update_all(*args, &block); end
  def where(*args, &block); end
end

class ActiveRecord::Railtie < ::Rails::Railtie
end

class ActiveRecord::ReadOnlyAssociation < ::ActiveRecord::ActiveRecordError
  def initialize(reflection); end
end

class ActiveRecord::ReadOnlyRecord < ::ActiveRecord::ActiveRecordError
end

module ActiveRecord::ReadonlyAttributes
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::ReadonlyAttributes::ClassMethods)
end

module ActiveRecord::ReadonlyAttributes::ClassMethods
  def attr_readonly(*attributes); end
  def readonly_attributes; end
end

class ActiveRecord::RecordInvalid < ::ActiveRecord::ActiveRecordError
  def initialize(record); end

  def record; end
end

class ActiveRecord::RecordNotDestroyed < ::ActiveRecord::ActiveRecordError
end

class ActiveRecord::RecordNotFound < ::ActiveRecord::ActiveRecordError
end

class ActiveRecord::RecordNotSaved < ::ActiveRecord::ActiveRecordError
end

class ActiveRecord::RecordNotUnique < ::ActiveRecord::WrappedDatabaseException
end

module ActiveRecord::Reflection
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::Reflection::ClassMethods)

  class << self
    def add_aggregate_reflection(ar, name, reflection); end
    def add_reflection(ar, name, reflection); end
    def create(macro, name, scope, options, ar); end
  end
end

class ActiveRecord::Reflection::AggregateReflection < ::ActiveRecord::Reflection::MacroReflection
  def mapping; end
end

class ActiveRecord::Reflection::AssociationReflection < ::ActiveRecord::Reflection::MacroReflection
  def initialize(macro, name, scope, options, active_record); end

  def active_record_primary_key; end
  def association_class; end
  def association_foreign_key; end
  def association_primary_key(klass = T.unsafe(nil)); end
  def belongs_to?; end
  def build_association(attributes, &block); end
  def chain; end
  def check_validity!; end
  def check_validity_of_inverse!; end
  def collection?; end
  def constructable?; end
  def counter_cache_column; end
  def foreign_key; end
  def foreign_type; end
  def has_inverse?; end
  def inverse_of; end
  def join_table; end
  def klass; end
  def nested?; end
  def polymorphic?; end
  def polymorphic_inverse_of(associated_class); end
  def primary_key_column; end
  def quoted_table_name; end
  def scope_chain; end
  def source_macro; end
  def source_reflection; end
  def table_name; end
  def through_reflection; end
  def type; end
  def validate?; end

  protected

  def actual_source_reflection; end

  private

  def automatic_inverse_of; end
  def calculate_constructable(macro, options); end
  def can_find_inverse_of_automatically?(reflection); end
  def derive_class_name; end
  def derive_foreign_key; end
  def derive_join_table; end
  def inverse_name; end
  def primary_key(klass); end
  def valid_inverse_reflection?(reflection); end
end

ActiveRecord::Reflection::AssociationReflection::INVALID_AUTOMATIC_INVERSE_OPTIONS = T.let(T.unsafe(nil), Array)

ActiveRecord::Reflection::AssociationReflection::VALID_AUTOMATIC_INVERSE_MACROS = T.let(T.unsafe(nil), Array)

module ActiveRecord::Reflection::ClassMethods
  def reflect_on_aggregation(aggregation); end
  def reflect_on_all_aggregations; end
  def reflect_on_all_associations(macro = T.unsafe(nil)); end
  def reflect_on_all_autosave_associations; end
  def reflect_on_association(association); end
end

class ActiveRecord::Reflection::MacroReflection
  def initialize(macro, name, scope, options, active_record); end

  def ==(other_aggregation); end
  def active_record; end
  def autosave=(autosave); end
  def class_name; end
  def klass; end
  def macro; end
  def name; end
  def options; end
  def plural_name; end
  def scope; end

  private

  def derive_class_name; end
end

class ActiveRecord::Reflection::ThroughReflection < ::ActiveRecord::Reflection::AssociationReflection
  def initialize(macro, name, scope, options, active_record); end

  def active_record_primary_key(*args, &block); end
  def association_foreign_key(*args, &block); end
  def association_primary_key(klass = T.unsafe(nil)); end
  def chain; end
  def check_validity!; end
  def foreign_key(*args, &block); end
  def foreign_type(*args, &block); end
  def nested?; end
  def scope_chain; end
  def source_macro; end
  def source_options; end
  def source_reflection; end
  def source_reflection_name; end
  def source_reflection_names; end
  def through_options; end
  def through_reflection; end
  def type(*args, &block); end

  protected

  def actual_source_reflection; end

  private

  def derive_class_name; end
end

class ActiveRecord::Relation
  include(::ActiveRecord::Delegation)
  include(::ActiveRecord::Explain)
  include(::ActiveRecord::Batches)
  include(::ActiveRecord::QueryMethods)
  include(::ActiveRecord::SpawnMethods)
  include(::ActiveRecord::Calculations)
  include(::ActiveRecord::FinderMethods)
  extend(::ActiveRecord::Delegation::ClassMethods)

  def initialize(klass, table, values = T.unsafe(nil)); end

  def ==(other); end
  def any?; end
  def as_json(options = T.unsafe(nil)); end
  def blank?; end
  def build(*args, &block); end
  def create(*args, &block); end
  def create!(*args, &block); end
  def delete(id_or_array); end
  def delete_all(conditions = T.unsafe(nil)); end
  def destroy(id); end
  def destroy_all(conditions = T.unsafe(nil)); end
  def eager_loading?; end
  def empty?; end
  def explain; end
  def find_or_create_by(attributes, &block); end
  def find_or_create_by!(attributes, &block); end
  def find_or_initialize_by(attributes, &block); end
  def first_or_create(attributes = T.unsafe(nil), &block); end
  def first_or_create!(attributes = T.unsafe(nil), &block); end
  def first_or_initialize(attributes = T.unsafe(nil), &block); end
  def insert(values); end
  def inspect; end
  def joined_includes_values; end
  def klass; end
  def load; end
  def loaded; end
  def loaded?; end
  def many?; end
  def model; end
  def new(*args, &block); end
  def pretty_print(q); end
  def reload; end
  def reset; end
  def scope_for_create; end
  def scoping; end
  def size; end
  def substitute_values(values); end
  def table; end
  def to_a; end
  def to_sql; end
  def uniq_value; end
  def update(id, attributes); end
  def update_all(updates); end
  def update_record(values, id, id_was); end
  def values; end
  def where_values_hash; end

  private

  def exec_queries; end
  def initialize_copy(other); end
  def references_eager_loaded_tables?; end
  def tables_in_string(string); end
end

class ActiveRecord::Relation::HashMerger
  def initialize(relation, hash); end

  def hash; end
  def merge; end
  def other; end
  def relation; end
end

class ActiveRecord::Relation::JoinOperation < ::Struct
  def join_class; end
  def join_class=(_); end
  def on; end
  def on=(_); end
  def relation; end
  def relation=(_); end

  class << self
    def [](*_); end
    def members; end
    def new(*_); end
  end
end

ActiveRecord::Relation::MULTI_VALUE_METHODS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Relation::Merger
  def initialize(relation, other); end

  def merge; end
  def normal_values; end
  def other; end
  def relation; end
  def values; end

  private

  def filter_binds(lhs_binds, removed_wheres); end
  def merge_joins; end
  def merge_multi_values; end
  def merge_single_values; end
  def partition_overwrites(lhs_wheres, rhs_wheres); end
end

ActiveRecord::Relation::Merger::NORMAL_VALUES = T.let(T.unsafe(nil), Array)

ActiveRecord::Relation::SINGLE_VALUE_METHODS = T.let(T.unsafe(nil), Array)

ActiveRecord::Relation::VALUE_METHODS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Result
  include(::Enumerable)

  def initialize(columns, rows, column_types = T.unsafe(nil)); end

  def [](idx); end
  def collect!; end
  def column_type(name); end
  def column_types; end
  def columns; end
  def each; end
  def empty?; end
  def identity_type; end
  def last; end
  def map!; end
  def rows; end
  def to_ary; end
  def to_hash; end

  private

  def hash_rows; end
  def initialize_copy(other); end
end

ActiveRecord::Result::IDENTITY_TYPE = T.let(T.unsafe(nil), T.untyped)

class ActiveRecord::Rollback < ::ActiveRecord::ActiveRecordError
end

class ActiveRecord::RuntimeRegistry
  extend(::ActiveSupport::PerThreadRegistry)

  def connection_handler; end
  def connection_handler=(_); end
  def connection_id; end
  def connection_id=(_); end
  def sql_runtime; end
  def sql_runtime=(_); end

  class << self
    def connection_handler; end
    def connection_handler=(x); end
    def connection_id; end
    def connection_id=(x); end
    def sql_runtime; end
    def sql_runtime=(x); end
  end
end

module ActiveRecord::Sanitization
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::Sanitization::ClassMethods)

  def quoted_id; end
end

module ActiveRecord::Sanitization::ClassMethods
  def quote_value(value, column); end
  def sanitize(object); end

  protected

  def expand_hash_conditions_for_aggregates(attrs); end
  def quote_bound_value(value, c = T.unsafe(nil), column = T.unsafe(nil)); end
  def raise_if_bind_arity_mismatch(statement, expected, provided); end
  def replace_bind_variable(value, c = T.unsafe(nil)); end
  def replace_bind_variables(statement, values); end
  def replace_named_bind_variables(statement, bind_vars); end
  def sanitize_conditions(condition, table_name = T.unsafe(nil)); end
  def sanitize_sql(condition, table_name = T.unsafe(nil)); end
  def sanitize_sql_array(ary); end
  def sanitize_sql_for_assignment(assignments, default_table_name = T.unsafe(nil)); end
  def sanitize_sql_for_conditions(condition, table_name = T.unsafe(nil)); end
  def sanitize_sql_hash(attrs, default_table_name = T.unsafe(nil)); end
  def sanitize_sql_hash_for_assignment(attrs, table); end
  def sanitize_sql_hash_for_conditions(attrs, default_table_name = T.unsafe(nil)); end
end

class ActiveRecord::Schema < ::ActiveRecord::Migration
  def define(info, &block); end
  def migrations_paths; end

  class << self
    def define(info = T.unsafe(nil), &block); end
  end
end

class ActiveRecord::SchemaDumper
  include(::RGeo::ActiveRecord::GeoSchemaDumper)

  def initialize(connection, options = T.unsafe(nil)); end

  def dump(stream); end
  def ignore_tables; end
  def ignore_tables=(obj); end

  private

  def extensions(stream); end
  def header(stream); end
  def indexes(table, stream); end
  def indexes_without_rgeo(table, stream); end
  def remove_prefix_and_suffix(table); end
  def table(table, stream); end
  def tables(stream); end
  def trailer(stream); end

  class << self
    def dump(connection = T.unsafe(nil), stream = T.unsafe(nil), config = T.unsafe(nil)); end
    def ignore_tables; end
    def ignore_tables=(obj); end

    private

    def generate_options(config); end
  end
end

class ActiveRecord::SchemaMigration < ::ActiveRecord::Base
  def version; end

  class << self
    def _validators; end
    def create_table(limit = T.unsafe(nil)); end
    def defined_enums; end
    def drop_table; end
    def index_name; end
    def table_exists?; end
    def table_name; end
  end
end

class ActiveRecord::SchemaMigration::ActiveRecord_AssociationRelation < ::ActiveRecord::AssociationRelation
  include(::ActiveRecord::Delegation::ClassSpecificRelation)
  extend(::ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods)
end

class ActiveRecord::SchemaMigration::ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
  include(::ActiveRecord::Delegation::ClassSpecificRelation)
  extend(::ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods)
end

class ActiveRecord::SchemaMigration::ActiveRecord_Relation < ::ActiveRecord::Relation
  include(::ActiveRecord::Delegation::ClassSpecificRelation)
  extend(::ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods)
end

module ActiveRecord::Scoping
  extend(::ActiveSupport::Concern)
  extend(::ActiveSupport::Autoload)

  include(::ActiveRecord::Scoping::Default)
  include(::ActiveRecord::Scoping::Named)

  mixes_in_class_methods(::ActiveRecord::Scoping::ClassMethods)

  def initialize_internals_callback; end
  def populate_with_current_scope_attributes; end
end

module ActiveRecord::Scoping::ClassMethods
  def current_scope; end
  def current_scope=(scope); end
end

module ActiveRecord::Scoping::Default
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::Scoping::Default::ClassMethods)
end

module ActiveRecord::Scoping::Default::ClassMethods
  def before_remove_const; end
  def unscoped; end

  protected

  def build_default_scope; end
  def default_scope(scope = T.unsafe(nil)); end
  def evaluate_default_scope; end
  def ignore_default_scope=(ignore); end
  def ignore_default_scope?; end
end

module ActiveRecord::Scoping::Named
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::Scoping::Named::ClassMethods)
end

module ActiveRecord::Scoping::Named::ClassMethods
  def all; end
  def default_scoped; end
  def scope(name, body, &block); end
  def scope_attributes; end
  def scope_attributes?; end
end

class ActiveRecord::Scoping::ScopeRegistry
  extend(::ActiveSupport::PerThreadRegistry)

  def initialize; end

  def set_value_for(scope_type, variable_name, value); end
  def value_for(scope_type, variable_name); end

  private

  def raise_invalid_scope_type!(scope_type); end
end

ActiveRecord::Scoping::ScopeRegistry::VALID_SCOPE_TYPES = T.let(T.unsafe(nil), Array)

module ActiveRecord::Serialization
  extend(::ActiveSupport::Concern)

  include(::ActiveModel::Serializers::JSON)
  include(::ActiveModel::Serializers::Xml)

  def serializable_hash(options = T.unsafe(nil)); end
  def to_xml(options = T.unsafe(nil), &block); end
end

class ActiveRecord::SerializationTypeMismatch < ::ActiveRecord::ActiveRecordError
end

module ActiveRecord::SpawnMethods
  def except(*skips); end
  def merge(other); end
  def merge!(other); end
  def only(*onlies); end
  def spawn; end

  private

  def relation_with(values); end
end

class ActiveRecord::StaleObjectError < ::ActiveRecord::ActiveRecordError
  def initialize(record, attempted_action); end

  def attempted_action; end
  def record; end
end

class ActiveRecord::StatementCache
  def initialize; end

  def execute; end
end

class ActiveRecord::StatementInvalid < ::ActiveRecord::ActiveRecordError
  def initialize(message, original_exception = T.unsafe(nil)); end

  def original_exception; end
end

module ActiveRecord::Store
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::Store::ClassMethods)


  protected

  def read_store_attribute(store_attribute, key); end
  def write_store_attribute(store_attribute, key, value); end

  private

  def store_accessor_for(store_attribute); end
end

module ActiveRecord::Store::ClassMethods
  def _store_accessors_module; end
  def store(store_attribute, options = T.unsafe(nil)); end
  def store_accessor(store_attribute, *keys); end
end

class ActiveRecord::Store::HashAccessor
  class << self
    def prepare(object, attribute); end
    def read(object, attribute, key); end
    def write(object, attribute, key, value); end
  end
end

class ActiveRecord::Store::IndifferentCoder
  def initialize(coder_or_class_name); end

  def dump(obj); end
  def load(yaml); end

  class << self
    def as_indifferent_hash(obj); end
  end
end

class ActiveRecord::Store::IndifferentHashAccessor < ::ActiveRecord::Store::HashAccessor
  class << self
    def prepare(object, store_attribute); end
  end
end

class ActiveRecord::Store::StringKeyedHashAccessor < ::ActiveRecord::Store::HashAccessor
  class << self
    def read(object, attribute, key); end
    def write(object, attribute, key, value); end
  end
end

class ActiveRecord::SubclassNotFound < ::ActiveRecord::ActiveRecordError
end

module ActiveRecord::Tasks
  extend(::ActiveSupport::Autoload)
end

class ActiveRecord::Tasks::DatabaseAlreadyExists < ::StandardError
end

class ActiveRecord::Tasks::DatabaseNotSupported < ::StandardError
end

module ActiveRecord::Tasks::DatabaseTasks
  extend(::ActiveRecord::Tasks::DatabaseTasks)

  def charset(*arguments); end
  def charset_current(environment = T.unsafe(nil)); end
  def check_schema_file(filename); end
  def collation(*arguments); end
  def collation_current(environment = T.unsafe(nil)); end
  def create(*arguments); end
  def create_all; end
  def create_current(environment = T.unsafe(nil)); end
  def current_config(options = T.unsafe(nil)); end
  def current_config=(_); end
  def database_configuration; end
  def database_configuration=(_); end
  def db_dir; end
  def db_dir=(_); end
  def drop(*arguments); end
  def drop_all; end
  def drop_current(environment = T.unsafe(nil)); end
  def env; end
  def env=(_); end
  def fixtures_path; end
  def fixtures_path=(_); end
  def load_schema(format = T.unsafe(nil), file = T.unsafe(nil)); end
  def load_seed; end
  def migrations_paths; end
  def migrations_paths=(_); end
  def purge(configuration); end
  def register_task(pattern, task); end
  def root; end
  def root=(_); end
  def seed_loader; end
  def seed_loader=(_); end
  def structure_dump(*arguments); end
  def structure_load(*arguments); end

  private

  def class_for_adapter(adapter); end
  def each_current_configuration(environment); end
  def each_local_configuration; end
  def local_database?(configuration); end
end

ActiveRecord::Tasks::DatabaseTasks::LOCAL_HOSTS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Tasks::MySQLDatabaseTasks
  def initialize(configuration); end

  def charset; end
  def collation; end
  def connection(*args, &block); end
  def create; end
  def drop; end
  def establish_connection(*args, &block); end
  def purge; end
  def structure_dump(filename); end
  def structure_load(filename); end

  private

  def configuration; end
  def configuration_without_database; end
  def creation_options; end
  def error_class; end
  def grant_statement; end
  def prepare_command_options(command); end
  def root_configuration_without_database; end
  def root_password; end
end

ActiveRecord::Tasks::MySQLDatabaseTasks::ACCESS_DENIED_ERROR = T.let(T.unsafe(nil), Fixnum)

ActiveRecord::Tasks::MySQLDatabaseTasks::DEFAULT_CHARSET = T.let(T.unsafe(nil), String)

ActiveRecord::Tasks::MySQLDatabaseTasks::DEFAULT_COLLATION = T.let(T.unsafe(nil), String)

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
  def initialize(configuration); end

  def charset; end
  def clear_active_connections!(*args, &block); end
  def collation; end
  def connection(*args, &block); end
  def create(master_established = T.unsafe(nil)); end
  def drop; end
  def establish_connection(*args, &block); end
  def purge; end
  def structure_dump(filename); end
  def structure_load(filename); end

  private

  def configuration; end
  def encoding; end
  def establish_master_connection; end
  def set_psql_env; end
end

ActiveRecord::Tasks::PostgreSQLDatabaseTasks::DEFAULT_ENCODING = T.let(T.unsafe(nil), String)

class ActiveRecord::Tasks::SQLiteDatabaseTasks
  def initialize(configuration, root = T.unsafe(nil)); end

  def charset; end
  def connection(*args, &block); end
  def create; end
  def drop; end
  def establish_connection(*args, &block); end
  def purge; end
  def structure_dump(filename); end
  def structure_load(filename); end

  private

  def configuration; end
  def root; end
end

module ActiveRecord::TestFixtures
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::TestFixtures::ClassMethods)

  def after_teardown; end
  def before_setup; end
  def enlist_fixture_connections; end
  def run_in_transaction?; end
  def setup_fixtures(config = T.unsafe(nil)); end
  def teardown_fixtures; end

  private

  def instantiate_fixtures(config); end
  def load_fixtures(config); end
  def load_instances?; end
end

module ActiveRecord::TestFixtures::ClassMethods
  def fixtures(*fixture_set_names); end
  def require_fixture_classes(fixture_set_names = T.unsafe(nil), config = T.unsafe(nil)); end
  def set_fixture_class(class_names = T.unsafe(nil)); end
  def setup_fixture_accessors(fixture_set_names = T.unsafe(nil)); end
  def try_to_load_dependency(file_name); end
  def uses_transaction(*methods); end
  def uses_transaction?(method); end
end

module ActiveRecord::Timestamp
  extend(::ActiveSupport::Concern)


  private

  def all_timestamp_attributes; end
  def all_timestamp_attributes_in_model; end
  def clear_timestamp_attributes; end
  def create_record; end
  def current_time_from_proper_timezone; end
  def initialize_dup(other); end
  def max_updated_column_timestamp(timestamp_names = T.unsafe(nil)); end
  def should_record_timestamps?; end
  def timestamp_attributes_for_create; end
  def timestamp_attributes_for_create_in_model; end
  def timestamp_attributes_for_update; end
  def timestamp_attributes_for_update_in_model; end
  def update_record(*args); end
end

class ActiveRecord::TransactionIsolationError < ::ActiveRecord::ActiveRecordError
end

module ActiveRecord::Transactions
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActiveRecord::Transactions::ClassMethods)

  def add_to_transaction; end
  def committed!; end
  def destroy; end
  def rollback_active_record_state!; end
  def rolledback!(force_restore_state = T.unsafe(nil)); end
  def save(*_); end
  def save!(*_); end
  def touch(*_); end
  def transaction(options = T.unsafe(nil), &block); end
  def with_transaction_returning_status; end

  protected

  def clear_transaction_record_state; end
  def remember_transaction_record_state; end
  def restore_transaction_record_state(force = T.unsafe(nil)); end
  def transaction_include_any_action?(actions); end
  def transaction_record_state(state); end
end

ActiveRecord::Transactions::ACTIONS = T.let(T.unsafe(nil), Array)

module ActiveRecord::Transactions::ClassMethods
  def after_commit(*args, &block); end
  def after_rollback(*args, &block); end
  def transaction(options = T.unsafe(nil), &block); end

  private

  def assert_valid_transaction_action(actions); end
  def set_options_for_callbacks!(args); end
end

module ActiveRecord::Translation
  include(::ActiveModel::Naming)
  include(::ActiveModel::Translation)

  def i18n_scope; end
  def lookup_ancestors; end
end

class ActiveRecord::UnknownAttributeError < ::NoMethodError
  def initialize(record, attribute); end

  def attribute; end
  def record; end
end

class ActiveRecord::UnknownMigrationVersionError < ::ActiveRecord::MigrationError
  def initialize(version); end
end

class ActiveRecord::UnknownPrimaryKey < ::ActiveRecord::ActiveRecordError
  def initialize(model); end

  def model; end
end

module ActiveRecord::VERSION
end

ActiveRecord::VERSION::MAJOR = T.let(T.unsafe(nil), Fixnum)

ActiveRecord::VERSION::MINOR = T.let(T.unsafe(nil), Fixnum)

ActiveRecord::VERSION::STRING = T.let(T.unsafe(nil), String)

ActiveRecord::VERSION::TINY = T.let(T.unsafe(nil), Fixnum)

module ActiveRecord::Validations
  extend(::ActiveSupport::Concern)

  include(::ActiveSupport::Callbacks)
  include(::ActiveModel::Validations::HelperMethods)
  include(::ActiveModel::Validations)

  mixes_in_class_methods(::ActiveRecord::Validations::ClassMethods)

  def save(options = T.unsafe(nil)); end
  def save!(options = T.unsafe(nil)); end
  def valid?(context = T.unsafe(nil)); end

  protected

  def perform_validations(options = T.unsafe(nil)); end
end

class ActiveRecord::Validations::AssociatedValidator < ::ActiveModel::EachValidator
  def validate_each(record, attribute, value); end
end

module ActiveRecord::Validations::ClassMethods
  def create!(attributes = T.unsafe(nil), &block); end
  def validates_associated(*attr_names); end
  def validates_presence_of(*attr_names); end
  def validates_uniqueness_of(*attr_names); end
end

class ActiveRecord::Validations::PresenceValidator < ::ActiveModel::Validations::PresenceValidator
  def validate(record); end
end

class ActiveRecord::Validations::UniquenessValidator < ::ActiveModel::EachValidator
  def initialize(options); end

  def validate_each(record, attribute, value); end

  protected

  def build_relation(klass, table, attribute, value); end
  def deserialize_attribute(record, attribute, value); end
  def find_finder_class_for(record); end
  def map_enum_attribute(klass, attribute, value); end
  def scope_relation(record, table, relation); end
end

class ActiveRecord::WrappedDatabaseException < ::ActiveRecord::StatementInvalid
end

class ActiveRecord::XmlSerializer < ::ActiveModel::Serializers::Xml::Serializer
end

class ActiveRecord::XmlSerializer::Attribute < ::ActiveModel::Serializers::Xml::Serializer::Attribute

  protected

  def compute_type; end
end

class ActiveRecord::Associations::JoinDependency::JoinPart
  include(::Enumerable)

  def initialize(base_klass, children); end

  def aliased_table_name; end
  def base_klass; end
  def children; end
  def column_names(*args, &block); end
  def each(&block); end
  def extract_record(row, column_names_with_alias); end
  def instantiate(row, aliases); end
  def match?(other); end
  def name; end
  def primary_key(*args, &block); end
  def table; end
  def table_name(*args, &block); end
end
