# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tilt` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module Tilt
  class << self
    def [](file); end
    def default_mapping; end
    def finalize!; end
    def lazy_map; end
    def new(file, line = T.unsafe(nil), options = T.unsafe(nil), &block); end
    def prefer(template_class, *extensions); end
    def register(template_class, *extensions); end
    def register_lazy(class_name, file, *extensions); end
    def register_pipeline(ext, options = T.unsafe(nil)); end
    def registered?(ext); end
    def template_for(file); end
    def templates_for(file); end
  end
end

class Tilt::BuilderTemplate < ::Tilt::Template
  def evaluate(scope, locals, &block); end
  def precompiled_postamble(locals); end
  def precompiled_template(locals); end
  def prepare; end

  private

  def xml_builder; end
end

class Tilt::CSVTemplate < ::Tilt::Template
  def precompiled(locals); end
  def precompiled_template(locals); end
  def prepare; end
end

class Tilt::Cache
  def initialize; end

  def clear; end
  def fetch(*key); end
end

class Tilt::CoffeeScriptLiterateTemplate < ::Tilt::CoffeeScriptTemplate
  class << self
    def literate?; end
  end
end

class Tilt::CoffeeScriptTemplate < ::Tilt::StaticTemplate
  def prepare; end

  class << self
    def default_bare; end
    def default_bare=(_); end
    def literate?; end
  end
end

module Tilt::CompiledTemplates
end

class Tilt::ERBTemplate < ::Tilt::Template
  def freeze_string_literals?; end
  def precompiled(locals); end
  def precompiled_postamble(locals); end
  def precompiled_preamble(locals); end
  def precompiled_template(locals); end
  def prepare; end
end

class Tilt::ErubisTemplate < ::Tilt::ERBTemplate
  def freeze_string_literals?; end
  def precompiled(locals); end
  def precompiled_postamble(locals); end
  def precompiled_preamble(locals); end
  def prepare; end
end

class Tilt::EtanniTemplate < ::Tilt::Template
  def precompiled(locals); end
  def precompiled_template(locals); end
  def prepare; end
end

Tilt::LOCK = T.let(T.unsafe(nil), Thread::Mutex)

class Tilt::Mapping
  def initialize; end

  def extensions_for(template_class); end
  def finalized; end
  def lazy_map; end
  def register(template_class, *extensions); end
  def register_lazy(class_name, file, *extensions); end
  def register_pipeline(ext, options = T.unsafe(nil)); end
  def registered?(ext); end
  def template_map; end
  def unregister(*extensions); end

  private

  def constant_defined?(name); end
  def initialize_copy(other); end
  def lazy?(ext); end
  def lazy_load(pattern); end
  def lookup(ext); end
  def register_defined_classes(class_names, pattern); end
end

Tilt::Mapping::LOCK = T.let(T.unsafe(nil), Thread::Mutex)

class Tilt::NokogiriTemplate < ::Tilt::Template
  def evaluate(scope, locals); end
  def precompiled_postamble(locals); end
  def precompiled_preamble(locals); end
  def precompiled_template(locals); end
end

Tilt::NokogiriTemplate::DOCUMENT_HEADER = T.let(T.unsafe(nil), Regexp)

class Tilt::Pipeline < ::Tilt::Template
  def evaluate(scope, locals, &block); end
  def prepare; end
end

class Tilt::PlainTemplate < ::Tilt::StaticTemplate

  private

  def _prepare_output; end
end

class Tilt::RDocTemplate < ::Tilt::StaticTemplate

  private

  def _prepare_output; end
end

class Tilt::SassTemplate < ::Tilt::StaticTemplate

  private

  def _prepare_output; end
  def sass_options; end
end

Tilt::SassTemplate::Engine = SassC::Engine

class Tilt::ScssTemplate < ::Tilt::SassTemplate

  private

  def sass_options; end
end

class Tilt::StaticTemplate < ::Tilt::Template
  def allows_script?; end
  def compiled_method(locals_keys, scope_class = T.unsafe(nil)); end
  def render(scope = T.unsafe(nil), locals = T.unsafe(nil)); end

  protected

  def prepare; end

  private

  def set_compiled_method_cache; end

  class << self
    def subclass(mime_type: T.unsafe(nil), &block); end
  end
end

class Tilt::StringTemplate < ::Tilt::Template
  def freeze_string_literals?; end
  def precompiled(locals); end
  def precompiled_template(locals); end
  def prepare; end
end

Tilt::TOPOBJECT = Tilt::CompiledTemplates

class Tilt::Template
  def initialize(file = T.unsafe(nil), line = T.unsafe(nil), options = T.unsafe(nil)); end

  def basename(suffix = T.unsafe(nil)); end
  def compiled_method(locals_keys, scope_class = T.unsafe(nil)); end
  def compiled_path; end
  def compiled_path=(path); end
  def data; end
  def eval_file; end
  def file; end
  def line; end
  def metadata; end
  def name; end
  def options; end
  def render(scope = T.unsafe(nil), locals = T.unsafe(nil), &block); end

  protected

  def default_encoding; end
  def evaluate(scope, locals, &block); end
  def precompiled(local_keys); end
  def precompiled_postamble(local_keys); end
  def precompiled_preamble(local_keys); end
  def precompiled_template(local_keys); end
  def prepare; end
  def skip_compiled_encoding_detection?; end

  private

  def binary(string); end
  def bind_compiled_method(method_source, offset, scope_class); end
  def compile_template_method(local_keys, scope_class = T.unsafe(nil)); end
  def eval_compiled_method(method_source, offset, scope_class); end
  def extract_encoding(script, &block); end
  def extract_magic_comment(script); end
  def freeze_string_literals?; end
  def load_compiled_method(path, method_source); end
  def local_extraction(local_keys); end
  def process_arg(arg); end
  def read_template_file; end
  def set_compiled_method_cache; end
  def unbind_compiled_method(method_name); end

  class << self
    def default_mime_type; end
    def default_mime_type=(value); end
    def metadata; end
  end
end

Tilt::Template::CLASS_METHOD = T.let(T.unsafe(nil), UnboundMethod)

Tilt::VERSION = T.let(T.unsafe(nil), String)
