# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activerecord-session_store` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module ActionDispatch
  extend(::ActiveSupport::Autoload)

  def test_app; end
  def test_app=(obj); end

  class << self
    def test_app; end
    def test_app=(obj); end
  end
end

module ActionDispatch::Session
end

class ActionDispatch::Session::ActiveRecordStore < ::ActionDispatch::Session::AbstractStore
  include(::ActionDispatch::Session::LegacySupport)

  def session_class; end
  def session_class=(obj); end

  private

  def delete_session_rails5(request, session_id, options); end
  def find_session_rails5(request, id); end
  def get_session_model_rails5(request, id); end
  def get_session_rails5(request, sid); end
  def logger; end
  def write_session_rails5(request, sid, session_data, options); end

  class << self
    def session_class; end
    def session_class=(obj); end
  end
end

ActionDispatch::Session::ActiveRecordStore::ENV_SESSION_OPTIONS_KEY = T.let(T.unsafe(nil), String)

ActionDispatch::Session::ActiveRecordStore::SESSION_RECORD_KEY = T.let(T.unsafe(nil), String)

module ActionDispatch::Session::LegacySupport
  def destroy_session(env, session_id, options); end
  def find_session(id); end
  def get_session(env, sid); end
  def get_session_model(request, sid); end
  def set_session(env, sid, session_data, options); end

  class << self
    def included(klass); end
  end
end

class ActionDispatch::Session::LegacySupport::EnvWrapper < ::Struct
  def env; end
  def env=(_); end

  class << self
    def [](*_); end
    def members; end
    def new(*_); end
  end
end

module ActiveRecord
  extend(::ActiveSupport::Autoload)

  class << self
    def eager_load!; end
    def gem_version; end
    def version; end
  end
end

ActiveRecord::Fixtures = T.let(T.unsafe(nil), ActiveSupport::Deprecation::DeprecatedConstantProxy)

module ActiveRecord::SessionStore
end

module ActiveRecord::SessionStore::ClassMethods
  def create_table!; end
  def deserialize(data); end
  def drop_table!; end
  def serialize(data); end
  def serializer; end
  def serializer=(obj); end
  def serializer_class; end

  class << self
    def serializer; end
    def serializer=(obj); end
  end
end

class ActiveRecord::SessionStore::ClassMethods::HybridSerializer < ::ActiveRecord::SessionStore::ClassMethods::JsonSerializer
  class << self
    def load(value); end
    def needs_migration?(value); end
  end
end

ActiveRecord::SessionStore::ClassMethods::HybridSerializer::MARSHAL_SIGNATURE = T.let(T.unsafe(nil), String)

class ActiveRecord::SessionStore::ClassMethods::JsonSerializer
  class << self
    def dump(value); end
    def load(value); end
  end
end

class ActiveRecord::SessionStore::ClassMethods::MarshalSerializer
  class << self
    def dump(value); end
    def load(value); end
  end
end

class ActiveRecord::SessionStore::ClassMethods::NullSerializer
  class << self
    def dump(value); end
    def load(value); end
  end
end

module ActiveRecord::SessionStore::Extension
end

module ActiveRecord::SessionStore::Extension::LoggerSilencer
  extend(::ActiveSupport::Concern)

  def add_with_threadsafety(severity, message = T.unsafe(nil), progname = T.unsafe(nil), &block); end
  def debug?; end
  def error?; end
  def fatal?; end
  def info?; end
  def level_with_threadsafety; end
  def silence_logger(temporary_level = T.unsafe(nil)); end
  def thread_level; end
  def thread_level=(level); end
  def unknown?; end
  def warn?; end

  private

  def thread_hash_level_key; end
end

class ActiveRecord::SessionStore::NilLogger
  class << self
    def silence_logger; end
  end
end

class ActiveRecord::SessionStore::Railtie < ::Rails::Railtie
end

class ActiveRecord::SessionStore::Session < ::ActiveRecord::Base
  extend(::ActiveRecord::SessionStore::ClassMethods)

  def initialize(*_); end

  def data; end
  def data=(_); end
  def data_column_name; end
  def data_column_name=(obj); end
  def loaded?; end

  private

  def raise_on_session_data_overflow!; end
  def serialize_data!; end

  class << self
    def _save_callbacks; end
    def _validators; end
    def data_column_name; end
    def data_column_name=(obj); end
    def data_column_size_limit; end
    def defined_enums; end
    def find_by_session_id(session_id); end

    private

    def session_id_column; end
    def setup_sessid_compatibility!; end
  end
end

class ActiveRecord::SessionStore::Session::ActiveRecord_AssociationRelation < ::ActiveRecord::AssociationRelation
  include(::ActiveRecord::Delegation::ClassSpecificRelation)
  extend(::ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods)
end

class ActiveRecord::SessionStore::Session::ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
  include(::ActiveRecord::Delegation::ClassSpecificRelation)
  extend(::ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods)
end

class ActiveRecord::SessionStore::Session::ActiveRecord_Relation < ::ActiveRecord::Relation
  include(::ActiveRecord::Delegation::ClassSpecificRelation)
  extend(::ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods)
end

ActiveRecord::SessionStore::Session::SEMAPHORE = T.let(T.unsafe(nil), Thread::Mutex)

class ActiveRecord::SessionStore::SqlBypass
  extend(::ActiveRecord::SessionStore::ClassMethods)

  def initialize(attributes); end

  def connection(*args, &block); end
  def connection=(arg); end
  def connection_pool(*args, &block); end
  def connection_pool=(arg); end
  def data; end
  def data=(_); end
  def data_column; end
  def data_column=(obj); end
  def destroy; end
  def loaded?; end
  def new_record; end
  def new_record?; end
  def persisted?; end
  def save; end
  def session_id; end
  def session_id_column; end
  def session_id_column=(obj); end
  def table_name; end
  def table_name=(obj); end

  class << self
    def connection; end
    def connection=(_); end
    def connection_pool; end
    def connection_pool=(_); end
    def data_column; end
    def data_column=(obj); end
    def data_column_name; end
    def find_by_session_id(session_id); end
    def session_id_column; end
    def session_id_column=(obj); end
    def table_name; end
    def table_name=(obj); end
  end
end

ActiveRecord::SessionStore::VERSION = T.let(T.unsafe(nil), String)
