# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `will_paginate` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module WillPaginate
  extend(::WillPaginate::PerPage)

  class << self
    def PageNumber(value, name = T.unsafe(nil)); end
  end
end

class WillPaginate::Collection < ::Array
  include(::WillPaginate::CollectionMethods)

  def initialize(page, per_page = T.unsafe(nil), total = T.unsafe(nil)); end

  def current_page; end
  def offset; end
  def per_page; end
  def replace(array); end
  def total_entries; end
  def total_entries=(number); end

  class << self
    def create(page, per_page, total = T.unsafe(nil)); end
  end
end

module WillPaginate::CollectionMethods
  def next_page; end
  def out_of_bounds?; end
  def previous_page; end
  def total_pages; end
end

module WillPaginate::Deprecation
  class << self
    def warn(message, stack = T.unsafe(nil)); end

    private

    def origin_of_call(stack); end
    def rails_logger; end
  end
end

class WillPaginate::Deprecation::Hash < ::Hash
  def initialize(values = T.unsafe(nil)); end

  def []=(key, value); end
  def deprecate_key(*keys, &block); end
  def merge(another); end
  def to_hash; end

  private

  def check_deprecated(key, value); end
end

module WillPaginate::I18n
  def will_paginate_translate(keys, options = T.unsafe(nil), &block); end

  class << self
    def load_path; end
    def locale_dir; end
  end
end

module WillPaginate::InvalidPage
end

class WillPaginate::PageNumber < ::Numeric
  extend(::Forwardable)

  def initialize(value, name); end

  def *(*args, &block); end
  def +(*args, &block); end
  def -(*args, &block); end
  def /(*args, &block); end
  def <=>(*args, &block); end
  def ==(*args, &block); end
  def coerce(*args, &block); end
  def inspect; end
  def is_a?(klass); end
  def kind_of?(klass); end
  def to_i; end
  def to_json(*args, &block); end
  def to_offset(per_page); end
  def to_s(*args, &block); end
end

WillPaginate::PageNumber::BIGINT = T.let(T.unsafe(nil), Bignum)

module WillPaginate::PerPage
  def per_page; end
  def per_page=(limit); end

  class << self
    def extended(base); end
  end
end

module WillPaginate::PerPage::Inheritance
  def inherited(subclass); end
end

class WillPaginate::Railtie < ::Rails::Railtie
  class << self
    def setup_actioncontroller; end
  end
end

module WillPaginate::Railtie::ControllerRescuePatch
  def rescue_from(*args, **kwargs, &block); end
end

module WillPaginate::Railtie::ShowExceptionsPatch
  extend(::ActiveSupport::Concern)

  def status_code_with_paginate(exception = T.unsafe(nil)); end
end

module WillPaginate::Sinatra
  class << self
    def registered(app); end
  end
end

module WillPaginate::Sinatra::Helpers
  include(::WillPaginate::I18n)
  include(::WillPaginate::ViewHelpers)

  def will_paginate(collection, options = T.unsafe(nil)); end
end

class WillPaginate::Sinatra::LinkRenderer < ::WillPaginate::ViewHelpers::LinkRenderer

  protected

  def build_query(params); end
  def request; end
  def url(page); end
end

module WillPaginate::ViewHelpers
  include(::WillPaginate::I18n)

  def page_entries_info(collection, options = T.unsafe(nil)); end
  def will_paginate(collection, options = T.unsafe(nil)); end

  class << self
    def pagination_options; end
    def pagination_options=(_); end
  end
end

class WillPaginate::ViewHelpers::LinkRenderer < ::WillPaginate::ViewHelpers::LinkRendererBase
  def container_attributes; end
  def prepare(collection, options, template); end
  def to_html; end

  protected

  def gap; end
  def html_container(html); end
  def next_page; end
  def page_number(page); end
  def previous_or_next_page(page, text, classname, aria_label = T.unsafe(nil)); end
  def previous_page; end
  def url(page); end

  private

  def link(text, target, attributes = T.unsafe(nil)); end
  def param_name; end
  def rel_value(page); end
  def symbolized_update(target, other, blacklist = T.unsafe(nil)); end
  def tag(name, value, attributes = T.unsafe(nil)); end
end

class WillPaginate::ViewHelpers::LinkRendererBase
  def pagination; end
  def prepare(collection, options); end

  protected

  def windowed_page_numbers; end

  private

  def current_page; end
  def total_pages; end
end
