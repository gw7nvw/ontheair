# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rgeo-activerecord` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module Arel
  class << self
    def spatial(arg); end
    def sql(raw_sql); end
    def star; end
  end
end

Arel::Attribute = Arel::Attributes::Attribute

Arel::InnerJoin = Arel::Nodes::InnerJoin

Arel::Node = Arel::Nodes::Node

Arel::OuterJoin = Arel::Nodes::OuterJoin

Arel::VERSION = T.let(T.unsafe(nil), String)

module RGeo
end

module RGeo::ActiveRecord
  class << self
    def geometric_type_from_name(name); end
    def spatial_expressions_supported?; end
  end
end

module RGeo::ActiveRecord::ActiveRecordBaseFactorySettings
  def rgeo_factory_for_column(column_name, params = T.unsafe(nil)); end
  def rgeo_factory_generator; end
  def rgeo_factory_generator=(generator); end
  def rgeo_factory_settings; end
  def set_rgeo_factory_for_column(column_name, factory); end
  def to_generate_rgeo_factory(&block); end
end

RGeo::ActiveRecord::DEFAULT_FACTORY_GENERATOR = T.let(T.unsafe(nil), Proc)

RGeo::ActiveRecord::DEFAULT_SPATIAL_COLUMN_CONSTRUCTORS = T.let(T.unsafe(nil), Hash)

module RGeo::ActiveRecord::GeoConnectionAdapters
  def method_missing_with_rgeo(method_name, *args, &block); end

  class << self
    def included(base); end
  end
end

module RGeo::ActiveRecord::GeoSchemaDumper

  private

  def indexes_with_rgeo(table, stream); end

  class << self
    def included(base); end
  end
end

module RGeo::ActiveRecord::GeoTableDefinitions
  def method_missing_with_rgeo(method_name, *args, &block); end

  class << self
    def included(base); end
  end
end

module RGeo::ActiveRecord::GeometryMixin
  def as_json(opts = T.unsafe(nil)); end

  class << self
    def generate_json(geom); end
    def set_json_generator(value = T.unsafe(nil), &block); end
  end
end

RGeo::ActiveRecord::GeometryMixin::DEFAULT_JSON_GENERATOR = T.let(T.unsafe(nil), Proc)

class RGeo::ActiveRecord::RGeoFactorySettings
  def initialize; end

  def clear!(table_name = T.unsafe(nil)); end
  def get_column_factory(table_name, column_name, params = T.unsafe(nil)); end
  def get_factory_generator(table_name); end
  def set_column_factory(table_name, column_name, factory); end
  def set_factory_generator(table_name, generator); end
end

RGeo::ActiveRecord::RGeoFactorySettings::DEFAULT = T.let(T.unsafe(nil), RGeo::ActiveRecord::RGeoFactorySettings)

class RGeo::ActiveRecord::SpatialConstantNode
  include(::RGeo::ActiveRecord::SpatialExpressions)

  def initialize(delegate); end

  def delegate; end
end

module RGeo::ActiveRecord::SpatialExpressions
  def st_area(units = T.unsafe(nil)); end
  def st_asbinary; end
  def st_astext; end
  def st_boundary; end
  def st_buffer(distance, units = T.unsafe(nil)); end
  def st_centroid; end
  def st_contains(rhs); end
  def st_convexhull; end
  def st_crosses(rhs); end
  def st_difference(rhs); end
  def st_dimension; end
  def st_disjoint(rhs); end
  def st_distance(rhs, units = T.unsafe(nil)); end
  def st_endpoint; end
  def st_envelope; end
  def st_equals(rhs); end
  def st_exteriorring; end
  def st_function(function, *args); end
  def st_geometryn(n); end
  def st_geometrytype; end
  def st_interiorringn(n); end
  def st_intersection(rhs); end
  def st_intersects(rhs); end
  def st_isclosed; end
  def st_isempty; end
  def st_isring; end
  def st_issimple; end
  def st_length(units = T.unsafe(nil)); end
  def st_m; end
  def st_numgeometries; end
  def st_numinteriorrings; end
  def st_numpoints; end
  def st_overlaps(rhs); end
  def st_pointn(n); end
  def st_pointonsurface; end
  def st_relate(rhs, matrix = T.unsafe(nil)); end
  def st_srid; end
  def st_startpoint; end
  def st_symdifference(rhs); end
  def st_touches(rhs); end
  def st_union(rhs); end
  def st_within(rhs); end
  def st_x; end
  def st_y; end
  def st_z; end
end

class RGeo::ActiveRecord::SpatialIndexDefinition < ::Struct
end

class RGeo::ActiveRecord::SpatialNamedFunction < ::Arel::Nodes::NamedFunction
  include(::RGeo::ActiveRecord::SpatialExpressions)

  def initialize(name, expr, spatial_flags = T.unsafe(nil), aliaz = T.unsafe(nil)); end

  def spatial_argument?(index); end
  def spatial_result?; end
end

module RGeo::ActiveRecord::SpatialToSql
  def st_func(standard_name); end
  def visit_RGeo_ActiveRecord_SpatialNamedFunction(node, *args); end
  def visit_in_spatial_context(node, *args); end
end

RGeo::ActiveRecord::VERSION = T.let(T.unsafe(nil), String)

RGeo::VERSION = T.let(T.unsafe(nil), String)
