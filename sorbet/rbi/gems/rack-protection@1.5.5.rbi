# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rack-protection` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module Rack
  class << self
    def release; end
    def version; end
  end
end

module Rack::Protection
  class << self
    def new(app, options = T.unsafe(nil)); end
    def version; end
  end
end

class Rack::Protection::AuthenticityToken < ::Rack::Protection::Base
  def accepts?(env); end
  def default_options; end
end

class Rack::Protection::Base
  def initialize(app, options = T.unsafe(nil)); end

  def accepts?(env); end
  def app; end
  def bytesize(string); end
  def call(env); end
  def default_options; end
  def default_reaction(env); end
  def deny(env); end
  def drop_session(env); end
  def encrypt(value); end
  def html?(headers); end
  def instrument(env); end
  def options; end
  def origin(env); end
  def random_string(secure = T.unsafe(nil)); end
  def react(env); end
  def referrer(env); end
  def report(env); end
  def safe?(env); end
  def secure_compare(a, b); end
  def session(env); end
  def session?(env); end
  def warn(env, message); end

  class << self
    def default_options(options); end
    def default_reaction(reaction); end
  end
end

Rack::Protection::Base::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

class Rack::Protection::EscapedParams < ::Rack::Protection::Base
  extend(::Rack::Utils)

  def initialize(*_); end

  def call(env); end
  def default_options; end
  def escape(object); end
  def escape_hash(hash); end
  def escape_string(str); end
  def handle(hash); end

  class << self

    private

    def escape_url(s); end
  end
end

class Rack::Protection::FormToken < ::Rack::Protection::AuthenticityToken
  def accepts?(env); end
end

class Rack::Protection::FrameOptions < ::Rack::Protection::Base
  def call(env); end
  def default_options; end
  def frame_options; end
end

class Rack::Protection::HttpOrigin < ::Rack::Protection::Base
  def accepts?(env); end
  def base_url(env); end
  def default_reaction(env); end
end

Rack::Protection::HttpOrigin::DEFAULT_PORTS = T.let(T.unsafe(nil), Hash)

class Rack::Protection::IPSpoofing < ::Rack::Protection::Base
  def accepts?(env); end
  def default_reaction(env); end
end

class Rack::Protection::JsonCsrf < ::Rack::Protection::Base
  def call(env); end
  def has_vector?(request, headers); end
  def react(env); end
end

class Rack::Protection::PathTraversal < ::Rack::Protection::Base
  def call(env); end
  def cleanup(path); end
end

class Rack::Protection::RemoteReferrer < ::Rack::Protection::Base
  def accepts?(env); end
  def default_reaction(env); end
end

class Rack::Protection::RemoteToken < ::Rack::Protection::AuthenticityToken
  def accepts?(env); end
  def default_reaction(env); end
end

Rack::Protection::SIGNATURE = T.let(T.unsafe(nil), Array)

class Rack::Protection::SessionHijacking < ::Rack::Protection::Base
  def accepts?(env); end
  def default_options; end
  def default_reaction(env); end
  def encrypt(value); end
end

Rack::Protection::VERSION = T.let(T.unsafe(nil), String)

class Rack::Protection::XSSHeader < ::Rack::Protection::Base
  def call(env); end
  def default_options; end
end

Rack::VERSION = T.let(T.unsafe(nil), Array)
