# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `actionmailer` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module ActionMailer
  extend(::ActiveSupport::Autoload)

  class << self
    def gem_version; end
    def version; end
  end
end

class ActionMailer::Base < ::AbstractController::Base
  include(::ActionMailer::DeliveryMethods)
  include(::ActionMailer::Previews)
  include(::ActionView::ViewPaths)
  include(::AbstractController::Rendering)
  include(::AbstractController::Logger)
  include(::ActiveSupport::Benchmarkable)
  include(::AbstractController::Helpers)
  include(::AbstractController::Translation)
  include(::AbstractController::AssetPaths)
  include(::ActiveSupport::Callbacks)
  include(::AbstractController::Callbacks)
  include(::ActionView::Rendering)
  include(::ActionView::Layouts)
  extend(::ActionMailer::DeliveryMethods::ClassMethods)
  extend(::ActionView::ViewPaths::ClassMethods)
  extend(::AbstractController::Helpers::ClassMethods)
  extend(::ActiveSupport::Callbacks::ClassMethods)
  extend(::AbstractController::Callbacks::ClassMethods)
  extend(::ActionView::Rendering::ClassMethods)
  extend(::ActionView::Layouts::ClassMethods)

  def initialize(method_name = T.unsafe(nil), *args); end

  def _helper_methods; end
  def _helper_methods=(_); end
  def _helper_methods?; end
  def _helpers; end
  def _helpers=(_); end
  def _helpers?; end
  def _process_action_callbacks; end
  def _process_action_callbacks=(_); end
  def _process_action_callbacks?; end
  def _protected_ivars; end
  def _view_paths; end
  def _view_paths=(_); end
  def _view_paths?; end
  def asset_host; end
  def asset_host=(value); end
  def assets_dir; end
  def assets_dir=(value); end
  def attachments; end
  def default_asset_host_protocol; end
  def default_asset_host_protocol=(value); end
  def default_params; end
  def default_params=(_); end
  def default_params?; end
  def delivery_method; end
  def delivery_method=(_); end
  def delivery_method?; end
  def delivery_methods; end
  def delivery_methods=(_); end
  def delivery_methods?; end
  def file_settings; end
  def file_settings=(_); end
  def file_settings?; end
  def headers(args = T.unsafe(nil)); end
  def javascripts_dir; end
  def javascripts_dir=(value); end
  def logger; end
  def logger=(value); end
  def mail(headers = T.unsafe(nil), &block); end
  def mailer_name; end
  def message; end
  def message=(_); end
  def perform_deliveries; end
  def perform_deliveries=(obj); end
  def preview_interceptors; end
  def preview_path; end
  def process(method_name, *args); end
  def raise_delivery_errors; end
  def raise_delivery_errors=(obj); end
  def register_preview_interceptor(interceptor); end
  def register_preview_interceptors(*interceptors); end
  def relative_url_root; end
  def relative_url_root=(value); end
  def sendmail_settings; end
  def sendmail_settings=(_); end
  def sendmail_settings?; end
  def smtp_settings; end
  def smtp_settings=(_); end
  def smtp_settings?; end
  def stylesheets_dir; end
  def stylesheets_dir=(value); end
  def test_settings; end
  def test_settings=(_); end
  def test_settings?; end

  protected

  def collect_responses(headers); end
  def create_parts_from_responses(m, responses); end
  def default_i18n_subject(interpolations = T.unsafe(nil)); end
  def each_template(paths, name, &block); end
  def insert_part(container, response, charset); end
  def set_content_type(m, user_content_type, class_default); end

  private

  def _layout; end

  class << self
    def _helper_methods; end
    def _helper_methods=(val); end
    def _helper_methods?; end
    def _helpers; end
    def _helpers=(val); end
    def _helpers?; end
    def _layout; end
    def _layout=(val); end
    def _layout?; end
    def _layout_conditions; end
    def _layout_conditions=(val); end
    def _layout_conditions?; end
    def _process_action_callbacks; end
    def _process_action_callbacks=(val); end
    def _process_action_callbacks?; end
    def _view_paths; end
    def _view_paths=(val); end
    def _view_paths?; end
    def asset_host; end
    def asset_host=(value); end
    def assets_dir; end
    def assets_dir=(value); end
    def controller_path; end
    def default(value = T.unsafe(nil)); end
    def default_asset_host_protocol; end
    def default_asset_host_protocol=(value); end
    def default_options=(value = T.unsafe(nil)); end
    def default_params; end
    def default_params=(val); end
    def default_params?; end
    def deliver_mail(mail); end
    def delivery_method; end
    def delivery_method=(val); end
    def delivery_method?; end
    def delivery_methods; end
    def delivery_methods=(val); end
    def delivery_methods?; end
    def file_settings; end
    def file_settings=(val); end
    def file_settings?; end
    def javascripts_dir; end
    def javascripts_dir=(value); end
    def logger; end
    def logger=(value); end
    def mailer_name; end
    def mailer_name=(_); end
    def perform_deliveries; end
    def perform_deliveries=(obj); end
    def preview_interceptors; end
    def preview_interceptors=(obj); end
    def preview_path; end
    def preview_path=(obj); end
    def raise_delivery_errors; end
    def raise_delivery_errors=(obj); end
    def receive(raw_mail); end
    def register_interceptor(interceptor); end
    def register_interceptors(*interceptors); end
    def register_observer(observer); end
    def register_observers(*observers); end
    def relative_url_root; end
    def relative_url_root=(value); end
    def respond_to?(method, include_private = T.unsafe(nil)); end
    def sendmail_settings; end
    def sendmail_settings=(val); end
    def sendmail_settings?; end
    def smtp_settings; end
    def smtp_settings=(val); end
    def smtp_settings?; end
    def stylesheets_dir; end
    def stylesheets_dir=(value); end
    def test_settings; end
    def test_settings=(val); end
    def test_settings?; end

    protected

    def method_missing(method_name, *args); end
    def set_payload_for_mail(payload, mail); end
  end
end

class ActionMailer::Base::NullMail
  def body; end
  def method_missing(*args); end
end

ActionMailer::Base::PROTECTED_IVARS = T.let(T.unsafe(nil), Set)

class ActionMailer::Collector
  include(::AbstractController::Collector)

  def initialize(context, &block); end

  def all(*args, &block); end
  def any(*args, &block); end
  def custom(mime, options = T.unsafe(nil)); end
  def responses; end
end

module ActionMailer::DeliveryMethods
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(::ActionMailer::DeliveryMethods::ClassMethods)

  def wrap_delivery_behavior!(*args); end
end

module ActionMailer::DeliveryMethods::ClassMethods
  def add_delivery_method(symbol, klass, default_options = T.unsafe(nil)); end
  def deliveries(*args, &block); end
  def deliveries=(arg); end
  def wrap_delivery_behavior(mail, method = T.unsafe(nil), options = T.unsafe(nil)); end
end

class ActionMailer::LogSubscriber < ::ActiveSupport::LogSubscriber
  def deliver(event); end
  def logger; end
  def process(event); end
  def receive(event); end
end

module ActionMailer::MailHelper
  def attachments; end
  def block_format(text); end
  def format_paragraph(text, len = T.unsafe(nil), indent = T.unsafe(nil)); end
  def mailer; end
  def message; end
end

class ActionMailer::Preview
  extend(::ActiveSupport::DescendantsTracker)

  class << self
    def all; end
    def call(email); end
    def email_exists?(email); end
    def emails; end
    def exists?(preview); end
    def find(preview); end
    def preview_name; end

    protected

    def inform_preview_interceptors(message); end
    def load_previews; end
    def preview_path; end
  end
end

module ActionMailer::Previews
  extend(::ActiveSupport::Concern)
end

class ActionMailer::Railtie < ::Rails::Railtie
end

class ActionMailer::TestCase < ::ActiveSupport::TestCase
  include(::ActiveSupport::Testing::ConstantLookup)
  include(::ActionMailer::TestHelper)
  include(::ActionMailer::TestCase::Behavior)
  extend(::ActiveSupport::Testing::ConstantLookup::ClassMethods)
  extend(::ActionMailer::TestCase::Behavior::ClassMethods)

  def _mailer_class; end
  def _mailer_class=(_); end
  def _mailer_class?; end

  class << self
    def _mailer_class; end
    def _mailer_class=(val); end
    def _mailer_class?; end
    def _setup_callbacks; end
  end
end

module ActionMailer::TestCase::Behavior
  include(::ActionMailer::TestHelper)
  extend(::ActiveSupport::Concern)

  include(::ActiveSupport::Testing::ConstantLookup)

  mixes_in_class_methods(::ActionMailer::TestCase::Behavior::ClassMethods)


  protected

  def initialize_test_deliveries; end
  def set_expected_mail; end

  private

  def charset; end
  def encode(subject); end
  def read_fixture(action); end
end

module ActionMailer::TestCase::Behavior::ClassMethods
  def determine_default_mailer(name); end
  def mailer_class; end
  def tests(mailer); end
end

module ActionMailer::TestHelper
  def assert_emails(number); end
  def assert_no_emails(&block); end
end

module ActionMailer::VERSION
end

ActionMailer::VERSION::MAJOR = T.let(T.unsafe(nil), Fixnum)

ActionMailer::VERSION::MINOR = T.let(T.unsafe(nil), Fixnum)

ActionMailer::VERSION::STRING = T.let(T.unsafe(nil), String)

ActionMailer::VERSION::TINY = T.let(T.unsafe(nil), Fixnum)

class ActionMailer::NonInferrableMailerError < ::StandardError
  def initialize(name); end
end
