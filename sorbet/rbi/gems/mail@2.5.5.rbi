# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mail` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module Mail
  class << self
    def all(*args, &block); end
    def compile_parser(parser); end
    def connection(&block); end
    def defaults(&block); end
    def delete_all(*args, &block); end
    def deliver(*args, &block); end
    def delivery_method; end
    def eager_autoload!; end
    def find(*args, &block); end
    def find_and_delete(*args, &block); end
    def first(*args, &block); end
    def inform_interceptors(mail); end
    def inform_observers(mail); end
    def last(*args, &block); end
    def new(*args, &block); end
    def random_tag; end
    def read(filename); end
    def read_from_string(mail_as_string); end
    def register_autoload(name, path); end
    def register_interceptor(interceptor); end
    def register_observer(observer); end
    def retriever_method; end
    def something_random; end
    def uniq; end
  end
end

class Mail::Address
  include(::Mail::Patterns)
  include(::Mail::Utilities)

  def initialize(value = T.unsafe(nil)); end

  def address; end
  def address=(value); end
  def comments; end
  def decoded; end
  def display_name; end
  def display_name=(str); end
  def domain; end
  def encoded; end
  def format; end
  def inspect; end
  def local; end
  def name; end
  def raw; end
  def to_s; end

  private

  def format_comments; end
  def get_comments; end
  def get_display_name; end
  def get_domain; end
  def get_local; end
  def get_name; end
  def obs_domain_list; end
  def parse(value = T.unsafe(nil)); end
  def strip_all_comments(string); end
  def strip_domain_comments(value); end
  def tree; end
  def tree=(value); end
end

class Mail::AddressContainer < ::Array
  def initialize(field, list = T.unsafe(nil)); end

  def <<(address); end
end

class Mail::AddressList
  def initialize(string); end

  def address_nodes; end
  def addresses; end
  def group_names; end
  def group_recipients; end
  def individual_recipients; end

  private

  def get_addresses; end
  def get_group_addresses(g); end
end

module Mail::AddressLists
  include(::Treetop::Runtime)
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)

  def _nt_primary_address; end
  def root; end
end

module Mail::AddressLists::PrimaryAddress0
  def addresses; end
end

module Mail::AddressLists::PrimaryAddress1
  def addresses; end
end

class Mail::AddressListsParser < ::Treetop::Runtime::CompiledParser
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)
  include(::Mail::AddressLists)
end

class Mail::AttachmentsList < ::Array
  def initialize(parts_list); end

  def [](index_value); end
  def []=(name, value); end
  def guess_encoding; end
  def inline; end
  def set_mime_type(filename); end
end

class Mail::BccField < ::Mail::StructuredField
  include(::Mail::CommonAddress)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def encoded; end
end

Mail::BccField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::BccField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::Body
  def initialize(string = T.unsafe(nil)); end

  def <<(val); end
  def ==(other); end
  def =~(regexp); end
  def boundary; end
  def boundary=(val); end
  def charset; end
  def charset=(val); end
  def decoded; end
  def empty?; end
  def encoded(transfer_encoding = T.unsafe(nil)); end
  def encoding(val = T.unsafe(nil)); end
  def encoding=(val); end
  def epilogue; end
  def epilogue=(val); end
  def get_best_encoding(target); end
  def include?(other); end
  def match(regexp); end
  def multipart?; end
  def only_us_ascii?; end
  def parts; end
  def preamble; end
  def preamble=(val); end
  def raw_source; end
  def set_sort_order(order); end
  def sort_parts!; end
  def split!(boundary); end
  def to_s; end

  private

  def crlf_boundary; end
  def end_boundary; end
  def set_charset; end
end

class Mail::CcField < ::Mail::StructuredField
  include(::Mail::CommonAddress)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def encoded; end
end

Mail::CcField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::CcField::FIELD_NAME = T.let(T.unsafe(nil), String)

module Mail::CheckDeliveryParams
  class << self
    def check(mail); end
    def check_addr(addr_name, addr); end
    def check_from(addr); end
    def check_message(message); end
    def check_to(addrs); end
    def validate_smtp_addr(addr); end
  end
end

class Mail::CommentsField < ::Mail::UnstructuredField
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end
end

Mail::CommentsField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::CommentsField::FIELD_NAME = T.let(T.unsafe(nil), String)

module Mail::CommonAddress
  def <<(val); end
  def addresses; end
  def addrs; end
  def charset; end
  def decoded_group_addresses; end
  def default; end
  def display_names; end
  def each; end
  def encode_if_needed(val); end
  def encoded_group_addresses; end
  def formatted; end
  def group_addresses; end
  def group_names; end
  def groups; end
  def parse(val = T.unsafe(nil)); end
  def value=(val); end

  private

  def do_decode; end
  def do_encode(field_name); end
  def get_group_addresses(group_list); end
  def tree; end
end

module Mail::CommonDate
  def date_time; end
  def default; end
  def parse(val = T.unsafe(nil)); end

  private

  def do_decode; end
  def do_encode(field_name); end
  def element; end
  def tree; end
end

module Mail::CommonField
  def default; end
  def field_length; end
  def name; end
  def name=(value); end
  def responsible_for?(val); end
  def to_s; end
  def value; end
  def value=(value); end

  private

  def ensure_filename_quoted(value); end
  def strip_field(field_name, value); end
end

Mail::CommonField::FILENAME_RE = T.let(T.unsafe(nil), Regexp)

module Mail::CommonMessageId
  def default; end
  def element; end
  def message_id; end
  def message_ids; end
  def parse(val = T.unsafe(nil)); end

  private

  def do_decode; end
  def do_encode(field_name); end
  def formated_message_ids(join); end
end

class Mail::Configuration
  include(::Singleton)
  extend(::Singleton::SingletonClassMethods)

  def initialize; end

  def delivery_method(method = T.unsafe(nil), settings = T.unsafe(nil)); end
  def lookup_delivery_method(method); end
  def lookup_retriever_method(method); end
  def param_encode_language(value = T.unsafe(nil)); end
  def retriever_method(method = T.unsafe(nil), settings = T.unsafe(nil)); end

  class << self
    def instance; end
  end
end

class Mail::ContentDescriptionField < ::Mail::UnstructuredField
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end
end

Mail::ContentDescriptionField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ContentDescriptionField::FIELD_NAME = T.let(T.unsafe(nil), String)

module Mail::ContentDisposition
  include(::Treetop::Runtime)
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)
  include(::Mail::RFC2045)

  def _nt_attribute; end
  def _nt_content_disposition; end
  def _nt_disposition_type; end
  def _nt_extension_token; end
  def _nt_parameter; end
  def _nt_value; end
  def root; end
end

module Mail::ContentDisposition::ContentDisposition0
  def CFWS1; end
  def CFWS2; end
  def parameter; end
end

module Mail::ContentDisposition::ContentDisposition1
  def disposition_type; end
  def param_hashes; end
end

module Mail::ContentDisposition::ContentDisposition2
  def parameters; end
end

module Mail::ContentDisposition::DispositionType0
end

module Mail::ContentDisposition::DispositionType1
end

module Mail::ContentDisposition::Parameter0
  def attr; end
  def val; end
end

module Mail::ContentDisposition::Parameter1
  def param_hash; end
end

module Mail::ContentDisposition::Value0
  def text_value; end
end

class Mail::ContentDispositionElement
  include(::Mail::Patterns)
  include(::Mail::Utilities)

  def initialize(string); end

  def cleaned(string); end
  def disposition_type; end
  def parameters; end
end

class Mail::ContentDispositionField < ::Mail::StructuredField
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def disposition_type; end
  def element; end
  def encoded; end
  def filename; end
  def parameters; end
  def parse(val = T.unsafe(nil)); end
end

Mail::ContentDispositionField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ContentDispositionField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ContentDispositionParser < ::Treetop::Runtime::CompiledParser
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)
  include(::Mail::RFC2045)
  include(::Mail::ContentDisposition)
end

class Mail::ContentIdField < ::Mail::StructuredField
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def content_id; end
  def decoded; end
  def element; end
  def encoded; end
  def name; end
  def parse(val = T.unsafe(nil)); end
  def to_s; end

  private

  def generate_content_id; end
end

Mail::ContentIdField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ContentIdField::FIELD_NAME = T.let(T.unsafe(nil), String)

module Mail::ContentLocation
  include(::Treetop::Runtime)
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)
  include(::Mail::RFC2045)

  def _nt_location; end
  def _nt_primary; end
  def root; end
end

module Mail::ContentLocation::Location0
  def text_value; end
end

module Mail::ContentLocation::Primary0
  def CFWS1; end
  def CFWS2; end
  def location; end
end

class Mail::ContentLocationElement
  include(::Mail::Patterns)
  include(::Mail::Utilities)

  def initialize(string); end

  def location; end
  def to_s(*args); end
end

class Mail::ContentLocationField < ::Mail::StructuredField
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def element; end
  def encoded; end
  def location; end
  def parse(val = T.unsafe(nil)); end
end

Mail::ContentLocationField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ContentLocationField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ContentLocationParser < ::Treetop::Runtime::CompiledParser
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)
  include(::Mail::RFC2045)
  include(::Mail::ContentLocation)
end

module Mail::ContentTransferEncoding
  include(::Treetop::Runtime)
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)
  include(::Mail::RFC2045)

  def _nt_encoding; end
  def _nt_primary; end
  def root; end
end

module Mail::ContentTransferEncoding::Primary0
  def CFWS1; end
  def CFWS2; end
  def CFWS3; end
  def encoding; end
end

class Mail::ContentTransferEncodingElement
  include(::Mail::Patterns)
  include(::Mail::Utilities)

  def initialize(string); end

  def encoding; end
end

class Mail::ContentTransferEncodingField < ::Mail::StructuredField
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def element; end
  def encoded; end
  def encoding; end
  def parse(val = T.unsafe(nil)); end
  def tree; end
end

Mail::ContentTransferEncodingField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ContentTransferEncodingField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ContentTransferEncodingParser < ::Treetop::Runtime::CompiledParser
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)
  include(::Mail::RFC2045)
  include(::Mail::ContentTransferEncoding)
end

module Mail::ContentType
  include(::Treetop::Runtime)
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)
  include(::Mail::RFC2045)

  def _nt_attribute; end
  def _nt_composite_type; end
  def _nt_content_type; end
  def _nt_discrete_type; end
  def _nt_extension_token; end
  def _nt_main_type; end
  def _nt_parameter; end
  def _nt_sub_type; end
  def _nt_value; end
  def root; end
end

module Mail::ContentType::CompositeType0
end

module Mail::ContentType::CompositeType1
end

module Mail::ContentType::ContentType0
  def CFWS1; end
  def CFWS2; end
  def parameter; end
end

module Mail::ContentType::ContentType1
  def main_type; end
  def param_hashes; end
  def sub_type; end
end

module Mail::ContentType::ContentType2
  def parameters; end
end

module Mail::ContentType::DiscreteType0
end

module Mail::ContentType::DiscreteType1
end

module Mail::ContentType::DiscreteType2
end

module Mail::ContentType::DiscreteType3
end

module Mail::ContentType::DiscreteType4
end

module Mail::ContentType::Parameter0
  def attr; end
  def val; end
end

module Mail::ContentType::Parameter1
  def param_hash; end
end

module Mail::ContentType::Value0
  def text_value; end
end

class Mail::ContentTypeElement
  include(::Mail::Patterns)
  include(::Mail::Utilities)

  def initialize(string); end

  def cleaned(string); end
  def main_type; end
  def parameters; end
  def sub_type; end
end

class Mail::ContentTypeField < ::Mail::StructuredField
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def attempt_to_clean; end
  def content_type; end
  def decoded; end
  def default; end
  def element; end
  def encoded; end
  def filename; end
  def main_type; end
  def parameters; end
  def parse(val = T.unsafe(nil)); end
  def string; end
  def stringify(params); end
  def sub_type; end
  def value; end

  private

  def get_mime_type(val); end
  def method_missing(name, *args, &block); end
  def sanatize(val); end

  class << self
    def generate_boundary; end
    def with_boundary(type); end
  end
end

Mail::ContentTypeField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ContentTypeField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ContentTypeParser < ::Treetop::Runtime::CompiledParser
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)
  include(::Mail::RFC2045)
  include(::Mail::ContentType)
end

class Mail::DateField < ::Mail::StructuredField
  include(::Mail::CommonDate)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def encoded; end
end

Mail::DateField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::DateField::FIELD_NAME = T.let(T.unsafe(nil), String)

module Mail::DateTime
  include(::Treetop::Runtime)
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)

  def _nt_primary; end
  def root; end
end

module Mail::DateTime::Primary0
  def day_of_week; end
end

module Mail::DateTime::Primary1
  def FWS; end
  def date; end
  def time; end
end

class Mail::DateTimeElement
  include(::Mail::Patterns)
  include(::Mail::Utilities)

  def initialize(string); end

  def date_string; end
  def time_string; end
end

class Mail::DateTimeParser < ::Treetop::Runtime::CompiledParser
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)
  include(::Mail::DateTime)
end

module Mail::Encodings
  include(::Mail::Patterns)
  extend(::Mail::Patterns)
  extend(::Mail::Utilities)

  class << self
    def address_encode(address, charset = T.unsafe(nil)); end
    def b_value_decode(str); end
    def b_value_encode(encoded_str, encoding = T.unsafe(nil)); end
    def collapse_adjacent_encodings(str); end
    def decode_encode(str, output_type); end
    def defined?(str); end
    def encode_non_usascii(address, charset); end
    def find_encoding(str); end
    def get_all; end
    def get_encoding(str); end
    def get_name(enc); end
    def param_decode(str, encoding); end
    def param_encode(str); end
    def q_value_decode(str); end
    def q_value_encode(encoded_str, encoding = T.unsafe(nil)); end
    def register(name, cls); end
    def split_encoding_from_string(str); end
    def split_value_encoding_from_string(str); end
    def unquote_and_convert_to(str, to_encoding); end
    def value_decode(str); end
  end
end

class Mail::Encodings::Base64 < ::Mail::Encodings::SevenBit
  class << self
    def can_encode?(enc); end
    def cost(str); end
    def decode(str); end
    def encode(str); end
  end
end

Mail::Encodings::Base64::NAME = T.let(T.unsafe(nil), String)

Mail::Encodings::Base64::PRIORITY = T.let(T.unsafe(nil), Fixnum)

class Mail::Encodings::Binary < ::Mail::Encodings::TransferEncoding
  class << self
    def cost(str); end
    def decode(str); end
    def encode(str); end
  end
end

Mail::Encodings::Binary::NAME = T.let(T.unsafe(nil), String)

Mail::Encodings::Binary::PRIORITY = T.let(T.unsafe(nil), Fixnum)

class Mail::Encodings::EightBit < ::Mail::Encodings::Binary
  class << self
    def cost(str); end
    def decode(str); end
    def encode(str); end
  end
end

Mail::Encodings::EightBit::NAME = T.let(T.unsafe(nil), String)

Mail::Encodings::EightBit::PRIORITY = T.let(T.unsafe(nil), Fixnum)

class Mail::Encodings::QuotedPrintable < ::Mail::Encodings::SevenBit
  class << self
    def can_encode?(str); end
    def cost(str); end
    def decode(str); end
    def encode(str); end
  end
end

Mail::Encodings::QuotedPrintable::NAME = T.let(T.unsafe(nil), String)

Mail::Encodings::QuotedPrintable::PRIORITY = T.let(T.unsafe(nil), Fixnum)

class Mail::Encodings::SevenBit < ::Mail::Encodings::EightBit
  class << self
    def cost(str); end
    def decode(str); end
    def encode(str); end
  end
end

Mail::Encodings::SevenBit::NAME = T.let(T.unsafe(nil), String)

Mail::Encodings::SevenBit::PRIORITY = T.let(T.unsafe(nil), Fixnum)

class Mail::Encodings::TransferEncoding
  def to_s; end

  class << self
    def can_encode?(enc); end
    def can_transport?(enc); end
    def cost(str); end
    def get_best_compatible(source_encoding, str); end
    def to_s; end
  end
end

Mail::Encodings::TransferEncoding::NAME = T.let(T.unsafe(nil), String)

Mail::Encodings::TransferEncoding::PRIORITY = T.let(T.unsafe(nil), Fixnum)

class Mail::Envelope < ::Mail::StructuredField
  def initialize(*args); end

  def date; end
  def element; end
  def from; end
  def tree; end
end

module Mail::EnvelopeFrom
  include(::Treetop::Runtime)
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)

  def _nt_ctime_date; end
  def _nt_primary; end
  def root; end
end

module Mail::EnvelopeFrom::CtimeDate0
  def day; end
  def day_name; end
  def month_name; end
  def time_of_day; end
  def year; end
end

module Mail::EnvelopeFrom::Primary0
  def addr_spec; end
  def ctime_date; end
end

class Mail::EnvelopeFromElement
  include(::Mail::Patterns)
  include(::Mail::Utilities)

  def initialize(string); end

  def address; end
  def date_time; end
  def formatted_date_time; end
  def to_s; end
  def tree; end
end

class Mail::EnvelopeFromParser < ::Treetop::Runtime::CompiledParser
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)
  include(::Mail::EnvelopeFrom)
end

class Mail::Exim < ::Mail::Sendmail
  class << self
    def call(path, arguments, destinations, encoded_message); end
  end
end

Mail::Exim::DEFAULTS = T.let(T.unsafe(nil), Hash)

class Mail::Field
  include(::Mail::Patterns)
  include(::Comparable)

  def initialize(name, value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def <=>(other); end
  def ==(other); end
  def field; end
  def field=(value); end
  def field_order_id; end
  def method_missing(name, *args, &block); end
  def name; end
  def same(other); end
  def to_s; end
  def update(name, value); end
  def value; end
  def value=(val); end

  private

  def create_field(name, value, charset); end
  def new_field(name, value, charset); end
  def split(raw_field); end
end

Mail::Field::FIELDS_MAP = T.let(T.unsafe(nil), Hash)

Mail::Field::FIELD_ORDER = T.let(T.unsafe(nil), Array)

Mail::Field::FIELD_ORDER_LOOKUP = T.let(T.unsafe(nil), Hash)

class Mail::Field::FieldError < ::StandardError
end

Mail::Field::KNOWN_FIELDS = T.let(T.unsafe(nil), Array)

class Mail::Field::ParseError < ::Mail::Field::FieldError
  def initialize(element, value, reason); end

  def element; end
  def element=(_); end
  def reason; end
  def reason=(_); end
  def value; end
  def value=(_); end
end

Mail::Field::STRUCTURED_FIELDS = T.let(T.unsafe(nil), Array)

class Mail::Field::SyntaxError < ::Mail::Field::FieldError
end

class Mail::FieldList < ::Array
  def <<(new_field); end
end

class Mail::FileDelivery
  def initialize(values); end

  def deliver!(mail); end
  def settings; end
  def settings=(_); end
end

class Mail::FromField < ::Mail::StructuredField
  include(::Mail::CommonAddress)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def encoded; end
end

Mail::FromField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::FromField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::Header
  include(::Mail::Patterns)
  include(::Mail::Utilities)
  include(::Enumerable)

  def initialize(header_text = T.unsafe(nil), charset = T.unsafe(nil)); end

  def [](name); end
  def []=(name, value); end
  def charset; end
  def charset=(val); end
  def decoded; end
  def encoded; end
  def errors; end
  def field_summary; end
  def fields; end
  def fields=(unfolded_fields); end
  def has_content_id?; end
  def has_date?; end
  def has_message_id?; end
  def has_mime_version?; end
  def raw_source; end
  def to_s; end

  private

  def each(&block); end
  def limited_field?(name); end
  def raw_source=(val); end
  def select_field_for(name); end
  def split_header; end
  def unfold(string); end
  def unfolded_header; end

  class << self
    def maximum_amount; end
    def maximum_amount=(value); end
  end
end

Mail::Header::LIMITED_FIELDS = T.let(T.unsafe(nil), Array)

class Mail::IMAP < ::Mail::Retriever
  def initialize(values); end

  def connection(&block); end
  def delete_all(mailbox = T.unsafe(nil)); end
  def find(options = T.unsafe(nil), &block); end
  def settings; end
  def settings=(_); end

  private

  def start(config = T.unsafe(nil), &block); end
  def validate_options(options); end
end

class Mail::InReplyToField < ::Mail::StructuredField
  include(::Mail::CommonMessageId)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def encoded; end
end

Mail::InReplyToField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::InReplyToField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::IndifferentHash < ::Hash
  def initialize(constructor = T.unsafe(nil)); end

  def []=(key, value); end
  def default(key = T.unsafe(nil)); end
  def delete(key); end
  def dup; end
  def fetch(key, *extras); end
  def has_key?(key); end
  def include?(key); end
  def key?(key); end
  def member?(key); end
  def merge(hash); end
  def merge!(other_hash); end
  def regular_update(_); end
  def regular_writer(_, _); end
  def reverse_merge(other_hash); end
  def reverse_merge!(other_hash); end
  def store(key, value); end
  def stringify_keys; end
  def stringify_keys!; end
  def symbolize_keys; end
  def to_hash; end
  def to_options!; end
  def update(other_hash); end
  def values_at(*indices); end

  protected

  def convert_key(key); end
  def convert_value(value); end

  class << self
    def new_from_hash_copying_default(hash); end
  end
end

class Mail::KeywordsField < ::Mail::StructuredField
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def default; end
  def encoded; end
  def keywords; end
  def parse(val = T.unsafe(nil)); end
  def phrase_list; end
end

Mail::KeywordsField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::KeywordsField::FIELD_NAME = T.let(T.unsafe(nil), String)

module Mail::Matchers
  def have_sent_email; end
end

class Mail::Matchers::HasSentEmailMatcher
  def initialize(_context); end

  def description; end
  def failure_message; end
  def from(sender); end
  def matches?(subject); end
  def matching_body(body_matcher); end
  def matching_subject(subject_matcher); end
  def negative_failure_message; end
  def to(recipient_or_list); end
  def with_body(body); end
  def with_subject(subject); end

  protected

  def dump_deliveries; end
  def explain_expectations; end
  def filter_matched_deliveries(deliveries); end
  def matches_on_body?(delivery); end
  def matches_on_body_matcher?(delivery); end
  def matches_on_recipients?(delivery); end
  def matches_on_sender?(delivery); end
  def matches_on_subject?(delivery); end
  def matches_on_subject_matcher?(delivery); end
end

class Mail::Message
  include(::Mail::Patterns)
  include(::Mail::Utilities)

  def initialize(*args, &block); end

  def <=>(other); end
  def ==(other); end
  def [](name); end
  def []=(name, value); end
  def action; end
  def add_charset; end
  def add_content_transfer_encoding; end
  def add_content_type; end
  def add_date(date_val = T.unsafe(nil)); end
  def add_file(values); end
  def add_message_id(msg_id_val = T.unsafe(nil)); end
  def add_mime_version(ver_val = T.unsafe(nil)); end
  def add_part(part); end
  def add_transfer_encoding; end
  def all_parts; end
  def attachment; end
  def attachment?; end
  def attachments; end
  def bcc(val = T.unsafe(nil)); end
  def bcc=(val); end
  def bcc_addrs; end
  def body(value = T.unsafe(nil)); end
  def body=(value); end
  def body_encoding(value); end
  def body_encoding=(value); end
  def bounced?; end
  def boundary; end
  def cc(val = T.unsafe(nil)); end
  def cc=(val); end
  def cc_addrs; end
  def charset; end
  def charset=(value); end
  def comments(val = T.unsafe(nil)); end
  def comments=(val); end
  def content_description(val = T.unsafe(nil)); end
  def content_description=(val); end
  def content_disposition(val = T.unsafe(nil)); end
  def content_disposition=(val); end
  def content_id(val = T.unsafe(nil)); end
  def content_id=(val); end
  def content_location(val = T.unsafe(nil)); end
  def content_location=(val); end
  def content_transfer_encoding(val = T.unsafe(nil)); end
  def content_transfer_encoding=(val); end
  def content_type(val = T.unsafe(nil)); end
  def content_type=(val); end
  def content_type_parameters; end
  def convert_to_multipart; end
  def date(val = T.unsafe(nil)); end
  def date=(val); end
  def decode_body; end
  def decoded; end
  def default(sym, val = T.unsafe(nil)); end
  def deliver; end
  def deliver!; end
  def delivery_handler; end
  def delivery_handler=(_); end
  def delivery_method(method = T.unsafe(nil), settings = T.unsafe(nil)); end
  def delivery_status_part; end
  def delivery_status_report?; end
  def destinations; end
  def diagnostic_code; end
  def encode!; end
  def encoded; end
  def envelope_date; end
  def envelope_from; end
  def error_status; end
  def errors; end
  def filename; end
  def final_recipient; end
  def find_first_mime_type(mt); end
  def from(val = T.unsafe(nil)); end
  def from=(val); end
  def from_addrs; end
  def has_attachments?; end
  def has_charset?; end
  def has_content_transfer_encoding?; end
  def has_content_type?; end
  def has_date?; end
  def has_message_id?; end
  def has_mime_version?; end
  def has_transfer_encoding?; end
  def header(value = T.unsafe(nil)); end
  def header=(value); end
  def header_fields; end
  def headers(hash = T.unsafe(nil)); end
  def html_part(&block); end
  def html_part=(msg); end
  def in_reply_to(val = T.unsafe(nil)); end
  def in_reply_to=(val); end
  def inform_interceptors; end
  def inform_observers; end
  def inspect; end
  def is_marked_for_delete?; end
  def keywords(val = T.unsafe(nil)); end
  def keywords=(val); end
  def main_type; end
  def mark_for_delete=(value = T.unsafe(nil)); end
  def message_content_type; end
  def message_id(val = T.unsafe(nil)); end
  def message_id=(val); end
  def method_missing(name, *args, &block); end
  def mime_parameters; end
  def mime_type; end
  def mime_version(val = T.unsafe(nil)); end
  def mime_version=(val); end
  def multipart?; end
  def multipart_report?; end
  def part(params = T.unsafe(nil)); end
  def parts; end
  def perform_deliveries; end
  def perform_deliveries=(_); end
  def raise_delivery_errors; end
  def raise_delivery_errors=(_); end
  def raw_envelope; end
  def raw_source; end
  def read; end
  def ready_to_send!; end
  def received(val = T.unsafe(nil)); end
  def received=(val); end
  def references(val = T.unsafe(nil)); end
  def references=(val); end
  def register_for_delivery_notification(observer); end
  def remote_mta; end
  def reply(*args, &block); end
  def reply_to(val = T.unsafe(nil)); end
  def reply_to=(val); end
  def resent_bcc(val = T.unsafe(nil)); end
  def resent_bcc=(val); end
  def resent_cc(val = T.unsafe(nil)); end
  def resent_cc=(val); end
  def resent_date(val = T.unsafe(nil)); end
  def resent_date=(val); end
  def resent_from(val = T.unsafe(nil)); end
  def resent_from=(val); end
  def resent_message_id(val = T.unsafe(nil)); end
  def resent_message_id=(val); end
  def resent_sender(val = T.unsafe(nil)); end
  def resent_sender=(val); end
  def resent_to(val = T.unsafe(nil)); end
  def resent_to=(val); end
  def retryable?; end
  def return_path(val = T.unsafe(nil)); end
  def return_path=(val); end
  def sender(val = T.unsafe(nil)); end
  def sender=(val); end
  def set_envelope(val); end
  def skip_deletion; end
  def smtp_envelope_from(val = T.unsafe(nil)); end
  def smtp_envelope_from=(val); end
  def smtp_envelope_to(val = T.unsafe(nil)); end
  def smtp_envelope_to=(val); end
  def sub_type; end
  def subject(val = T.unsafe(nil)); end
  def subject=(val); end
  def text?; end
  def text_part(&block); end
  def text_part=(msg); end
  def to(val = T.unsafe(nil)); end
  def to=(val); end
  def to_addrs; end
  def to_s; end
  def to_yaml(opts = T.unsafe(nil)); end
  def transfer_encoding; end
  def transport_encoding(val = T.unsafe(nil)); end
  def transport_encoding=(val); end
  def without_attachments!; end

  private

  def add_boundary; end
  def add_encoding_to_body; end
  def add_multipart_alternate_header; end
  def add_multipart_mixed_header; end
  def add_required_fields; end
  def add_required_message_fields; end
  def body_lazy(value); end
  def decode_body_as_text; end
  def do_delivery; end
  def find_attachment; end
  def identify_and_set_transfer_encoding; end
  def init_with_hash(hash); end
  def init_with_string(string); end
  def parse_message; end
  def process_body_raw; end
  def raw_source=(value); end
  def separate_parts; end
  def set_envelope_header; end

  class << self
    def from_hash(hash); end
    def from_yaml(str); end
  end
end

class Mail::MessageIdField < ::Mail::StructuredField
  include(::Mail::CommonMessageId)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def encoded; end
  def message_ids; end
  def name; end
  def to_s; end

  private

  def generate_message_id; end
end

Mail::MessageIdField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::MessageIdField::FIELD_NAME = T.let(T.unsafe(nil), String)

module Mail::MessageIds
  include(::Treetop::Runtime)
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)

  def _nt_primary; end
  def root; end
end

module Mail::MessageIds::Primary0
  def message_ids; end
end

class Mail::MessageIdsElement
  include(::Mail::Patterns)
  include(::Mail::Utilities)

  def initialize(string); end

  def clean_msg_id(val); end
  def message_id; end
  def message_ids; end
end

class Mail::MessageIdsParser < ::Treetop::Runtime::CompiledParser
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)
  include(::Mail::MessageIds)
end

module Mail::MimeVersion
  include(::Treetop::Runtime)
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)

  def _nt_version; end
  def root; end
end

module Mail::MimeVersion::Version0
  def CFWS1; end
  def CFWS2; end
  def major_digits; end
  def minor_digits; end
end

module Mail::MimeVersion::Version1
  def major; end
  def minor; end
end

class Mail::MimeVersionElement
  include(::Mail::Patterns)
  include(::Mail::Utilities)

  def initialize(string); end

  def major; end
  def minor; end
end

class Mail::MimeVersionField < ::Mail::StructuredField
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def element; end
  def encoded; end
  def major; end
  def minor; end
  def parse(val = T.unsafe(nil)); end
  def version; end
end

Mail::MimeVersionField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::MimeVersionField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::MimeVersionParser < ::Treetop::Runtime::CompiledParser
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)
  include(::Mail::MimeVersion)
end

class Mail::OptionalField < ::Mail::UnstructuredField
end

class Mail::POP3 < ::Mail::Retriever
  def initialize(values); end

  def connection(&block); end
  def delete_all; end
  def find(options = T.unsafe(nil), &block); end
  def settings; end
  def settings=(_); end

  private

  def start(config = T.unsafe(nil), &block); end
  def validate_options(options); end
end

class Mail::ParameterHash < ::Mail::IndifferentHash
  include(::Mail::Patterns)
  include(::Mail::Utilities)

  def [](key_name); end
  def decoded; end
  def encoded; end
end

class Mail::Part < ::Mail::Message
  def action; end
  def add_content_id(content_id_val = T.unsafe(nil)); end
  def add_required_fields; end
  def add_required_message_fields; end
  def bounced?; end
  def cid; end
  def delivery_status_data; end
  def delivery_status_report_part?; end
  def diagnostic_code; end
  def error_status; end
  def final_recipient; end
  def has_content_id?; end
  def inline?; end
  def inline_content_id; end
  def remote_mta; end
  def retryable?; end
  def url; end

  private

  def get_return_values(key); end
  def parse_delivery_status_report; end
  def parse_message; end
end

class Mail::PartsList < ::Array
  def attachments; end
  def collect; end
  def collect!; end
  def map; end
  def map!; end
  def sort; end
  def sort!(order); end

  private

  def get_order_value(part, order); end
end

module Mail::Patterns
end

Mail::Patterns::ATOM_UNSAFE = T.let(T.unsafe(nil), Regexp)

Mail::Patterns::CONTROL_CHAR = T.let(T.unsafe(nil), Regexp)

Mail::Patterns::CRLF = T.let(T.unsafe(nil), Regexp)

Mail::Patterns::FIELD_BODY = T.let(T.unsafe(nil), Regexp)

Mail::Patterns::FIELD_LINE = T.let(T.unsafe(nil), Regexp)

Mail::Patterns::FIELD_NAME = T.let(T.unsafe(nil), Regexp)

Mail::Patterns::FIELD_SPLIT = T.let(T.unsafe(nil), Regexp)

Mail::Patterns::FWS = T.let(T.unsafe(nil), Regexp)

Mail::Patterns::HEADER_LINE = T.let(T.unsafe(nil), Regexp)

Mail::Patterns::PHRASE_UNSAFE = T.let(T.unsafe(nil), Regexp)

Mail::Patterns::QP_SAFE = T.let(T.unsafe(nil), Regexp)

Mail::Patterns::QP_UNSAFE = T.let(T.unsafe(nil), Regexp)

Mail::Patterns::TEXT = T.let(T.unsafe(nil), Regexp)

Mail::Patterns::TOKEN_UNSAFE = T.let(T.unsafe(nil), Regexp)

Mail::Patterns::WSP = T.let(T.unsafe(nil), Regexp)

class Mail::PhraseList
  include(::Mail::Patterns)
  include(::Mail::Utilities)

  def initialize(string); end

  def phrases; end
end

module Mail::PhraseLists
  include(::Treetop::Runtime)
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)

  def _nt_primary_phrase; end
  def root; end
end

module Mail::PhraseLists::PrimaryPhrase0
  def phrases; end
end

class Mail::PhraseListsParser < ::Treetop::Runtime::CompiledParser
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)
  include(::Mail::PhraseLists)
end

module Mail::RFC2045
  include(::Treetop::Runtime)

  def _nt_custom_x_token; end
  def _nt_iana_token; end
  def _nt_ietf_token; end
  def _nt_token; end
  def _nt_tspecials; end
  def root; end
end

module Mail::RFC2045::CustomXToken0
end

class Mail::RFC2045Parser < ::Treetop::Runtime::CompiledParser
  include(::Mail::RFC2045)
end

module Mail::RFC2822
  include(::Treetop::Runtime)
  include(::Mail::RFC2822Obsolete)

  def _nt_ALPHA; end
  def _nt_CFWS; end
  def _nt_CR; end
  def _nt_CRLF; end
  def _nt_DIGIT; end
  def _nt_DQUOTE; end
  def _nt_FWS; end
  def _nt_LF; end
  def _nt_NO_WS_CTL; end
  def _nt_WSP; end
  def _nt_addr_spec; end
  def _nt_address; end
  def _nt_address_list; end
  def _nt_angle_addr; end
  def _nt_atext; end
  def _nt_atom; end
  def _nt_ccontent; end
  def _nt_comment; end
  def _nt_ctext; end
  def _nt_date; end
  def _nt_date_time; end
  def _nt_day; end
  def _nt_day_name; end
  def _nt_day_of_week; end
  def _nt_dcontent; end
  def _nt_display_name; end
  def _nt_domain; end
  def _nt_domain_literal; end
  def _nt_domain_text; end
  def _nt_dot_atom; end
  def _nt_dot_atom_text; end
  def _nt_dtext; end
  def _nt_group; end
  def _nt_hour; end
  def _nt_id_left; end
  def _nt_id_right; end
  def _nt_item_name; end
  def _nt_item_value; end
  def _nt_local_dot_atom; end
  def _nt_local_dot_atom_text; end
  def _nt_local_part; end
  def _nt_mailbox; end
  def _nt_mailbox_list; end
  def _nt_mailbox_list_group; end
  def _nt_message_id_text; end
  def _nt_message_ids; end
  def _nt_minute; end
  def _nt_month; end
  def _nt_month_name; end
  def _nt_msg_id; end
  def _nt_msg_id_atext; end
  def _nt_msg_id_domain_text; end
  def _nt_msg_id_dot_atom_text; end
  def _nt_msg_id_value; end
  def _nt_mtext; end
  def _nt_name_addr; end
  def _nt_name_val_list; end
  def _nt_name_val_pair; end
  def _nt_no_fold_literal; end
  def _nt_no_fold_quote; end
  def _nt_path; end
  def _nt_phrase; end
  def _nt_phrase_list; end
  def _nt_qcontent; end
  def _nt_qdcontent; end
  def _nt_qtext; end
  def _nt_quoted_domain; end
  def _nt_quoted_pair; end
  def _nt_quoted_string; end
  def _nt_received; end
  def _nt_return; end
  def _nt_second; end
  def _nt_specials; end
  def _nt_text; end
  def _nt_time; end
  def _nt_time_of_day; end
  def _nt_word; end
  def _nt_year; end
  def _nt_zone; end
  def root; end
end

module Mail::RFC2822::AddrSpec0
  def domain; end
  def local_part; end
end

module Mail::RFC2822::Address0
  def comments; end
  def dig_comments(comments, elements); end
end

module Mail::RFC2822::AddressList0
  def addr_value; end
end

module Mail::RFC2822::AddressList1
  def first_addr; end
  def other_addr; end
end

module Mail::RFC2822::AngleAddr0
  def addr_spec; end
end

module Mail::RFC2822::Atom0
end

module Mail::RFC2822::CFWS0
  def comment; end
end

module Mail::RFC2822::CFWS1
end

module Mail::RFC2822::Comment0
  def ccontent; end
end

module Mail::RFC2822::Comment1
end

module Mail::RFC2822::Date0
  def day; end
  def month; end
  def year; end
end

module Mail::RFC2822::DateTime0
  def day_of_week; end
end

module Mail::RFC2822::DateTime1
  def FWS; end
  def date; end
  def time; end
end

module Mail::RFC2822::Day0
  def DIGIT; end
end

module Mail::RFC2822::DayOfWeek0
  def day_name; end
end

module Mail::RFC2822::DomainLiteral0
  def dcontent; end
end

module Mail::RFC2822::DomainLiteral1
end

module Mail::RFC2822::DomainText0
  def quoted_domain; end
end

module Mail::RFC2822::DomainText1
  def DQUOTE1; end
  def DQUOTE2; end
end

module Mail::RFC2822::DotAtom0
  def dot_atom_text; end
end

module Mail::RFC2822::DotAtomText0
  def domain_text; end
end

module Mail::RFC2822::FWS0
  def CRLF; end
end

module Mail::RFC2822::FWS1
  def CRLF; end
end

module Mail::RFC2822::Group0
  def group_list; end
  def group_name; end
end

module Mail::RFC2822::Hour0
  def DIGIT1; end
  def DIGIT2; end
end

module Mail::RFC2822::ItemName0
end

module Mail::RFC2822::ItemName1
  def ALPHA; end
end

module Mail::RFC2822::LocalDotAtom0
  def local_dot_atom_text; end
end

module Mail::RFC2822::LocalDotAtomText0
  def domain_text; end
end

module Mail::RFC2822::Mailbox0
  def comments; end
  def dig_comments(comments, elements); end
end

module Mail::RFC2822::MailboxList0
  def addr_value; end
end

module Mail::RFC2822::MailboxList1
  def first_addr; end
  def other_addr; end
end

module Mail::RFC2822::MailboxListGroup0
  def addresses; end
end

module Mail::RFC2822::MessageIds0
  def CFWS; end
  def msg_id_value; end
end

module Mail::RFC2822::MessageIds1
  def first_msg_id; end
  def other_msg_ids; end
end

module Mail::RFC2822::Minute0
  def DIGIT1; end
  def DIGIT2; end
end

module Mail::RFC2822::Month0
  def FWS1; end
  def FWS2; end
  def month_name; end
end

module Mail::RFC2822::MsgId0
  def msg_id_value; end
end

module Mail::RFC2822::MsgIdDomainText0
  def quoted_domain; end
end

module Mail::RFC2822::MsgIdDomainText1
  def DQUOTE1; end
  def DQUOTE2; end
end

module Mail::RFC2822::MsgIdDotAtomText0
  def msg_id_domain_text; end
end

module Mail::RFC2822::MsgIdValue0
  def id_left; end
  def id_right; end
end

module Mail::RFC2822::NameAddr0
  def angle_addr; end
  def display_name; end
end

module Mail::RFC2822::NameValList0
  def CFWS; end
  def name_val_pair; end
end

module Mail::RFC2822::NameValList1
  def name_val_pair; end
end

module Mail::RFC2822::NameValList2
end

module Mail::RFC2822::NameValPair0
  def CFWS; end
  def item_name; end
  def item_value; end
end

module Mail::RFC2822::NoFoldLiteral0
end

module Mail::RFC2822::NoFoldQuote0
  def DQUOTE1; end
  def DQUOTE2; end
end

module Mail::RFC2822::Path0
end

module Mail::RFC2822::PhraseList0
  def phrase_value; end
end

module Mail::RFC2822::PhraseList1
  def first_phrase; end
  def other_phrases; end
end

module Mail::RFC2822::QuotedDomain0
  def text; end
end

module Mail::RFC2822::QuotedPair0
  def text; end
end

module Mail::RFC2822::QuotedString0
  def qcontent; end
end

module Mail::RFC2822::QuotedString1
  def DQUOTE1; end
  def DQUOTE2; end
  def quoted_content; end
end

module Mail::RFC2822::Received0
  def CRLF; end
  def date_time; end
  def name_val_list; end
end

module Mail::RFC2822::Return0
  def CRLF; end
  def path; end
end

module Mail::RFC2822::Second0
  def DIGIT1; end
  def DIGIT2; end
end

module Mail::RFC2822::Time0
  def FWS; end
  def time_of_day; end
  def zone; end
end

module Mail::RFC2822::TimeOfDay0
  def second; end
end

module Mail::RFC2822::TimeOfDay1
  def hour; end
  def minute; end
end

module Mail::RFC2822::Year0
  def DIGIT1; end
  def DIGIT2; end
  def DIGIT3; end
  def DIGIT4; end
end

module Mail::RFC2822::Zone0
  def DIGIT1; end
  def DIGIT2; end
  def DIGIT3; end
  def DIGIT4; end
end

module Mail::RFC2822Obsolete
  include(::Treetop::Runtime)

  def _nt_obs_FWS; end
  def _nt_obs_addr_list; end
  def _nt_obs_angle_addr; end
  def _nt_obs_bcc; end
  def _nt_obs_cc; end
  def _nt_obs_char; end
  def _nt_obs_comments; end
  def _nt_obs_day; end
  def _nt_obs_day_of_week; end
  def _nt_obs_domain; end
  def _nt_obs_domain_list; end
  def _nt_obs_fields; end
  def _nt_obs_from; end
  def _nt_obs_hour; end
  def _nt_obs_id_left; end
  def _nt_obs_id_right; end
  def _nt_obs_in_reply_to; end
  def _nt_obs_keywords; end
  def _nt_obs_local_part; end
  def _nt_obs_mbox_list; end
  def _nt_obs_message_id; end
  def _nt_obs_minute; end
  def _nt_obs_month; end
  def _nt_obs_optional; end
  def _nt_obs_orig_date; end
  def _nt_obs_path; end
  def _nt_obs_phrase; end
  def _nt_obs_phrase_list; end
  def _nt_obs_qp; end
  def _nt_obs_received; end
  def _nt_obs_references; end
  def _nt_obs_reply_to; end
  def _nt_obs_resent_bcc; end
  def _nt_obs_resent_cc; end
  def _nt_obs_resent_date; end
  def _nt_obs_resent_from; end
  def _nt_obs_resent_mid; end
  def _nt_obs_resent_rply; end
  def _nt_obs_resent_send; end
  def _nt_obs_resent_to; end
  def _nt_obs_return; end
  def _nt_obs_route; end
  def _nt_obs_second; end
  def _nt_obs_sender; end
  def _nt_obs_subject; end
  def _nt_obs_text; end
  def _nt_obs_to; end
  def _nt_obs_utext; end
  def _nt_obs_year; end
  def _nt_obs_zone; end
  def root; end
end

module Mail::RFC2822Obsolete::ObsAddrList0
end

module Mail::RFC2822Obsolete::ObsAddrList1
end

module Mail::RFC2822Obsolete::ObsAngleAddr0
  def addr_spec; end
end

module Mail::RFC2822Obsolete::ObsBcc0
  def CRLF; end
end

module Mail::RFC2822Obsolete::ObsCc0
  def CRLF; end
  def address_list; end
end

module Mail::RFC2822Obsolete::ObsComments0
  def CRLF; end
  def unstructured; end
end

module Mail::RFC2822Obsolete::ObsDay0
  def DIGIT1; end
  def DIGIT2; end
end

module Mail::RFC2822Obsolete::ObsDay1
end

module Mail::RFC2822Obsolete::ObsDayOfWeek0
  def day_name; end
end

module Mail::RFC2822Obsolete::ObsDomain0
  def atom; end
end

module Mail::RFC2822Obsolete::ObsDomain1
  def atom; end
end

module Mail::RFC2822Obsolete::ObsDomainList0
  def domain; end
end

module Mail::RFC2822Obsolete::ObsDomainList1
  def domain; end
end

module Mail::RFC2822Obsolete::ObsFWS0
  def CRLF; end
end

module Mail::RFC2822Obsolete::ObsFWS1
end

module Mail::RFC2822Obsolete::ObsFrom0
  def CRLF; end
  def mailbox_list; end
end

module Mail::RFC2822Obsolete::ObsHour0
  def DIGIT1; end
  def DIGIT2; end
end

module Mail::RFC2822Obsolete::ObsHour1
end

module Mail::RFC2822Obsolete::ObsInReplyTo0
  def CRLF; end
end

module Mail::RFC2822Obsolete::ObsKeywords0
  def CRLF; end
  def obs_phrase_list; end
end

module Mail::RFC2822Obsolete::ObsLocalPart0
  def word; end
end

module Mail::RFC2822Obsolete::ObsLocalPart1
  def word; end
end

module Mail::RFC2822Obsolete::ObsMboxList0
end

module Mail::RFC2822Obsolete::ObsMboxList1
end

module Mail::RFC2822Obsolete::ObsMessageId0
  def CRLF; end
  def msg_id; end
end

module Mail::RFC2822Obsolete::ObsMinute0
  def DIGIT1; end
  def DIGIT2; end
end

module Mail::RFC2822Obsolete::ObsMinute1
end

module Mail::RFC2822Obsolete::ObsMonth0
  def CFWS1; end
  def CFWS2; end
  def month_name; end
end

module Mail::RFC2822Obsolete::ObsOptional0
  def CRLF; end
  def field_name; end
  def unstructured; end
end

module Mail::RFC2822Obsolete::ObsOrigDate0
  def CRLF; end
  def date_time; end
end

module Mail::RFC2822Obsolete::ObsPhraseList0
end

module Mail::RFC2822Obsolete::ObsPhraseList1
end

module Mail::RFC2822Obsolete::ObsQp0
end

module Mail::RFC2822Obsolete::ObsReceived0
  def CRLF; end
  def name_val_list; end
end

module Mail::RFC2822Obsolete::ObsReferences0
  def CRLF; end
end

module Mail::RFC2822Obsolete::ObsReplyTo0
  def CRLF; end
  def mailbox_list; end
end

module Mail::RFC2822Obsolete::ObsResentBcc0
  def CRLF; end
end

module Mail::RFC2822Obsolete::ObsResentCc0
  def CRLF; end
  def address_list; end
end

module Mail::RFC2822Obsolete::ObsResentDate0
  def CRLF; end
  def date_time; end
end

module Mail::RFC2822Obsolete::ObsResentFrom0
  def CRLF; end
  def mailbox_list; end
end

module Mail::RFC2822Obsolete::ObsResentMid0
  def CRLF; end
  def msg_id; end
end

module Mail::RFC2822Obsolete::ObsResentRply0
  def CRLF; end
  def address_list; end
end

module Mail::RFC2822Obsolete::ObsResentSend0
  def CRLF; end
  def mailbox; end
end

module Mail::RFC2822Obsolete::ObsResentTo0
  def CRLF; end
  def address_list; end
end

module Mail::RFC2822Obsolete::ObsReturn0
  def CRLF; end
  def path; end
end

module Mail::RFC2822Obsolete::ObsRoute0
  def obs_domain_list; end
end

module Mail::RFC2822Obsolete::ObsSecond0
  def DIGIT1; end
  def DIGIT2; end
end

module Mail::RFC2822Obsolete::ObsSecond1
end

module Mail::RFC2822Obsolete::ObsSender0
  def CRLF; end
  def mailbox; end
end

module Mail::RFC2822Obsolete::ObsSubject0
  def CRLF; end
  def unstructured; end
end

module Mail::RFC2822Obsolete::ObsText0
  def obs_char; end
end

module Mail::RFC2822Obsolete::ObsText1
end

module Mail::RFC2822Obsolete::ObsTo0
  def CRLF; end
  def address_list; end
end

module Mail::RFC2822Obsolete::ObsYear0
  def DIGIT1; end
  def DIGIT2; end
end

module Mail::RFC2822Obsolete::ObsYear1
end

class Mail::RFC2822ObsoleteParser < ::Treetop::Runtime::CompiledParser
  include(::Mail::RFC2822Obsolete)
end

class Mail::RFC2822Parser < ::Treetop::Runtime::CompiledParser
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)
end

module Mail::Received
  include(::Treetop::Runtime)
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)

  def _nt_primary; end
  def root; end
end

module Mail::Received::Primary0
  def date_time; end
  def name_val_list; end
end

class Mail::ReceivedElement
  include(::Mail::Patterns)
  include(::Mail::Utilities)

  def initialize(string); end

  def date_time; end
  def info; end
  def to_s(*args); end
end

class Mail::ReceivedField < ::Mail::StructuredField
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def date_time; end
  def decoded; end
  def element; end
  def encoded; end
  def formatted_date; end
  def info; end
  def parse(val = T.unsafe(nil)); end
end

Mail::ReceivedField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ReceivedField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ReceivedParser < ::Treetop::Runtime::CompiledParser
  include(::Mail::RFC2822Obsolete)
  include(::Mail::RFC2822)
  include(::Mail::Received)
end

class Mail::ReferencesField < ::Mail::StructuredField
  include(::Mail::CommonMessageId)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def encoded; end
end

Mail::ReferencesField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ReferencesField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ReplyToField < ::Mail::StructuredField
  include(::Mail::CommonAddress)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def encoded; end
end

Mail::ReplyToField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ReplyToField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ResentBccField < ::Mail::StructuredField
  include(::Mail::CommonAddress)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def encoded; end
end

Mail::ResentBccField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ResentBccField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ResentCcField < ::Mail::StructuredField
  include(::Mail::CommonAddress)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def encoded; end
end

Mail::ResentCcField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ResentCcField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ResentDateField < ::Mail::StructuredField
  include(::Mail::CommonDate)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def encoded; end
end

Mail::ResentDateField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ResentDateField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ResentFromField < ::Mail::StructuredField
  include(::Mail::CommonAddress)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def encoded; end
end

Mail::ResentFromField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ResentFromField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ResentMessageIdField < ::Mail::StructuredField
  include(::Mail::CommonMessageId)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def encoded; end
  def name; end
end

Mail::ResentMessageIdField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ResentMessageIdField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ResentSenderField < ::Mail::StructuredField
  include(::Mail::CommonAddress)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def address; end
  def addresses; end
  def decoded; end
  def encoded; end
end

Mail::ResentSenderField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ResentSenderField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::ResentToField < ::Mail::StructuredField
  include(::Mail::CommonAddress)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def encoded; end
end

Mail::ResentToField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ResentToField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::Retriever
  def all(options = T.unsafe(nil), &block); end
  def find_and_delete(options = T.unsafe(nil), &block); end
  def first(options = T.unsafe(nil), &block); end
  def last(options = T.unsafe(nil), &block); end
end

class Mail::ReturnPathField < ::Mail::StructuredField
  include(::Mail::CommonAddress)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def address; end
  def decoded; end
  def default; end
  def encoded; end
end

Mail::ReturnPathField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ReturnPathField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::Ruby19
  class << self
    def b_value_decode(str); end
    def b_value_encode(str, encoding = T.unsafe(nil)); end
    def bracket(str); end
    def decode_base64(str); end
    def encode_base64(str); end
    def escape_bracket(str); end
    def escape_paren(str); end
    def get_constant(klass, string); end
    def has_constant?(klass, string); end
    def param_decode(str, encoding); end
    def param_encode(str); end
    def paren(str); end
    def pick_encoding(charset); end
    def q_value_decode(str); end
    def q_value_encode(str, encoding = T.unsafe(nil)); end
    def uri_parser; end
  end
end

Mail::RubyVer = Mail::Ruby19

class Mail::SMTP
  def initialize(values); end

  def deliver!(mail); end
  def settings; end
  def settings=(_); end

  private

  def ssl_context; end
end

class Mail::SMTPConnection
  def initialize(values); end

  def deliver!(mail); end
  def settings; end
  def settings=(_); end
  def smtp; end
  def smtp=(_); end
end

class Mail::SenderField < ::Mail::StructuredField
  include(::Mail::CommonAddress)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def address; end
  def addresses; end
  def decoded; end
  def default; end
  def encoded; end
end

Mail::SenderField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::SenderField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::Sendmail
  def initialize(values); end

  def deliver!(mail); end
  def settings; end
  def settings=(_); end

  class << self
    def call(path, arguments, destinations, encoded_message); end
    def popen(command, &block); end
    def shellquote(address); end
  end
end

Mail::Sendmail::DEFAULTS = T.let(T.unsafe(nil), Hash)

class Mail::StructuredField
  include(::Mail::CommonField)
  include(::Mail::Patterns)
  include(::Mail::Utilities)

  def initialize(name = T.unsafe(nil), value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def charset; end
  def charset=(val); end
  def default; end
  def errors; end
end

class Mail::SubjectField < ::Mail::UnstructuredField
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end
end

Mail::SubjectField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::SubjectField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::TestMailer
  def initialize(values); end

  def deliver!(mail); end
  def settings; end
  def settings=(_); end

  class << self
    def deliveries; end
    def deliveries=(val); end
  end
end

class Mail::TestRetriever < ::Mail::Retriever
  def initialize(values); end

  def find(options = T.unsafe(nil), &block); end

  class << self
    def emails; end
    def emails=(val); end
  end
end

class Mail::ToField < ::Mail::StructuredField
  include(::Mail::CommonAddress)

  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  def decoded; end
  def encoded; end
end

Mail::ToField::CAPITALIZED_FIELD = T.let(T.unsafe(nil), String)

Mail::ToField::FIELD_NAME = T.let(T.unsafe(nil), String)

class Mail::UnknownEncodingType < ::StandardError
end

class Mail::UnstructuredField
  include(::Mail::CommonField)
  include(::Mail::Patterns)
  include(::Mail::Utilities)

  def initialize(name, value, charset = T.unsafe(nil)); end

  def charset; end
  def charset=(_); end
  def decoded; end
  def default; end
  def encoded; end
  def errors; end
  def parse; end

  private

  def do_decode; end
  def do_encode; end
  def encode(value); end
  def encode_crlf(value); end
  def fold(prepend = T.unsafe(nil)); end
  def normalized_encoding; end
  def wrap_lines(name, folded_lines); end
  def wrapped_value; end
end

module Mail::Utilities
  include(::Mail::Patterns)

  def atom_safe?(str); end
  def bracket(str); end
  def capitalize_field(str); end
  def constantize(str); end
  def dasherize(str); end
  def dquote(str); end
  def escape_paren(str); end
  def map_lines(str, &block); end
  def map_with_index(enum, &block); end
  def match_to_s(obj1, obj2); end
  def paren(str); end
  def quote_atom(str); end
  def quote_phrase(str); end
  def quote_token(str); end
  def token_safe?(str); end
  def unbracket(str); end
  def underscoreize(str); end
  def unparen(str); end
  def unquote(str); end
  def uri_escape(str); end
  def uri_parser; end
  def uri_unescape(str); end
end

module Mail::VERSION
  class << self
    def version; end
  end
end

Mail::VERSION::MAJOR = T.let(T.unsafe(nil), String)

Mail::VERSION::MINOR = T.let(T.unsafe(nil), String)

Mail::VERSION::PATCH = T.let(T.unsafe(nil), String)

Mail::VERSION::STRING = T.let(T.unsafe(nil), String)

class NilClass
  include(::JSON::Ext::Generator::GeneratorMethods::NilClass)

  def to_crlf; end
  def to_lf; end
end

class String
  include(::Comparable)
  include(::Colorize::InstanceMethods)
  include(::JSON::Ext::Generator::GeneratorMethods::String)
  extend(::Colorize::ClassMethods)
  extend(::JSON::Ext::Generator::GeneratorMethods::String::Extend)

  def not_ascii_only?; end
  def to_crlf; end
  def to_lf; end
end

String::BLANK_RE = T.let(T.unsafe(nil), Regexp)
