# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `arel` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module Arel
  class << self
    def spatial(arg); end
    def sql(raw_sql); end
    def star; end
  end
end

module Arel::AliasPredication
  def as(other); end
end

Arel::Attribute = Arel::Attributes::Attribute

module Arel::Attributes
  class << self
    def for(column); end
  end
end

class Arel::Attributes::Attribute < ::Struct
  include(::Arel::Expressions)
  include(::Arel::Predications)
  include(::Arel::AliasPredication)
  include(::Arel::OrderPredications)
  include(::Arel::Math)
  include(::RGeo::ActiveRecord::SpatialExpressions)

  def lower; end
end

class Arel::Attributes::Boolean < ::Arel::Attributes::Attribute
end

class Arel::Attributes::Decimal < ::Arel::Attributes::Attribute
end

class Arel::Attributes::Float < ::Arel::Attributes::Attribute
end

class Arel::Attributes::Integer < ::Arel::Attributes::Attribute
end

class Arel::Attributes::String < ::Arel::Attributes::Attribute
end

class Arel::Attributes::Time < ::Arel::Attributes::Attribute
end

class Arel::Attributes::Undefined < ::Arel::Attributes::Attribute
end

module Arel::Compatibility
end

class Arel::Compatibility::Wheres
  include(::Enumerable)

  def initialize(engine, collection); end

  def each; end
end

module Arel::Compatibility::Wheres::Value
  def name; end
  def value; end
  def visitor; end
  def visitor=(_); end
end

module Arel::Crud
  def compile_delete; end
  def compile_insert(values); end
  def compile_update(values, pk); end
  def create_insert; end
end

class Arel::DeleteManager < ::Arel::TreeManager
  def initialize(engine); end

  def from(relation); end
  def wheres=(list); end
end

module Arel::Expression
  include(::Arel::OrderPredications)
end

module Arel::Expressions
  def average; end
  def count(distinct = T.unsafe(nil)); end
  def extract(field); end
  def maximum; end
  def minimum; end
  def sum; end
end

module Arel::FactoryMethods
  def create_and(clauses); end
  def create_false; end
  def create_join(to, constraint = T.unsafe(nil), klass = T.unsafe(nil)); end
  def create_on(expr); end
  def create_string_join(to); end
  def create_table_alias(relation, name); end
  def create_true; end
  def grouping(expr); end
  def lower(column); end
end

Arel::InnerJoin = Arel::Nodes::InnerJoin

class Arel::InsertManager < ::Arel::TreeManager
  def initialize(engine); end

  def columns; end
  def create_values(values, columns); end
  def insert(fields); end
  def into(table); end
  def values=(val); end
end

module Arel::Math
  def *(other); end
  def +(other); end
  def -(other); end
  def /(other); end
end

Arel::Node = Arel::Nodes::Node

module Arel::Nodes
end

class Arel::Nodes::Addition < ::Arel::Nodes::InfixOperation
  def initialize(left, right); end
end

class Arel::Nodes::And < ::Arel::Nodes::Node
  def initialize(children, right = T.unsafe(nil)); end

  def ==(other); end
  def children; end
  def eql?(other); end
  def hash; end
  def left; end
  def right; end
end

class Arel::Nodes::As < ::Arel::Nodes::Binary
end

class Arel::Nodes::Ascending < ::Arel::Nodes::Ordering
  def ascending?; end
  def descending?; end
  def direction; end
  def reverse; end
end

class Arel::Nodes::Assignment < ::Arel::Nodes::Binary
end

class Arel::Nodes::Avg < ::Arel::Nodes::Function
end

class Arel::Nodes::Between < ::Arel::Nodes::Binary
end

class Arel::Nodes::Bin < ::Arel::Nodes::Unary
end

class Arel::Nodes::Binary < ::Arel::Nodes::Node
  def initialize(left, right); end

  def ==(other); end
  def eql?(other); end
  def hash; end
  def left; end
  def left=(_); end
  def right; end
  def right=(_); end

  private

  def initialize_copy(other); end
end

class Arel::Nodes::BindParam < ::Arel::Nodes::SqlLiteral
end

class Arel::Nodes::Count < ::Arel::Nodes::Function
  def initialize(expr, distinct = T.unsafe(nil), aliaz = T.unsafe(nil)); end
end

class Arel::Nodes::CurrentRow < ::Arel::Nodes::Node
  def eql?(other); end
  def hash; end
end

class Arel::Nodes::DeleteStatement < ::Arel::Nodes::Binary
  def initialize(relation = T.unsafe(nil), wheres = T.unsafe(nil)); end

  def relation; end
  def relation=(_); end
  def wheres; end
  def wheres=(_); end

  private

  def initialize_copy(other); end
end

class Arel::Nodes::Descending < ::Arel::Nodes::Ordering
  def ascending?; end
  def descending?; end
  def direction; end
  def reverse; end
end

class Arel::Nodes::Distinct < ::Arel::Nodes::Node
  def eql?(other); end
  def hash; end
end

class Arel::Nodes::DistinctOn < ::Arel::Nodes::Unary
end

class Arel::Nodes::Division < ::Arel::Nodes::InfixOperation
  def initialize(left, right); end
end

class Arel::Nodes::DoesNotMatch < ::Arel::Nodes::Binary
end

class Arel::Nodes::Equality < ::Arel::Nodes::Binary
  def operand1; end
  def operand2; end
  def operator; end
end

class Arel::Nodes::Except < ::Arel::Nodes::Binary
end

class Arel::Nodes::Exists < ::Arel::Nodes::Function
end

class Arel::Nodes::Extract < ::Arel::Nodes::Unary
  include(::Arel::OrderPredications)
  include(::Arel::Expression)
  include(::Arel::Predications)

  def initialize(expr, field, aliaz = T.unsafe(nil)); end

  def ==(other); end
  def alias; end
  def alias=(_); end
  def as(aliaz); end
  def eql?(other); end
  def field; end
  def field=(_); end
  def hash; end
end

class Arel::Nodes::False < ::Arel::Nodes::Node
  def eql?(other); end
  def hash; end
end

class Arel::Nodes::Following < ::Arel::Nodes::Unary
  def initialize(expr = T.unsafe(nil)); end
end

class Arel::Nodes::Function < ::Arel::Nodes::Node
  include(::Arel::OrderPredications)
  include(::Arel::Expression)
  include(::Arel::Predications)
  include(::Arel::WindowPredications)

  def initialize(expr, aliaz = T.unsafe(nil)); end

  def alias; end
  def alias=(_); end
  def as(aliaz); end
  def distinct; end
  def distinct=(_); end
  def eql?(other); end
  def expressions; end
  def expressions=(_); end
  def hash; end
end

class Arel::Nodes::GreaterThan < ::Arel::Nodes::Binary
end

class Arel::Nodes::GreaterThanOrEqual < ::Arel::Nodes::Binary
end

class Arel::Nodes::Group < ::Arel::Nodes::Unary
end

class Arel::Nodes::Grouping < ::Arel::Nodes::Unary
  include(::Arel::Predications)
end

class Arel::Nodes::Having < ::Arel::Nodes::Unary
end

class Arel::Nodes::In < ::Arel::Nodes::Equality
end

class Arel::Nodes::InfixOperation < ::Arel::Nodes::Binary
  include(::Arel::Expressions)
  include(::Arel::Predications)
  include(::Arel::OrderPredications)
  include(::Arel::AliasPredication)
  include(::Arel::Math)

  def initialize(operator, left, right); end

  def operator; end
end

class Arel::Nodes::InnerJoin < ::Arel::Nodes::Join
end

class Arel::Nodes::InsertStatement < ::Arel::Nodes::Node
  def initialize; end

  def ==(other); end
  def columns; end
  def columns=(_); end
  def eql?(other); end
  def hash; end
  def relation; end
  def relation=(_); end
  def values; end
  def values=(_); end

  private

  def initialize_copy(other); end
end

class Arel::Nodes::Intersect < ::Arel::Nodes::Binary
end

class Arel::Nodes::Join < ::Arel::Nodes::Binary
end

class Arel::Nodes::JoinSource < ::Arel::Nodes::Binary
  def initialize(single_source, joinop = T.unsafe(nil)); end

  def empty?; end
end

class Arel::Nodes::LessThan < ::Arel::Nodes::Binary
end

class Arel::Nodes::LessThanOrEqual < ::Arel::Nodes::Binary
end

class Arel::Nodes::Limit < ::Arel::Nodes::Unary
end

class Arel::Nodes::Lock < ::Arel::Nodes::Unary
end

class Arel::Nodes::Matches < ::Arel::Nodes::Binary
end

class Arel::Nodes::Max < ::Arel::Nodes::Function
end

class Arel::Nodes::Min < ::Arel::Nodes::Function
end

class Arel::Nodes::Multiplication < ::Arel::Nodes::InfixOperation
  def initialize(left, right); end
end

class Arel::Nodes::NamedFunction < ::Arel::Nodes::Function
  def initialize(name, expr, aliaz = T.unsafe(nil)); end

  def ==(other); end
  def eql?(other); end
  def hash; end
  def name; end
  def name=(_); end
end

class Arel::Nodes::NamedWindow < ::Arel::Nodes::Window
  def initialize(name); end

  def ==(other); end
  def eql?(other); end
  def hash; end
  def name; end
  def name=(_); end

  private

  def initialize_copy(other); end
end

class Arel::Nodes::Node
  include(::Arel::FactoryMethods)
  include(::Enumerable)

  def and(right); end
  def each(&block); end
  def not; end
  def or(right); end
  def to_sql(engine = T.unsafe(nil)); end
end

class Arel::Nodes::Not < ::Arel::Nodes::Unary
end

class Arel::Nodes::NotEqual < ::Arel::Nodes::Binary
end

class Arel::Nodes::NotIn < ::Arel::Nodes::Binary
end

class Arel::Nodes::Offset < ::Arel::Nodes::Unary
end

class Arel::Nodes::On < ::Arel::Nodes::Unary
end

class Arel::Nodes::Or < ::Arel::Nodes::Binary
end

class Arel::Nodes::Ordering < ::Arel::Nodes::Unary
end

class Arel::Nodes::OuterJoin < ::Arel::Nodes::Join
end

class Arel::Nodes::Over < ::Arel::Nodes::Binary
  include(::Arel::AliasPredication)

  def initialize(left, right = T.unsafe(nil)); end

  def operator; end
end

class Arel::Nodes::Preceding < ::Arel::Nodes::Unary
  def initialize(expr = T.unsafe(nil)); end
end

class Arel::Nodes::Range < ::Arel::Nodes::Unary
  def initialize(expr = T.unsafe(nil)); end
end

class Arel::Nodes::Rows < ::Arel::Nodes::Unary
  def initialize(expr = T.unsafe(nil)); end
end

class Arel::Nodes::SelectCore < ::Arel::Nodes::Node
  def initialize; end

  def ==(other); end
  def eql?(other); end
  def from; end
  def from=(value); end
  def froms; end
  def froms=(value); end
  def groups; end
  def groups=(_); end
  def hash; end
  def having; end
  def having=(_); end
  def projections; end
  def projections=(_); end
  def set_quantifier; end
  def set_quantifier=(_); end
  def source; end
  def source=(_); end
  def top; end
  def top=(_); end
  def wheres; end
  def wheres=(_); end
  def windows; end
  def windows=(_); end

  private

  def initialize_copy(other); end
end

class Arel::Nodes::SelectStatement < ::Arel::Nodes::Node
  def initialize(cores = T.unsafe(nil)); end

  def ==(other); end
  def cores; end
  def eql?(other); end
  def hash; end
  def limit; end
  def limit=(_); end
  def lock; end
  def lock=(_); end
  def offset; end
  def offset=(_); end
  def orders; end
  def orders=(_); end
  def with; end
  def with=(_); end

  private

  def initialize_copy(other); end
end

class Arel::Nodes::SqlLiteral < ::String
  include(::Arel::Expressions)
  include(::Arel::Predications)
  include(::Arel::AliasPredication)
  include(::Arel::OrderPredications)

  def encode_with(coder); end
end

class Arel::Nodes::StringJoin < ::Arel::Nodes::Join
  def initialize(left, right = T.unsafe(nil)); end
end

class Arel::Nodes::Subtraction < ::Arel::Nodes::InfixOperation
  def initialize(left, right); end
end

class Arel::Nodes::Sum < ::Arel::Nodes::Function
end

class Arel::Nodes::TableAlias < ::Arel::Nodes::Binary
  def [](name); end
  def engine; end
  def name; end
  def relation; end
  def table_alias; end
  def table_name; end
end

class Arel::Nodes::Top < ::Arel::Nodes::Unary
end

class Arel::Nodes::True < ::Arel::Nodes::Node
  def eql?(other); end
  def hash; end
end

class Arel::Nodes::Unary < ::Arel::Nodes::Node
  def initialize(expr); end

  def ==(other); end
  def eql?(other); end
  def expr; end
  def expr=(_); end
  def hash; end
  def value; end
end

class Arel::Nodes::Union < ::Arel::Nodes::Binary
end

class Arel::Nodes::UnionAll < ::Arel::Nodes::Binary
end

class Arel::Nodes::UnqualifiedColumn < ::Arel::Nodes::Unary
  def attribute; end
  def attribute=(_); end
  def column; end
  def name; end
  def relation; end
end

class Arel::Nodes::UpdateStatement < ::Arel::Nodes::Node
  def initialize; end

  def ==(other); end
  def eql?(other); end
  def hash; end
  def key; end
  def key=(_); end
  def limit; end
  def limit=(_); end
  def orders; end
  def orders=(_); end
  def relation; end
  def relation=(_); end
  def values; end
  def values=(_); end
  def wheres; end
  def wheres=(_); end

  private

  def initialize_copy(other); end
end

class Arel::Nodes::Values < ::Arel::Nodes::Binary
  def initialize(exprs, columns = T.unsafe(nil)); end

  def columns; end
  def columns=(_); end
  def expressions; end
  def expressions=(_); end
end

class Arel::Nodes::Window < ::Arel::Nodes::Node
  include(::Arel::OrderPredications)
  include(::Arel::Expression)

  def initialize; end

  def ==(other); end
  def eql?(other); end
  def frame(expr); end
  def framing; end
  def framing=(_); end
  def hash; end
  def order(*expr); end
  def orders; end
  def orders=(_); end
  def range(expr = T.unsafe(nil)); end
  def rows(expr = T.unsafe(nil)); end

  private

  def initialize_copy(other); end
end

class Arel::Nodes::With < ::Arel::Nodes::Unary
  def children; end
end

class Arel::Nodes::WithRecursive < ::Arel::Nodes::With
end

module Arel::OrderPredications
  def asc; end
  def desc; end
end

Arel::OuterJoin = Arel::Nodes::OuterJoin

module Arel::Predications
  def does_not_match(other); end
  def does_not_match_all(others); end
  def does_not_match_any(others); end
  def eq(other); end
  def eq_all(others); end
  def eq_any(others); end
  def gt(right); end
  def gt_all(others); end
  def gt_any(others); end
  def gteq(right); end
  def gteq_all(others); end
  def gteq_any(others); end
  def in(other); end
  def in_all(others); end
  def in_any(others); end
  def lt(right); end
  def lt_all(others); end
  def lt_any(others); end
  def lteq(right); end
  def lteq_all(others); end
  def lteq_any(others); end
  def matches(other); end
  def matches_all(others); end
  def matches_any(others); end
  def not_eq(other); end
  def not_eq_all(others); end
  def not_eq_any(others); end
  def not_in(other); end
  def not_in_all(others); end
  def not_in_any(others); end

  private

  def grouping_all(method_id, others); end
  def grouping_any(method_id, others); end
end

class Arel::SelectManager < ::Arel::TreeManager
  include(::Arel::Crud)

  def initialize(engine, table = T.unsafe(nil)); end

  def as(other); end
  def constraints; end
  def distinct(value = T.unsafe(nil)); end
  def except(other); end
  def exists; end
  def from(table); end
  def froms; end
  def group(*columns); end
  def having(*exprs); end
  def intersect(other); end
  def join(relation, klass = T.unsafe(nil)); end
  def join_sources; end
  def join_sql; end
  def joins(manager); end
  def limit; end
  def limit=(limit); end
  def lock(locking = T.unsafe(nil)); end
  def locked; end
  def minus(other); end
  def offset; end
  def offset=(amount); end
  def on(*exprs); end
  def order(*expr); end
  def order_clauses; end
  def orders; end
  def project(*projections); end
  def projections; end
  def projections=(projections); end
  def skip(amount); end
  def source; end
  def take(limit); end
  def taken; end
  def to_a; end
  def union(operation, other = T.unsafe(nil)); end
  def where_sql; end
  def window(name); end
  def with(*subqueries); end

  private

  def collapse(exprs, existing = T.unsafe(nil)); end
  def initialize_copy(other); end
end

class Arel::SelectManager::Row < ::Struct
  def id; end
  def method_missing(name, *args); end
end

Arel::SelectManager::STRING_OR_SYMBOL_CLASS = T.let(T.unsafe(nil), Array)

module Arel::Sql
end

class Arel::Sql::Engine
  class << self
    def new(thing); end
  end
end

class Arel::SqlLiteral < ::Arel::Nodes::SqlLiteral
end

class Arel::Table
  include(::Arel::Crud)
  include(::Arel::FactoryMethods)

  def initialize(name, engine = T.unsafe(nil)); end

  def ==(other); end
  def [](name); end
  def alias(name = T.unsafe(nil)); end
  def aliases; end
  def aliases=(_); end
  def engine; end
  def engine=(_); end
  def eql?(other); end
  def from(table); end
  def group(*columns); end
  def hash; end
  def having(expr); end
  def insert_manager; end
  def join(relation, klass = T.unsafe(nil)); end
  def joins(manager); end
  def name; end
  def name=(_); end
  def order(*expr); end
  def primary_key; end
  def project(*things); end
  def select_manager; end
  def skip(amount); end
  def table_alias; end
  def table_alias=(_); end
  def table_name; end
  def take(amount); end
  def where(condition); end

  private

  def attributes_for(columns); end

  class << self
    def engine; end
    def engine=(_); end
  end
end

class Arel::TreeManager
  include(::Arel::FactoryMethods)

  def initialize(engine); end

  def ast; end
  def bind_values; end
  def bind_values=(_); end
  def engine; end
  def to_dot; end
  def to_sql; end
  def visitor; end
  def where(expr); end

  private

  def initialize_copy(other); end
end

class Arel::UpdateManager < ::Arel::TreeManager
  def initialize(engine); end

  def key; end
  def key=(key); end
  def order(*expr); end
  def set(values); end
  def table(table); end
  def take(limit); end
  def where(expr); end
  def wheres=(exprs); end
end

Arel::VERSION = T.let(T.unsafe(nil), String)

module Arel::Visitors
  class << self
    def for(engine); end
    def visitor_for(engine); end
  end
end

module Arel::Visitors::BindVisitor
  def initialize(target); end

  def accept(node, &block); end

  private

  def visit_Arel_Nodes_Assignment(o, a); end
  def visit_Arel_Nodes_BindParam(o, a); end
end

class Arel::Visitors::DepthFirst < ::Arel::Visitors::Visitor
  def initialize(block = T.unsafe(nil)); end


  private

  def binary(o, a); end
  def function(o, a); end
  def nary(o, a); end
  def terminal(o, a); end
  def unary(o, a); end
  def visit(o, a = T.unsafe(nil)); end
  def visit_ActiveSupport_Multibyte_Chars(o, a); end
  def visit_ActiveSupport_StringInquirer(o, a); end
  def visit_Arel_Attribute(o, a); end
  def visit_Arel_Attributes_Attribute(o, a); end
  def visit_Arel_Attributes_Boolean(o, a); end
  def visit_Arel_Attributes_Decimal(o, a); end
  def visit_Arel_Attributes_Float(o, a); end
  def visit_Arel_Attributes_Integer(o, a); end
  def visit_Arel_Attributes_String(o, a); end
  def visit_Arel_Attributes_Time(o, a); end
  def visit_Arel_Nodes_And(o, a); end
  def visit_Arel_Nodes_As(o, a); end
  def visit_Arel_Nodes_Ascending(o, a); end
  def visit_Arel_Nodes_Assignment(o, a); end
  def visit_Arel_Nodes_Avg(o, a); end
  def visit_Arel_Nodes_Between(o, a); end
  def visit_Arel_Nodes_BindParam(o, a); end
  def visit_Arel_Nodes_Count(o, a); end
  def visit_Arel_Nodes_DeleteStatement(o, a); end
  def visit_Arel_Nodes_Descending(o, a); end
  def visit_Arel_Nodes_DoesNotMatch(o, a); end
  def visit_Arel_Nodes_Equality(o, a); end
  def visit_Arel_Nodes_Exists(o, a); end
  def visit_Arel_Nodes_GreaterThan(o, a); end
  def visit_Arel_Nodes_GreaterThanOrEqual(o, a); end
  def visit_Arel_Nodes_Group(o, a); end
  def visit_Arel_Nodes_Grouping(o, a); end
  def visit_Arel_Nodes_Having(o, a); end
  def visit_Arel_Nodes_In(o, a); end
  def visit_Arel_Nodes_InfixOperation(o, a); end
  def visit_Arel_Nodes_InnerJoin(o, a); end
  def visit_Arel_Nodes_InsertStatement(o, a); end
  def visit_Arel_Nodes_JoinSource(o, a); end
  def visit_Arel_Nodes_LessThan(o, a); end
  def visit_Arel_Nodes_LessThanOrEqual(o, a); end
  def visit_Arel_Nodes_Limit(o, a); end
  def visit_Arel_Nodes_Lock(o, a); end
  def visit_Arel_Nodes_Matches(o, a); end
  def visit_Arel_Nodes_Max(o, a); end
  def visit_Arel_Nodes_Min(o, a); end
  def visit_Arel_Nodes_NamedFunction(o, a); end
  def visit_Arel_Nodes_Node(o, a); end
  def visit_Arel_Nodes_Not(o, a); end
  def visit_Arel_Nodes_NotEqual(o, a); end
  def visit_Arel_Nodes_NotIn(o, a); end
  def visit_Arel_Nodes_Offset(o, a); end
  def visit_Arel_Nodes_On(o, a); end
  def visit_Arel_Nodes_Or(o, a); end
  def visit_Arel_Nodes_Ordering(o, a); end
  def visit_Arel_Nodes_OuterJoin(o, a); end
  def visit_Arel_Nodes_SelectCore(o, a); end
  def visit_Arel_Nodes_SelectStatement(o, a); end
  def visit_Arel_Nodes_SqlLiteral(o, a); end
  def visit_Arel_Nodes_StringJoin(o, a); end
  def visit_Arel_Nodes_Sum(o, a); end
  def visit_Arel_Nodes_TableAlias(o, a); end
  def visit_Arel_Nodes_Top(o, a); end
  def visit_Arel_Nodes_UnqualifiedColumn(o, a); end
  def visit_Arel_Nodes_UpdateStatement(o, a); end
  def visit_Arel_Nodes_Values(o, a); end
  def visit_Arel_Nodes_Window(o, a); end
  def visit_Arel_SqlLiteral(o, a); end
  def visit_Arel_Table(o, a); end
  def visit_Array(o, a); end
  def visit_BigDecimal(o, a); end
  def visit_Bignum(o, a); end
  def visit_Class(o, a); end
  def visit_Date(o, a); end
  def visit_DateTime(o, a); end
  def visit_FalseClass(o, a); end
  def visit_Fixnum(o, a); end
  def visit_Float(o, a); end
  def visit_Hash(o, a); end
  def visit_NilClass(o, a); end
  def visit_RGeo_Cartesian_BoundingBox(o, a); end
  def visit_RGeo_Feature_Instance(o, a); end
  def visit_String(o, a); end
  def visit_Symbol(o, a); end
  def visit_Time(o, a); end
  def visit_TrueClass(o, a); end
end

class Arel::Visitors::Dot < ::Arel::Visitors::Visitor
  def initialize; end

  def accept(object); end

  private

  def binary(o, a); end
  def edge(name); end
  def extract(o, a); end
  def function(o, a); end
  def named_window(o, a); end
  def nary(o, a); end
  def quote(string); end
  def to_dot; end
  def unary(o, a); end
  def visit(o, a = T.unsafe(nil)); end
  def visit_Arel_Attribute(o, a); end
  def visit_Arel_Attributes_Attribute(o, a); end
  def visit_Arel_Attributes_Boolean(o, a); end
  def visit_Arel_Attributes_Float(o, a); end
  def visit_Arel_Attributes_Integer(o, a); end
  def visit_Arel_Attributes_String(o, a); end
  def visit_Arel_Attributes_Time(o, a); end
  def visit_Arel_Nodes_And(o, a); end
  def visit_Arel_Nodes_As(o, a); end
  def visit_Arel_Nodes_Assignment(o, a); end
  def visit_Arel_Nodes_Avg(o, a); end
  def visit_Arel_Nodes_Between(o, a); end
  def visit_Arel_Nodes_BindParam(o, a); end
  def visit_Arel_Nodes_Count(o, a); end
  def visit_Arel_Nodes_DeleteStatement(o, a); end
  def visit_Arel_Nodes_DoesNotMatch(o, a); end
  def visit_Arel_Nodes_Equality(o, a); end
  def visit_Arel_Nodes_Exists(o, a); end
  def visit_Arel_Nodes_Extract(o, a); end
  def visit_Arel_Nodes_Following(o, a); end
  def visit_Arel_Nodes_GreaterThan(o, a); end
  def visit_Arel_Nodes_GreaterThanOrEqual(o, a); end
  def visit_Arel_Nodes_Group(o, a); end
  def visit_Arel_Nodes_Grouping(o, a); end
  def visit_Arel_Nodes_Having(o, a); end
  def visit_Arel_Nodes_In(o, a); end
  def visit_Arel_Nodes_InnerJoin(o, a); end
  def visit_Arel_Nodes_InsertStatement(o, a); end
  def visit_Arel_Nodes_JoinSource(o, a); end
  def visit_Arel_Nodes_LessThan(o, a); end
  def visit_Arel_Nodes_LessThanOrEqual(o, a); end
  def visit_Arel_Nodes_Limit(o, a); end
  def visit_Arel_Nodes_Matches(o, a); end
  def visit_Arel_Nodes_Max(o, a); end
  def visit_Arel_Nodes_Min(o, a); end
  def visit_Arel_Nodes_NamedFunction(o, a); end
  def visit_Arel_Nodes_NamedWindow(o, a); end
  def visit_Arel_Nodes_Not(o, a); end
  def visit_Arel_Nodes_NotEqual(o, a); end
  def visit_Arel_Nodes_NotIn(o, a); end
  def visit_Arel_Nodes_Offset(o, a); end
  def visit_Arel_Nodes_On(o, a); end
  def visit_Arel_Nodes_Or(o, a); end
  def visit_Arel_Nodes_Ordering(o, a); end
  def visit_Arel_Nodes_OuterJoin(o, a); end
  def visit_Arel_Nodes_Over(o, a); end
  def visit_Arel_Nodes_Preceding(o, a); end
  def visit_Arel_Nodes_Range(o, a); end
  def visit_Arel_Nodes_Rows(o, a); end
  def visit_Arel_Nodes_SelectCore(o, a); end
  def visit_Arel_Nodes_SelectStatement(o, a); end
  def visit_Arel_Nodes_SqlLiteral(o, a); end
  def visit_Arel_Nodes_StringJoin(o, a); end
  def visit_Arel_Nodes_Sum(o, a); end
  def visit_Arel_Nodes_TableAlias(o, a); end
  def visit_Arel_Nodes_Top(o, a); end
  def visit_Arel_Nodes_UnqualifiedColumn(o, a); end
  def visit_Arel_Nodes_UpdateStatement(o, a); end
  def visit_Arel_Nodes_Values(o, a); end
  def visit_Arel_Nodes_Window(o, a); end
  def visit_Arel_SqlLiteral(o, a); end
  def visit_Arel_Table(o, a); end
  def visit_Array(o, a); end
  def visit_BigDecimal(o, a); end
  def visit_Date(o, a); end
  def visit_DateTime(o, a); end
  def visit_FalseClass(o, a); end
  def visit_Fixnum(o, a); end
  def visit_Float(o, a); end
  def visit_Hash(o, a); end
  def visit_NilClass(o, a); end
  def visit_RGeo_Cartesian_BoundingBox(o, a); end
  def visit_RGeo_Feature_Instance(o, a); end
  def visit_String(o, a); end
  def visit_Symbol(o, a); end
  def visit_Time(o, a); end
  def visit_TrueClass(o, a); end
  def visit_edge(o, a, method); end
  def window(o, a); end
  def with_node(node); end
end

class Arel::Visitors::Dot::Edge < ::Struct
end

class Arel::Visitors::Dot::Node
  def initialize(name, id, fields = T.unsafe(nil)); end

  def fields; end
  def fields=(_); end
  def id; end
  def id=(_); end
  def name; end
  def name=(_); end
end

Arel::Visitors::ENGINE_VISITORS = T.let(T.unsafe(nil), Hash)

class Arel::Visitors::IBM_DB < ::Arel::Visitors::ToSql

  private

  def visit_Arel_Nodes_Limit(o, a); end
end

class Arel::Visitors::Informix < ::Arel::Visitors::ToSql

  private

  def visit_Arel_Nodes_Limit(o, a); end
  def visit_Arel_Nodes_Offset(o, a); end
  def visit_Arel_Nodes_SelectCore(o, a); end
  def visit_Arel_Nodes_SelectStatement(o, a); end
end

module Arel::Visitors::JoinSql

  private

  def visit_Arel_Nodes_SelectCore(o, a); end
end

class Arel::Visitors::MSSQL < ::Arel::Visitors::ToSql

  private

  def determine_order_by(x, a); end
  def find_left_table_pk(o, a); end
  def get_offset_limit_clause(o); end
  def row_num_literal(order_by); end
  def select_count?(x); end
  def visit_Arel_Nodes_SelectStatement(o, a); end
  def visit_Arel_Nodes_Top(o, a); end
end

class Arel::Visitors::MySQL < ::Arel::Visitors::ToSql

  private

  def visit_Arel_Nodes_Bin(o, a); end
  def visit_Arel_Nodes_SelectCore(o, a); end
  def visit_Arel_Nodes_SelectStatement(o, a); end
  def visit_Arel_Nodes_Union(o, a, suppress_parens = T.unsafe(nil)); end
  def visit_Arel_Nodes_UpdateStatement(o, a); end
end

class Arel::Visitors::Oracle < ::Arel::Visitors::ToSql

  private

  def order_hacks(o, a); end
  def split_order_string(string); end
  def visit_Arel_Nodes_Except(o, a); end
  def visit_Arel_Nodes_Limit(o, a); end
  def visit_Arel_Nodes_Offset(o, a); end
  def visit_Arel_Nodes_SelectStatement(o, a); end
  def visit_Arel_Nodes_UpdateStatement(o, a); end
end

class Arel::Visitors::OrderClauses < ::Arel::Visitors::ToSql

  private

  def visit_Arel_Nodes_SelectStatement(o, a); end
end

Arel::Visitors::PostGISSuperclass = Arel::Visitors::PostgreSQL

class Arel::Visitors::PostgreSQL < ::Arel::Visitors::ToSql

  private

  def visit_Arel_Nodes_DistinctOn(o, a); end
  def visit_Arel_Nodes_DoesNotMatch(o, a); end
  def visit_Arel_Nodes_Matches(o, a); end
end

class Arel::Visitors::SQLite < ::Arel::Visitors::ToSql

  private

  def visit_Arel_Nodes_Lock(o, a); end
  def visit_Arel_Nodes_SelectStatement(o, a); end
end

class Arel::Visitors::ToSql < ::Arel::Visitors::Visitor
  def initialize(connection); end


  private

  def build_subselect(key, o); end
  def column_cache(table); end
  def column_for(attr); end
  def literal(o, a); end
  def quote(value, column = T.unsafe(nil)); end
  def quote_column_name(name); end
  def quote_table_name(name); end
  def quoted(o, a); end
  def table_exists?(name); end
  def visit_ActiveSupport_Multibyte_Chars(o, a); end
  def visit_ActiveSupport_StringInquirer(o, a); end
  def visit_Arel_Attributes_Attribute(o, a); end
  def visit_Arel_Attributes_Boolean(o, a); end
  def visit_Arel_Attributes_Decimal(o, a); end
  def visit_Arel_Attributes_Float(o, a); end
  def visit_Arel_Attributes_Integer(o, a); end
  def visit_Arel_Attributes_String(o, a); end
  def visit_Arel_Attributes_Time(o, a); end
  def visit_Arel_Nodes_Addition(o, a); end
  def visit_Arel_Nodes_And(o, a); end
  def visit_Arel_Nodes_As(o, a); end
  def visit_Arel_Nodes_Ascending(o, a); end
  def visit_Arel_Nodes_Assignment(o, a); end
  def visit_Arel_Nodes_Avg(o, a); end
  def visit_Arel_Nodes_Between(o, a); end
  def visit_Arel_Nodes_Bin(o, a); end
  def visit_Arel_Nodes_BindParam(o, a); end
  def visit_Arel_Nodes_Count(o, a); end
  def visit_Arel_Nodes_CurrentRow(o, a); end
  def visit_Arel_Nodes_DeleteStatement(o, a); end
  def visit_Arel_Nodes_Descending(o, a); end
  def visit_Arel_Nodes_Distinct(o, a); end
  def visit_Arel_Nodes_DistinctOn(o, a); end
  def visit_Arel_Nodes_Division(o, a); end
  def visit_Arel_Nodes_DoesNotMatch(o, a); end
  def visit_Arel_Nodes_Equality(o, a); end
  def visit_Arel_Nodes_Except(o, a); end
  def visit_Arel_Nodes_Exists(o, a); end
  def visit_Arel_Nodes_Extract(o, a); end
  def visit_Arel_Nodes_False(o, a); end
  def visit_Arel_Nodes_Following(o, a); end
  def visit_Arel_Nodes_GreaterThan(o, a); end
  def visit_Arel_Nodes_GreaterThanOrEqual(o, a); end
  def visit_Arel_Nodes_Group(o, a); end
  def visit_Arel_Nodes_Grouping(o, a); end
  def visit_Arel_Nodes_Having(o, a); end
  def visit_Arel_Nodes_In(o, a); end
  def visit_Arel_Nodes_InfixOperation(o, a); end
  def visit_Arel_Nodes_InnerJoin(o, a); end
  def visit_Arel_Nodes_InsertStatement(o, a); end
  def visit_Arel_Nodes_Intersect(o, a); end
  def visit_Arel_Nodes_JoinSource(o, a); end
  def visit_Arel_Nodes_LessThan(o, a); end
  def visit_Arel_Nodes_LessThanOrEqual(o, a); end
  def visit_Arel_Nodes_Limit(o, a); end
  def visit_Arel_Nodes_Lock(o, a); end
  def visit_Arel_Nodes_Matches(o, a); end
  def visit_Arel_Nodes_Max(o, a); end
  def visit_Arel_Nodes_Min(o, a); end
  def visit_Arel_Nodes_Multiplication(o, a); end
  def visit_Arel_Nodes_NamedFunction(o, a); end
  def visit_Arel_Nodes_NamedWindow(o, a); end
  def visit_Arel_Nodes_Not(o, a); end
  def visit_Arel_Nodes_NotEqual(o, a); end
  def visit_Arel_Nodes_NotIn(o, a); end
  def visit_Arel_Nodes_Offset(o, a); end
  def visit_Arel_Nodes_On(o, a); end
  def visit_Arel_Nodes_Or(o, a); end
  def visit_Arel_Nodes_OuterJoin(o, a); end
  def visit_Arel_Nodes_Over(o, a); end
  def visit_Arel_Nodes_Preceding(o, a); end
  def visit_Arel_Nodes_Range(o, a); end
  def visit_Arel_Nodes_Rows(o, a); end
  def visit_Arel_Nodes_SelectCore(o, a); end
  def visit_Arel_Nodes_SelectStatement(o, a); end
  def visit_Arel_Nodes_SqlLiteral(o, a); end
  def visit_Arel_Nodes_StringJoin(o, a); end
  def visit_Arel_Nodes_Subtraction(o, a); end
  def visit_Arel_Nodes_Sum(o, a); end
  def visit_Arel_Nodes_TableAlias(o, a); end
  def visit_Arel_Nodes_Top(o, a); end
  def visit_Arel_Nodes_True(o, a); end
  def visit_Arel_Nodes_Union(o, a); end
  def visit_Arel_Nodes_UnionAll(o, a); end
  def visit_Arel_Nodes_UnqualifiedColumn(o, a); end
  def visit_Arel_Nodes_UpdateStatement(o, a); end
  def visit_Arel_Nodes_Values(o, a); end
  def visit_Arel_Nodes_Window(o, a); end
  def visit_Arel_Nodes_With(o, a); end
  def visit_Arel_Nodes_WithRecursive(o, a); end
  def visit_Arel_SelectManager(o, a); end
  def visit_Arel_SqlLiteral(o, a); end
  def visit_Arel_Table(o, a); end
  def visit_Array(o, a); end
  def visit_BigDecimal(o, a); end
  def visit_Bignum(o, a); end
  def visit_Class(o, a); end
  def visit_Date(o, a); end
  def visit_DateTime(o, a); end
  def visit_FalseClass(o, a); end
  def visit_Fixnum(o, a); end
  def visit_Float(o, a); end
  def visit_Hash(o, a); end
  def visit_NilClass(o, a); end
  def visit_RGeo_Cartesian_BoundingBox(o, a); end
  def visit_RGeo_Feature_Instance(o, a); end
  def visit_String(o, a); end
  def visit_Symbol(o, a); end
  def visit_Time(o, a); end
  def visit_TrueClass(o, a); end
end

Arel::Visitors::ToSql::AND = T.let(T.unsafe(nil), String)

Arel::Visitors::ToSql::COMMA = T.let(T.unsafe(nil), String)

Arel::Visitors::ToSql::DISTINCT = T.let(T.unsafe(nil), String)

Arel::Visitors::ToSql::GROUP_BY = T.let(T.unsafe(nil), String)

Arel::Visitors::ToSql::ORDER_BY = T.let(T.unsafe(nil), String)

Arel::Visitors::ToSql::SPACE = T.let(T.unsafe(nil), String)

Arel::Visitors::ToSql::WHERE = T.let(T.unsafe(nil), String)

Arel::Visitors::ToSql::WINDOW = T.let(T.unsafe(nil), String)

Arel::Visitors::VISITORS = T.let(T.unsafe(nil), Hash)

class Arel::Visitors::Visitor
  def accept(object); end
  def visit_RGeo_ActiveRecord_SpatialConstantNode(node, *args); end

  private

  def dispatch; end
  def visit(object, attribute = T.unsafe(nil)); end
end

Arel::Visitors::Visitor::DISPATCH = T.let(T.unsafe(nil), Hash)

class Arel::Visitors::WhereSql < ::Arel::Visitors::ToSql
  def visit_Arel_Nodes_SelectCore(o, a); end
end

module Arel::WindowPredications
  def over(expr = T.unsafe(nil)); end
end
