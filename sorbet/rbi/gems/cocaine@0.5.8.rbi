# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cocaine` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module Cocaine
end

class Cocaine::CommandLine
  def initialize(binary, params = T.unsafe(nil), options = T.unsafe(nil)); end

  def command(interpolations = T.unsafe(nil)); end
  def command_error_output; end
  def command_output; end
  def exit_status; end
  def output; end
  def run(interpolations = T.unsafe(nil)); end
  def runner; end

  private

  def bit_bucket; end
  def colored(text, ansi_color = T.unsafe(nil)); end
  def environment; end
  def execute(command); end
  def interpolate(pattern, interpolations); end
  def log(text); end
  def os_path_prefix; end
  def path_prefix; end
  def runner_options; end
  def shell_quote(string); end
  def shell_quote_all_values(values); end
  def stringify_keys(hash); end
  def unix_path_prefix; end
  def windows_path_prefix; end

  class << self
    def environment; end
    def fake!; end
    def logger; end
    def logger=(_); end
    def path; end
    def path=(supplemental_path); end
    def runner; end
    def runner=(_); end
    def runner_options; end
    def unfake!; end

    private

    def best_runner; end
  end
end

class Cocaine::CommandLine::BackticksRunner
  def call(command, env = T.unsafe(nil), options = T.unsafe(nil)); end
  def supported?; end

  private

  def with_modified_environment(env, &block); end

  class << self
    def supported?; end
  end
end

class Cocaine::CommandLine::FakeRunner
  def initialize; end

  def call(command, env = T.unsafe(nil), options = T.unsafe(nil)); end
  def commands; end
  def ran?(predicate_command); end
  def supported?; end

  class << self
    def supported?; end
  end
end

class Cocaine::CommandLine::MultiPipe
  def initialize; end

  def output; end
  def pipe_options; end
  def read_and_then(&block); end

  private

  def close_read; end
  def close_write; end
  def read; end
  def read_stream(io); end
end

class Cocaine::CommandLine::Output
  def initialize(output = T.unsafe(nil), error_output = T.unsafe(nil)); end

  def error_output; end
  def output; end
  def to_s; end
end

class Cocaine::CommandLine::PopenRunner
  def call(command, env = T.unsafe(nil), options = T.unsafe(nil)); end
  def supported?; end

  private

  def with_modified_environment(env, &block); end

  class << self
    def supported?; end
  end
end

class Cocaine::CommandLine::PosixRunner
  def call(command, env = T.unsafe(nil), options = T.unsafe(nil)); end
  def supported?; end

  private

  def spawn(*args); end
  def waitpid(pid); end

  class << self
    def available?; end
    def supported?; end

    private

    def posix_spawn_gem_available?; end
  end
end

class Cocaine::CommandLine::ProcessRunner
  def call(command, env = T.unsafe(nil), options = T.unsafe(nil)); end
  def supported?; end

  private

  def spawn(*args); end
  def waitpid(pid); end

  class << self
    def available?; end
    def supported?; end
  end
end

class Cocaine::CommandLineError < ::StandardError
end

class Cocaine::CommandNotFoundError < ::Cocaine::CommandLineError
end

class Cocaine::ExitStatusError < ::Cocaine::CommandLineError
end

class Cocaine::InterpolationError < ::Cocaine::CommandLineError
end

Cocaine::OS = T.let(T.unsafe(nil), Cocaine::OSDetector)

class Cocaine::OSDetector
  def arch; end
  def java?; end
  def path_separator; end
  def unix?; end
  def windows?; end
end
