# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `capybara` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module Capybara
  class << self
    def HTML(html); end
    def add_selector(name, &block); end
    def always_include_port(*args, &block); end
    def always_include_port=(*args, &block); end
    def app(*args, &block); end
    def app=(*args, &block); end
    def app_host(*args, &block); end
    def app_host=(*args, &block); end
    def asset_host(*args, &block); end
    def asset_host=(*args, &block); end
    def automatic_label_click(*args, &block); end
    def automatic_label_click=(*args, &block); end
    def automatic_reload(*args, &block); end
    def automatic_reload=(*args, &block); end
    def configure; end
    def current_driver; end
    def current_driver=(name); end
    def current_session; end
    def default_driver(*args, &block); end
    def default_driver=(*args, &block); end
    def default_host(*args, &block); end
    def default_host=(*args, &block); end
    def default_max_wait_time(*args, &block); end
    def default_max_wait_time=(*args, &block); end
    def default_selector(*args, &block); end
    def default_selector=(*args, &block); end
    def default_wait_time(*args, &block); end
    def default_wait_time=(*args, &block); end
    def drivers; end
    def enable_aria_label(*args, &block); end
    def enable_aria_label=(*args, &block); end
    def exact(*args, &block); end
    def exact=(*args, &block); end
    def exact_options(*args, &block); end
    def exact_options=(*args, &block); end
    def exact_text(*args, &block); end
    def exact_text=(*args, &block); end
    def ignore_hidden_elements(*args, &block); end
    def ignore_hidden_elements=(*args, &block); end
    def included(base); end
    def javascript_driver(*args, &block); end
    def javascript_driver=(*args, &block); end
    def match(*args, &block); end
    def match=(*args, &block); end
    def mode; end
    def modify_selector(name, &block); end
    def raise_server_errors(*args, &block); end
    def raise_server_errors=(*args, &block); end
    def register_driver(name, &block); end
    def register_server(name, &block); end
    def reset!; end
    def reset_sessions!; end
    def reuse_server(*args, &block); end
    def reuse_server=(*args, &block); end
    def run_default_server(app, port); end
    def run_server(*args, &block); end
    def run_server=(*args, &block); end
    def save_and_open_page_path(*args, &block); end
    def save_and_open_page_path=(*args, &block); end
    def save_path(*args, &block); end
    def save_path=(*args, &block); end
    def server(*args, &block); end
    def server=(*args, &block); end
    def server_errors(*args, &block); end
    def server_errors=(*args, &block); end
    def server_host(*args, &block); end
    def server_host=(*args, &block); end
    def server_port(*args, &block); end
    def server_port=(*args, &block); end
    def servers; end
    def session_name; end
    def session_name=(name); end
    def session_options; end
    def string(html); end
    def threadsafe(*args, &block); end
    def threadsafe=(*args, &block); end
    def use_default_driver; end
    def using_driver(driver); end
    def using_session(name); end
    def using_wait_time(seconds); end
    def visible_text_only(*args, &block); end
    def visible_text_only=(*args, &block); end
    def wait_on_first_by_default(*args, &block); end
    def wait_on_first_by_default=(*args, &block); end

    private

    def config; end
    def session_pool; end
  end
end

class Capybara::Ambiguous < ::Capybara::ElementNotFound
end

class Capybara::CapybaraError < ::StandardError
end

class Capybara::Config
  extend(::Forwardable)

  def initialize; end

  def always_include_port(*args, &block); end
  def always_include_port=(*args, &block); end
  def app; end
  def app=(_); end
  def app_host(*args, &block); end
  def app_host=(*args, &block); end
  def asset_host(*args, &block); end
  def asset_host=(*args, &block); end
  def automatic_label_click(*args, &block); end
  def automatic_label_click=(*args, &block); end
  def automatic_reload(*args, &block); end
  def automatic_reload=(*args, &block); end
  def default_driver; end
  def default_driver=(_); end
  def default_host(*args, &block); end
  def default_host=(*args, &block); end
  def default_max_wait_time(*args, &block); end
  def default_max_wait_time=(*args, &block); end
  def default_selector(*args, &block); end
  def default_selector=(*args, &block); end
  def default_wait_time; end
  def default_wait_time=(t); end
  def deprecate(method, alternate_method, once = T.unsafe(nil)); end
  def enable_aria_label(*args, &block); end
  def enable_aria_label=(*args, &block); end
  def exact(*args, &block); end
  def exact=(*args, &block); end
  def exact_options(*args, &block); end
  def exact_options=(*args, &block); end
  def exact_text(*args, &block); end
  def exact_text=(*args, &block); end
  def ignore_hidden_elements(*args, &block); end
  def ignore_hidden_elements=(*args, &block); end
  def javascript_driver; end
  def javascript_driver=(_); end
  def match(*args, &block); end
  def match=(*args, &block); end
  def raise_server_errors(*args, &block); end
  def raise_server_errors=(*args, &block); end
  def reuse_server; end
  def reuse_server=(bool); end
  def run_server(*args, &block); end
  def run_server=(*args, &block); end
  def save_and_open_page_path(*args, &block); end
  def save_and_open_page_path=(*args, &block); end
  def save_path(*args, &block); end
  def save_path=(*args, &block); end
  def server(&block); end
  def server=(name); end
  def server_errors(*args, &block); end
  def server_errors=(*args, &block); end
  def server_host(*args, &block); end
  def server_host=(*args, &block); end
  def server_port(*args, &block); end
  def server_port=(*args, &block); end
  def session_options; end
  def threadsafe; end
  def threadsafe=(bool); end
  def visible_text_only(*args, &block); end
  def visible_text_only=(*args, &block); end
  def wait_on_first_by_default(*args, &block); end
  def wait_on_first_by_default=(*args, &block); end
end

Capybara::Config::OPTIONS = T.let(T.unsafe(nil), Array)

class Capybara::ConfigureDeprecator
  def initialize(config); end

  def method_missing(m, *args, &block); end

  private

  def respond_to_missing?(m, include_private = T.unsafe(nil)); end
end

module Capybara::Driver
end

class Capybara::Driver::Base
  def accept_modal(type, options = T.unsafe(nil), &blk); end
  def browser_initialized?; end
  def close_window(handle); end
  def current_url; end
  def current_window_handle; end
  def dismiss_modal(type, options = T.unsafe(nil), &blk); end
  def evaluate_async_script(script, *args); end
  def evaluate_script(script, *args); end
  def execute_script(script, *args); end
  def find_css(query); end
  def find_xpath(query); end
  def go_back; end
  def go_forward; end
  def html; end
  def invalid_element_errors; end
  def maximize_window(handle); end
  def needs_server?; end
  def no_such_window_error; end
  def open_new_window; end
  def refresh; end
  def reset!; end
  def resize_window_to(handle, width, height); end
  def response_headers; end
  def save_screenshot(path, options = T.unsafe(nil)); end
  def session=(_); end
  def session_options; end
  def status_code; end
  def switch_to_frame(frame); end
  def switch_to_window(handle); end
  def visit(path); end
  def wait?; end
  def window_handles; end
  def window_size(handle); end
  def within_window(locator); end
end

class Capybara::Driver::Node
  def initialize(driver, native); end

  def ==(other); end
  def [](name); end
  def all_text; end
  def checked?; end
  def click; end
  def disabled?; end
  def double_click; end
  def drag_to(element); end
  def driver; end
  def hover; end
  def inspect; end
  def multiple?; end
  def native; end
  def path; end
  def readonly?; end
  def right_click; end
  def select_option; end
  def selected?; end
  def send_keys(*args); end
  def set(value, options = T.unsafe(nil)); end
  def tag_name; end
  def trigger(event); end
  def unselect_option; end
  def value; end
  def visible?; end
  def visible_text; end
end

class Capybara::DriverNotFoundError < ::Capybara::CapybaraError
end

class Capybara::ElementNotFound < ::Capybara::CapybaraError
end

class Capybara::ExpectationNotMet < ::Capybara::ElementNotFound
end

class Capybara::FileNotFound < ::Capybara::CapybaraError
end

class Capybara::FrozenInTime < ::Capybara::CapybaraError
end

module Capybara::Helpers
  extend(::Capybara::Helpers)

  def declension(singular, plural, count); end
  def inject_asset_host(html, asset_host = T.unsafe(nil)); end
  def monotonic_time; end
  def normalize_whitespace(text); end
  def to_regexp(text, regexp_options = T.unsafe(nil), exact = T.unsafe(nil)); end
end

class Capybara::InfiniteRedirectError < ::Capybara::CapybaraError
end

class Capybara::ModalNotFound < ::Capybara::CapybaraError
end

module Capybara::Node
end

module Capybara::Node::Actions
  def attach_file(locator, path, options = T.unsafe(nil)); end
  def check(locator, options = T.unsafe(nil)); end
  def choose(locator, options = T.unsafe(nil)); end
  def click_button(locator = T.unsafe(nil), options = T.unsafe(nil)); end
  def click_link(locator = T.unsafe(nil), options = T.unsafe(nil)); end
  def click_link_or_button(locator = T.unsafe(nil), options = T.unsafe(nil)); end
  def click_on(locator = T.unsafe(nil), options = T.unsafe(nil)); end
  def fill_in(locator, options = T.unsafe(nil)); end
  def select(value, options = T.unsafe(nil)); end
  def uncheck(locator, options = T.unsafe(nil)); end
  def unselect(value, options = T.unsafe(nil)); end

  private

  def _check_with_label(selector, checked, locator, options); end
  def _reset_style(element); end
  def _update_style(element, style); end
end

class Capybara::Node::Base
  include(::Capybara::Node::Finders)
  include(::Capybara::Node::Actions)
  include(::Capybara::Node::Matchers)

  def initialize(session, base); end

  def base; end
  def find_css(css); end
  def find_xpath(xpath); end
  def parent; end
  def query_scope; end
  def reload; end
  def session; end
  def session_options; end
  def synchronize(seconds = T.unsafe(nil), options = T.unsafe(nil)); end

  protected

  def catch_error?(error, errors = T.unsafe(nil)); end
  def driver; end
end

class Capybara::Node::Document < ::Capybara::Node::Base
  include(::Capybara::Node::DocumentMatchers)

  def inspect; end
  def text(type = T.unsafe(nil)); end
  def title; end
end

module Capybara::Node::DocumentMatchers
  def assert_no_title(title, options = T.unsafe(nil)); end
  def assert_title(title, options = T.unsafe(nil)); end
  def has_no_title?(title, options = T.unsafe(nil)); end
  def has_title?(title, options = T.unsafe(nil)); end

  private

  def _verify_title(title, options); end
end

class Capybara::Node::Element < ::Capybara::Node::Base
  def initialize(session, base, query_scope, query); end

  def [](attribute); end
  def allow_reload!; end
  def checked?; end
  def click; end
  def disabled?; end
  def double_click; end
  def drag_to(node); end
  def hover; end
  def inspect; end
  def multiple?; end
  def native; end
  def path; end
  def readonly?; end
  def reload; end
  def right_click; end
  def select_option; end
  def selected?; end
  def send_keys(*args); end
  def set(value, options = T.unsafe(nil)); end
  def tag_name; end
  def text(type = T.unsafe(nil)); end
  def trigger(event); end
  def unselect_option; end
  def value; end
  def visible?; end
end

module Capybara::Node::Finders
  def all(*args, &optional_filter_block); end
  def ancestor(*args, &optional_filter_block); end
  def field_labeled(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def find(*args, &optional_filter_block); end
  def find_all(*args, &optional_filter_block); end
  def find_button(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def find_by_id(id, options = T.unsafe(nil), &optional_filter_block); end
  def find_field(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def find_link(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def first(*args, &optional_filter_block); end
  def sibling(*args, &optional_filter_block); end

  private

  def synced_resolve(query); end
end

module Capybara::Node::Matchers
  def ==(other); end
  def assert_all_of_selectors(*args, &optional_filter_block); end
  def assert_matches_selector(*args, &optional_filter_block); end
  def assert_no_selector(*args, &optional_filter_block); end
  def assert_no_text(*args); end
  def assert_none_of_selectors(*args, &optional_filter_block); end
  def assert_not_matches_selector(*args, &optional_filter_block); end
  def assert_selector(*args, &optional_filter_block); end
  def assert_text(*args); end
  def has_button?(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def has_checked_field?(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def has_content?(*args); end
  def has_css?(path, options = T.unsafe(nil), &optional_filter_block); end
  def has_field?(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def has_link?(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def has_no_button?(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def has_no_checked_field?(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def has_no_content?(*args); end
  def has_no_css?(path, options = T.unsafe(nil), &optional_filter_block); end
  def has_no_field?(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def has_no_link?(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def has_no_select?(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def has_no_selector?(*args, &optional_filter_block); end
  def has_no_table?(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def has_no_text?(*args); end
  def has_no_unchecked_field?(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def has_no_xpath?(path, options = T.unsafe(nil), &optional_filter_block); end
  def has_select?(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def has_selector?(*args, &optional_filter_block); end
  def has_table?(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def has_text?(*args); end
  def has_unchecked_field?(locator = T.unsafe(nil), options = T.unsafe(nil), &optional_filter_block); end
  def has_xpath?(path, options = T.unsafe(nil), &optional_filter_block); end
  def matches_css?(css, options = T.unsafe(nil), &optional_filter_block); end
  def matches_selector?(*args, &optional_filter_block); end
  def matches_xpath?(xpath, options = T.unsafe(nil), &optional_filter_block); end
  def not_matches_css?(css, options = T.unsafe(nil), &optional_filter_block); end
  def not_matches_selector?(*args, &optional_filter_block); end
  def not_matches_xpath?(xpath, options = T.unsafe(nil), &optional_filter_block); end
  def refute_matches_selector(*args, &optional_filter_block); end
  def refute_selector(*args, &optional_filter_block); end

  private

  def _set_query_session_options(query_args); end
  def _verify_match_result(query_args, optional_filter_block, &result_block); end
  def _verify_selector_result(query_args, optional_filter_block, &result_block); end
  def _verify_text(query_args); end
end

class Capybara::Node::Simple
  include(::Capybara::Node::Finders)
  include(::Capybara::Node::Matchers)
  include(::Capybara::Node::DocumentMatchers)

  def initialize(native); end

  def [](name); end
  def allow_reload!; end
  def checked?; end
  def disabled?; end
  def find_css(css); end
  def find_xpath(xpath); end
  def inspect; end
  def native; end
  def path; end
  def selected?; end
  def session_options; end
  def synchronize(seconds = T.unsafe(nil)); end
  def tag_name; end
  def text(type = T.unsafe(nil)); end
  def title; end
  def value; end
  def visible?(check_ancestors = T.unsafe(nil)); end
end

class Capybara::NotSupportedByDriverError < ::Capybara::CapybaraError
end

module Capybara::Queries
end

class Capybara::Queries::AncestorQuery < ::Capybara::Queries::MatchQuery
  def description; end
  def resolve_for(node, exact = T.unsafe(nil)); end
end

class Capybara::Queries::BaseQuery
  def initialize(options); end

  def expects_none?; end
  def failure_message; end
  def matches_count?(count); end
  def negative_failure_message; end
  def options; end
  def session_options; end
  def session_options=(_); end
  def wait; end

  private

  def assert_valid_keys; end
  def count_message; end

  class << self
    def wait(options, default = T.unsafe(nil)); end
  end
end

Capybara::Queries::BaseQuery::COUNT_KEYS = T.let(T.unsafe(nil), Array)

class Capybara::Queries::CurrentPathQuery < ::Capybara::Queries::BaseQuery
  def initialize(expected_path, options = T.unsafe(nil)); end

  def failure_message; end
  def negative_failure_message; end
  def resolves_for?(session); end

  private

  def assert_valid_keys; end
  def failure_message_helper(negated = T.unsafe(nil)); end
  def valid_keys; end
end

class Capybara::Queries::MatchQuery < ::Capybara::Queries::SelectorQuery
  def visible; end

  private

  def valid_keys; end
end

class Capybara::Queries::SelectorQuery < ::Capybara::Queries::BaseQuery
  def initialize(*args, &filter_block); end

  def css; end
  def description; end
  def exact?; end
  def expression; end
  def expression=(_); end
  def find; end
  def find=(_); end
  def label; end
  def locator; end
  def locator=(_); end
  def match; end
  def matches_filters?(node); end
  def name; end
  def negative; end
  def negative=(_); end
  def options; end
  def options=(_); end
  def resolve_for(node, exact = T.unsafe(nil)); end
  def selector; end
  def selector=(_); end
  def supports_exact?; end
  def visible; end
  def xpath(exact = T.unsafe(nil)); end

  private

  def apply_expression_filters(expr); end
  def assert_valid_keys; end
  def custom_keys; end
  def describe_within?; end
  def exact_text; end
  def expression_filters; end
  def filtered_css(expr); end
  def filtered_xpath(expr); end
  def node_filters; end
  def valid_keys; end
  def warn_exact_usage; end
end

Capybara::Queries::SelectorQuery::VALID_KEYS = T.let(T.unsafe(nil), Array)

Capybara::Queries::SelectorQuery::VALID_MATCH = T.let(T.unsafe(nil), Array)

class Capybara::Queries::SiblingQuery < ::Capybara::Queries::MatchQuery
  def description; end
  def resolve_for(node, exact = T.unsafe(nil)); end
end

class Capybara::Queries::TextQuery < ::Capybara::Queries::BaseQuery
  def initialize(*args); end

  def description; end
  def failure_message; end
  def negative_failure_message; end
  def resolve_for(node); end

  private

  def build_message(report_on_invisible); end
  def check_visible_text?; end
  def exact?; end
  def text(node, query_type); end
  def valid_keys; end
end

class Capybara::Queries::TitleQuery < ::Capybara::Queries::BaseQuery
  def initialize(expected_title, options = T.unsafe(nil)); end

  def failure_message; end
  def negative_failure_message; end
  def resolves_for?(node); end

  private

  def failure_message_helper(negated = T.unsafe(nil)); end
  def valid_keys; end
end

Capybara::Query = Capybara::Queries::SelectorQuery

module Capybara::RackTest
end

class Capybara::RackTest::Browser
  include(::Rack::Test::Methods)

  def initialize(driver); end

  def app; end
  def current_host; end
  def current_host=(_); end
  def current_url; end
  def dom; end
  def driver; end
  def find(format, selector); end
  def follow(method, path, attributes = T.unsafe(nil)); end
  def html; end
  def options; end
  def process(method, path, attributes = T.unsafe(nil), env = T.unsafe(nil)); end
  def process_and_follow_redirects(method, path, attributes = T.unsafe(nil), env = T.unsafe(nil)); end
  def refresh; end
  def reset_cache!; end
  def reset_host!; end
  def submit(method, path, attributes); end
  def title; end
  def visit(path, attributes = T.unsafe(nil)); end

  protected

  def build_rack_mock_session; end
  def request_path; end
end

class Capybara::RackTest::CSSHandlers < ::BasicObject
  include(::Kernel)

  def disabled(list); end
  def enabled(list); end
end

class Capybara::RackTest::Driver < ::Capybara::Driver::Base
  def initialize(app, options = T.unsafe(nil)); end

  def app; end
  def browser; end
  def browser_initialized?; end
  def current_url; end
  def delete(*args, &block); end
  def dom; end
  def find_css(selector); end
  def find_xpath(selector); end
  def follow(method, path, attributes = T.unsafe(nil)); end
  def follow_redirects?; end
  def get(*args, &block); end
  def header(key, value); end
  def html; end
  def options; end
  def post(*args, &block); end
  def put(*args, &block); end
  def redirect_limit; end
  def refresh; end
  def request; end
  def reset!; end
  def response; end
  def response_headers; end
  def status_code; end
  def submit(method, path, attributes); end
  def title; end
  def visit(path, attributes = T.unsafe(nil)); end
end

Capybara::RackTest::Driver::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

class Capybara::RackTest::Form < ::Capybara::RackTest::Node
  def multipart?; end
  def params(button); end
  def submit(button); end

  private

  def make_params; end
  def merge_param!(params, key, value); end
  def request_method; end
end

class Capybara::RackTest::Form::NilUploadedFile < ::Rack::Test::UploadedFile
  def initialize; end

  def content_type; end
  def original_filename; end
  def path; end
  def read; end
  def size; end
end

class Capybara::RackTest::Form::ParamsHash < ::Hash
  def to_params_hash; end
end

class Capybara::RackTest::Node < ::Capybara::Driver::Node
  def ==(other); end
  def [](name); end
  def all_text; end
  def checked?; end
  def click; end
  def disabled?; end
  def find_css(locator); end
  def find_xpath(locator); end
  def path; end
  def select_option; end
  def selected?; end
  def set(value); end
  def tag_name; end
  def unselect_option; end
  def value; end
  def visible?; end
  def visible_text; end

  protected

  def checkbox?; end
  def input_field?; end
  def radio?; end
  def text_or_password?; end
  def textarea?; end
  def unnormalized_text(check_ancestor_visibility = T.unsafe(nil)); end

  private

  def attribute_is_not_blank?(attribute); end
  def form; end
  def select_node; end
  def set_checkbox(value); end
  def set_input(value); end
  def set_radio(_value); end
  def string_node; end
  def type; end
end

class Capybara::ReadOnlyElementError < ::Capybara::CapybaraError
end

class Capybara::ReadOnlySessionConfig < ::SimpleDelegator
  def always_include_port=(val); end
  def app_host=(val); end
  def asset_host=(val); end
  def automatic_label_click=(val); end
  def automatic_reload=(val); end
  def default_host=(val); end
  def default_max_wait_time=(val); end
  def default_selector=(val); end
  def enable_aria_label=(val); end
  def exact=(val); end
  def exact_options=(val); end
  def exact_text=(val); end
  def ignore_hidden_elements=(val); end
  def match=(val); end
  def raise_server_errors=(val); end
  def run_server=(val); end
  def save_and_open_page_path=(val); end
  def save_path=(val); end
  def server_errors=(val); end
  def server_host=(val); end
  def server_port=(val); end
  def visible_text_only=(val); end
  def wait_on_first_by_default=(val); end
end

class Capybara::Result
  include(::Enumerable)
  extend(::Forwardable)

  def initialize(elements, query); end

  def [](*args); end
  def at(*args); end
  def each(&block); end
  def empty?; end
  def failure_message; end
  def index(*_); end
  def inspect(*args, &block); end
  def last(*args, &block); end
  def length(*args, &block); end
  def matches_count?; end
  def negative_failure_message; end
  def sample(*args, &block); end
  def size(*args, &block); end
  def values_at(*args, &block); end

  private

  def full_results; end
  def lazy_select_elements(&block); end
  def rest; end
end

class Capybara::ScopeError < ::Capybara::CapybaraError
end

class Capybara::Selector
  def initialize(name, &block); end

  def call(locator, options = T.unsafe(nil)); end
  def css(*expression_filters, &block); end
  def custom_filters; end
  def default_visibility(fallback = T.unsafe(nil)); end
  def describe(&block); end
  def description(options = T.unsafe(nil)); end
  def expression_filter(name, *types_and_options, &block); end
  def expression_filters; end
  def filter(name, *types_and_options, &block); end
  def filter_set(name, filters_to_use = T.unsafe(nil)); end
  def format; end
  def label(label = T.unsafe(nil)); end
  def match(&block); end
  def match?(locator); end
  def name; end
  def node_filters; end
  def visible(default_visibility); end
  def xpath(*expression_filters, &block); end

  private

  def describe_all_expression_filters(opts = T.unsafe(nil)); end
  def find_by_attr(attribute, value); end
  def find_by_class_attr(classes); end
  def locate_field(xpath, locator, options = T.unsafe(nil)); end

  class << self
    def add(name, &block); end
    def all; end
    def const_missing(const_name); end
    def remove(name); end
    def update(name, &block); end
  end
end

class Capybara::Selector::CSS
  class << self
    def escape(str); end
    def escape_char(c); end
  end
end

Capybara::Selector::CSS::ESCAPE = T.let(T.unsafe(nil), Regexp)

Capybara::Selector::CSS::H = T.let(T.unsafe(nil), Regexp)

Capybara::Selector::CSS::NMSTART = T.let(T.unsafe(nil), Regexp)

Capybara::Selector::CSS::NONASCII = T.let(T.unsafe(nil), Regexp)

Capybara::Selector::CSS::S = T.let(T.unsafe(nil), String)

Capybara::Selector::CSS::UNICODE = T.let(T.unsafe(nil), Regexp)

class Capybara::Selector::FilterSet
  def initialize(name, &block); end

  def describe(&block); end
  def description(options = T.unsafe(nil)); end
  def descriptions; end
  def expression_filter(name, *types_and_options, &block); end
  def expression_filters; end
  def filter(name, *types_and_options, &block); end
  def filters; end
  def node_filters; end

  private

  def add_filter(name, filter_class, *types_and_options, &block); end

  class << self
    def add(name, &block); end
    def all; end
    def remove(name); end
  end
end

module Capybara::Selector::Filters
end

class Capybara::Selector::Filters::Base
  def initialize(name, block, options = T.unsafe(nil)); end

  def default; end
  def default?; end
  def skip?(value); end

  private

  def valid_value?(value); end
end

class Capybara::Selector::Filters::ExpressionFilter < ::Capybara::Selector::Filters::Base
  def apply_filter(expr, value); end
end

class Capybara::Selector::Filters::IdentityExpressionFilter < ::Capybara::Selector::Filters::ExpressionFilter
  def initialize; end

  def apply_filter(expr, _value); end
  def default?; end
end

class Capybara::Selector::Filters::NodeFilter < ::Capybara::Selector::Filters::Base
  def matches?(node, value); end
end

module Capybara::Selenium
end

class Capybara::Selenium::Driver < ::Capybara::Driver::Base
  def initialize(app, options = T.unsafe(nil)); end

  def accept_modal(_type, options = T.unsafe(nil)); end
  def app; end
  def browser; end
  def browser_initialized?; end
  def chrome?; end
  def close_window(handle); end
  def current_url; end
  def current_window_handle; end
  def dismiss_modal(_type, options = T.unsafe(nil)); end
  def evaluate_async_script(script, *args); end
  def evaluate_script(script, *args); end
  def execute_script(script, *args); end
  def find_css(selector); end
  def find_xpath(selector); end
  def firefox?; end
  def go_back; end
  def go_forward; end
  def html; end
  def invalid_element_errors; end
  def marionette?; end
  def maximize_window(handle); end
  def needs_server?; end
  def no_such_window_error; end
  def open_new_window; end
  def options; end
  def quit; end
  def refresh; end
  def reset!; end
  def resize_window_to(handle, width, height); end
  def save_screenshot(path, _options = T.unsafe(nil)); end
  def switch_to_frame(frame); end
  def switch_to_window(handle); end
  def title; end
  def visit(path); end
  def wait?; end
  def window_handles; end
  def window_size(handle); end
  def within_window(locator); end

  private

  def browser_name; end
  def find_headless_modal(options = T.unsafe(nil)); end
  def find_modal(options = T.unsafe(nil)); end
  def find_window(locator); end
  def insert_modal_handlers(accept, response_text); end
  def load_selenium; end
  def modal_error; end
  def silenced_unknown_error_message?(msg); end
  def silenced_unknown_error_messages; end
  def unwrap_script_result(arg); end
  def within_given_window(handle); end
end

Capybara::Selenium::Driver::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

Capybara::Selenium::Driver::SPECIAL_OPTIONS = T.let(T.unsafe(nil), Array)

class Capybara::Selenium::Node < ::Capybara::Driver::Node
  def ==(other); end
  def [](name); end
  def all_text; end
  def checked?; end
  def click; end
  def content_editable?; end
  def disabled?; end
  def double_click; end
  def drag_to(element); end
  def find_css(locator); end
  def find_xpath(locator); end
  def hover; end
  def multiple?; end
  def path; end
  def readonly?; end
  def right_click; end
  def select_option; end
  def selected?; end
  def send_keys(*args); end
  def set(value, options = T.unsafe(nil)); end
  def tag_name; end
  def unselect_option; end
  def value; end
  def visible?; end
  def visible_text; end

  private

  def scroll_if_needed(&block); end
  def select_node; end
  def set_text(value, options); end
end

class Capybara::Server
  def initialize(app, port = T.unsafe(nil), host = T.unsafe(nil), server_errors = T.unsafe(nil)); end

  def app; end
  def boot; end
  def error; end
  def host; end
  def port; end
  def reset_error!; end
  def responsive?; end
  def wait_for_pending_requests; end

  private

  def find_available_port(host); end
  def middleware; end
  def pending_requests?; end
  def port_key; end

  class << self
    def ports; end
  end
end

class Capybara::Server::Middleware
  def initialize(app, server_errors); end

  def call(env); end
  def error; end
  def error=(_); end
  def pending_requests?; end
end

class Capybara::Server::Middleware::Counter
  def initialize; end

  def decrement; end
  def increment; end
  def value; end
end

class Capybara::Session
  include(::Capybara::SessionMatchers)

  def initialize(mode, app = T.unsafe(nil)); end

  def accept_alert(text_or_options = T.unsafe(nil), options = T.unsafe(nil), &blk); end
  def accept_confirm(text_or_options = T.unsafe(nil), options = T.unsafe(nil), &blk); end
  def accept_prompt(text_or_options = T.unsafe(nil), options = T.unsafe(nil), &blk); end
  def all(*args, &block); end
  def app; end
  def assert_all_of_selectors(*args, &block); end
  def assert_no_selector(*args, &block); end
  def assert_no_text(*args, &block); end
  def assert_no_title(*args, &block); end
  def assert_none_of_selectors(*args, &block); end
  def assert_selector(*args, &block); end
  def assert_text(*args, &block); end
  def assert_title(*args, &block); end
  def attach_file(*args, &block); end
  def body; end
  def check(*args, &block); end
  def choose(*args, &block); end
  def cleanup!; end
  def click_button(*args, &block); end
  def click_link(*args, &block); end
  def click_link_or_button(*args, &block); end
  def click_on(*args, &block); end
  def config; end
  def configure; end
  def current_host; end
  def current_path; end
  def current_scope; end
  def current_url; end
  def current_window; end
  def dismiss_confirm(text_or_options = T.unsafe(nil), options = T.unsafe(nil), &blk); end
  def dismiss_prompt(text_or_options = T.unsafe(nil), options = T.unsafe(nil), &blk); end
  def document; end
  def driver; end
  def evaluate_async_script(script, *args); end
  def evaluate_script(script, *args); end
  def execute_script(script, *args); end
  def field_labeled(*args, &block); end
  def fill_in(*args, &block); end
  def find(*args, &block); end
  def find_all(*args, &block); end
  def find_button(*args, &block); end
  def find_by_id(*args, &block); end
  def find_field(*args, &block); end
  def find_link(*args, &block); end
  def first(*args, &block); end
  def go_back; end
  def go_forward; end
  def has_button?(*args, &block); end
  def has_checked_field?(*args, &block); end
  def has_content?(*args, &block); end
  def has_css?(*args, &block); end
  def has_field?(*args, &block); end
  def has_link?(*args, &block); end
  def has_no_button?(*args, &block); end
  def has_no_checked_field?(*args, &block); end
  def has_no_content?(*args, &block); end
  def has_no_css?(*args, &block); end
  def has_no_field?(*args, &block); end
  def has_no_link?(*args, &block); end
  def has_no_select?(*args, &block); end
  def has_no_selector?(*args, &block); end
  def has_no_table?(*args, &block); end
  def has_no_text?(*args, &block); end
  def has_no_title?(*args, &block); end
  def has_no_unchecked_field?(*args, &block); end
  def has_no_xpath?(*args, &block); end
  def has_select?(*args, &block); end
  def has_selector?(*args, &block); end
  def has_table?(*args, &block); end
  def has_text?(*args, &block); end
  def has_title?(*args, &block); end
  def has_unchecked_field?(*args, &block); end
  def has_xpath?(*args, &block); end
  def html; end
  def inspect; end
  def mode; end
  def open_new_window; end
  def query(*args, &block); end
  def raise_server_error!; end
  def refresh; end
  def refute_selector(*args, &block); end
  def reset!; end
  def reset_session!; end
  def resolve(*args, &block); end
  def response_headers; end
  def save_and_open_page(path = T.unsafe(nil)); end
  def save_and_open_screenshot(path = T.unsafe(nil), options = T.unsafe(nil)); end
  def save_page(path = T.unsafe(nil)); end
  def save_screenshot(path = T.unsafe(nil), options = T.unsafe(nil)); end
  def select(*args, &block); end
  def server; end
  def source; end
  def status_code; end
  def switch_to_frame(frame); end
  def switch_to_window(window = T.unsafe(nil), options = T.unsafe(nil), &window_locator); end
  def synchronized; end
  def synchronized=(_); end
  def text(*args, &block); end
  def title(*args, &block); end
  def uncheck(*args, &block); end
  def unselect(*args, &block); end
  def using_wait_time(seconds); end
  def visit(visit_uri); end
  def window_opened_by(options = T.unsafe(nil), &block); end
  def windows; end
  def within(*args); end
  def within_element(*args); end
  def within_fieldset(locator); end
  def within_frame(*args); end
  def within_table(locator); end
  def within_window(window_or_handle); end

  private

  def _find_frame(*args); end
  def _switch_to_window(window = T.unsafe(nil), options = T.unsafe(nil)); end
  def accept_modal(type, text_or_options, options, &blk); end
  def default_fn(extension); end
  def dismiss_modal(type, text_or_options, options, &blk); end
  def element_script_result(arg); end
  def modal_options(text_or_options, options); end
  def open_file(path); end
  def prepare_path(path, extension); end
  def scopes; end

  class << self
    def instance_created?; end
  end
end

Capybara::Session::DOCUMENT_METHODS = T.let(T.unsafe(nil), Array)

Capybara::Session::DSL_METHODS = T.let(T.unsafe(nil), Array)

Capybara::Session::MODAL_METHODS = T.let(T.unsafe(nil), Array)

Capybara::Session::NODE_METHODS = T.let(T.unsafe(nil), Array)

Capybara::Session::SESSION_METHODS = T.let(T.unsafe(nil), Array)

class Capybara::SessionConfig
  def always_include_port; end
  def always_include_port=(_); end
  def app_host; end
  def app_host=(url); end
  def asset_host; end
  def asset_host=(_); end
  def automatic_label_click; end
  def automatic_label_click=(_); end
  def automatic_reload; end
  def automatic_reload=(_); end
  def default_host; end
  def default_host=(url); end
  def default_max_wait_time; end
  def default_max_wait_time=(_); end
  def default_selector; end
  def default_selector=(_); end
  def enable_aria_label; end
  def enable_aria_label=(_); end
  def exact; end
  def exact=(_); end
  def exact_options; end
  def exact_options=(opt); end
  def exact_text; end
  def exact_text=(_); end
  def ignore_hidden_elements; end
  def ignore_hidden_elements=(_); end
  def match; end
  def match=(_); end
  def raise_server_errors; end
  def raise_server_errors=(_); end
  def run_server; end
  def run_server=(_); end
  def save_and_open_page_path; end
  def save_and_open_page_path=(path); end
  def save_path; end
  def save_path=(_); end
  def server_errors; end
  def server_errors=(errors); end
  def server_host; end
  def server_host=(_); end
  def server_port; end
  def server_port=(_); end
  def visible_text_only; end
  def visible_text_only=(_); end
  def wait_on_first_by_default; end
  def wait_on_first_by_default=(_); end

  private

  def initialize_copy(other); end
end

Capybara::SessionConfig::OPTIONS = T.let(T.unsafe(nil), Array)

module Capybara::SessionMatchers
  def assert_current_path(path, options = T.unsafe(nil)); end
  def assert_no_current_path(path, options = T.unsafe(nil)); end
  def has_current_path?(path, options = T.unsafe(nil)); end
  def has_no_current_path?(path, options = T.unsafe(nil)); end

  private

  def _verify_current_path(path, options); end
end

class Capybara::UnselectNotAllowed < ::Capybara::CapybaraError
end

Capybara::VERSION = T.let(T.unsafe(nil), String)

class Capybara::Window
  def initialize(session, handle); end

  def ==(other); end
  def close; end
  def closed?; end
  def current?; end
  def eql?(other); end
  def exists?; end
  def handle; end
  def hash; end
  def inspect; end
  def maximize; end
  def resize_to(width, height); end
  def session; end
  def size; end

  private

  def raise_unless_current(what); end
  def wait_for_stable_size(seconds = T.unsafe(nil)); end
end

class Capybara::WindowError < ::Capybara::CapybaraError
end

module XPath
  include(::XPath::DSL)
  extend(::XPath::DSL)

  class << self
    def generate; end
  end
end

class XPath::Renderer
  def initialize(type); end

  def anywhere(element_names); end
  def attribute(current, name); end
  def axis(current, name, element_names); end
  def binary_operator(name, left, right); end
  def child(current, element_names); end
  def convert_argument(argument); end
  def css(current, selector); end
  def descendant(current, element_names); end
  def function(name, *arguments); end
  def is(one, two); end
  def literal(node); end
  def render(node); end
  def string_literal(string); end
  def text(current); end
  def this_node; end
  def union(*expressions); end
  def variable(name); end
  def where(on, condition); end

  private

  def valid_xml_name?(name); end
  def with_element_conditions(expression, element_names); end

  class << self
    def render(node, type); end
  end
end
