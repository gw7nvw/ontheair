# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activerecord-postgis-adapter` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module ActiveRecord
  extend(::ActiveSupport::Autoload)

  class << self
    def eager_load!; end
    def gem_version; end
    def version; end
  end
end

module ActiveRecord::ConnectionAdapters
  extend(::ActiveSupport::Autoload)
end

module ActiveRecord::ConnectionAdapters::PostGISAdapter
  class << self
    def initial_setup; end
  end
end

ActiveRecord::ConnectionAdapters::PostGISAdapter::ADAPTER_NAME = T.let(T.unsafe(nil), String)

class ActiveRecord::ConnectionAdapters::PostGISAdapter::ColumnDefinition < ::ActiveRecord::ConnectionAdapters::ColumnDefinition
  def geographic?; end
  def has_m?; end
  def has_z?; end
  def set_geographic(value); end
  def set_has_m(value); end
  def set_has_z(value); end
  def set_spatial_type(value); end
  def set_srid(value); end
  def spatial_type; end
  def srid; end
end

module ActiveRecord::ConnectionAdapters::PostGISAdapter::CommonAdapterMethods
  def adapter_name; end
  def default_srid; end
  def postgis_lib_version; end
  def quote(value, column = T.unsafe(nil)); end
  def set_rgeo_factory_settings(factory_settings); end
  def spatial_column_constructor(name); end
  def srs_database_columns; end
end

ActiveRecord::ConnectionAdapters::PostGISAdapter::DEFAULT_SRID = T.let(T.unsafe(nil), Fixnum)

module ActiveRecord::ConnectionAdapters::PostGISAdapter::DecorateColumnsModification
  def decorate_columns(columns_hash); end
end

class ActiveRecord::ConnectionAdapters::PostGISAdapter::MainAdapter < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter
  include(::ActiveRecord::ConnectionAdapters::PostGISAdapter::CommonAdapterMethods)

  def initialize(*args); end

  def add_column(table_name, column_name, type, options = T.unsafe(nil)); end
  def add_index(table_name, column_name, options = T.unsafe(nil)); end
  def columns(table_name, name = T.unsafe(nil)); end
  def create_table(table_name, options = T.unsafe(nil), &block); end
  def create_table_definition(name, temporary, options, as = T.unsafe(nil)); end
  def indexes(table_name, name = T.unsafe(nil)); end
  def native_database_types; end
  def remove_column(table_name, column_name, type = T.unsafe(nil), options = T.unsafe(nil)); end
  def spatial_column_info(table_name); end
  def type_cast(value, column, array_member = T.unsafe(nil)); end

  private

  def add_spatial_column(table_name, column_name, type, options); end
  def column_type_map; end
  def set_dimensions(has_m, has_z); end
end

class ActiveRecord::ConnectionAdapters::PostGISAdapter::PostGISDatabaseTasks < ::ActiveRecord::Tasks::PostgreSQLDatabaseTasks
  def initialize(config); end

  def create(master_established = T.unsafe(nil)); end
  def setup_gis; end

  private

  def ensure_installation_configs; end
  def establish_master_connection; end
  def establish_su_connection; end
  def extension_names; end
  def has_su?; end
  def password; end
  def quoted_username; end
  def schema_exists?(schema_name); end
  def search_path; end
  def setup_gis_from_extension; end
  def su_password; end
  def su_username; end
  def username; end
end

class ActiveRecord::ConnectionAdapters::PostGISAdapter::Railtie < ::Rails::Railtie
end

ActiveRecord::ConnectionAdapters::PostGISAdapter::SPATIAL_COLUMN_CONSTRUCTORS = T.let(T.unsafe(nil), Hash)

class ActiveRecord::ConnectionAdapters::PostGISAdapter::SpatialColumn < ::ActiveRecord::ConnectionAdapters::PostgreSQLColumn
  def initialize(factory_settings, table_name, name, default, oid_type, sql_type = T.unsafe(nil), null = T.unsafe(nil), opts = T.unsafe(nil)); end

  def geographic; end
  def geographic?; end
  def geometric_type; end
  def has_m; end
  def has_m?; end
  def has_spatial_constraints?; end
  def has_z; end
  def has_z?; end
  def klass; end
  def spatial?; end
  def srid; end
  def type_cast(value); end

  private

  def simplified_type(sql_type); end

  class << self
    def convert_to_geometry(input, factory_settings, table_name, column, geographic, srid, has_z, has_m); end
  end
end

class ActiveRecord::ConnectionAdapters::PostGISAdapter::SpatialColumnInfo
  def initialize(adapter, table_name); end

  def all; end
  def get(column_name, type); end
end

class ActiveRecord::ConnectionAdapters::PostGISAdapter::SpatialOID < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type
  def initialize(factory_generator); end

  def type_cast(value); end
end

class ActiveRecord::ConnectionAdapters::PostGISAdapter::TableDefinition < ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition
  def initialize(types, name, temporary, options, as, base); end

  def column(name, type, options = T.unsafe(nil)); end
  def create_column_definition(name, type); end
  def non_geographic_spatial_columns; end
end

ActiveRecord::ConnectionAdapters::PostGISAdapter::VERSION = T.let(T.unsafe(nil), String)

module ActiveRecord::ConnectionHandling
  def clear_active_connections!(*args, &block); end
  def clear_all_connections!(*args, &block); end
  def clear_cache!; end
  def clear_reloadable_connections!(*args, &block); end
  def connected?; end
  def connection; end
  def connection_config; end
  def connection_id; end
  def connection_id=(connection_id); end
  def connection_pool; end
  def establish_connection(spec = T.unsafe(nil)); end
  def postgis_connection(config); end
  def postgresql_connection(config); end
  def remove_connection(klass = T.unsafe(nil)); end
  def retrieve_connection; end
end

ActiveRecord::ConnectionHandling::DEFAULT_ENV = T.let(T.unsafe(nil), Proc)

ActiveRecord::ConnectionHandling::RAILS_ENV = T.let(T.unsafe(nil), Proc)

ActiveRecord::ConnectionHandling::VALID_CONN_PARAMS = T.let(T.unsafe(nil), Array)

module Arel
  class << self
    def spatial(arg); end
    def sql(raw_sql); end
    def star; end
  end
end

Arel::Attribute = Arel::Attributes::Attribute

Arel::InnerJoin = Arel::Nodes::InnerJoin

Arel::Node = Arel::Nodes::Node

Arel::OuterJoin = Arel::Nodes::OuterJoin

Arel::VERSION = T.let(T.unsafe(nil), String)

module Arel::Visitors
  class << self
    def for(engine); end
    def visitor_for(engine); end
  end
end

Arel::Visitors::ENGINE_VISITORS = T.let(T.unsafe(nil), Hash)

class Arel::Visitors::PostGIS < ::Arel::Visitors::PostgreSQL
  include(::RGeo::ActiveRecord::SpatialToSql)

  def st_func(standard_name); end

  private

  def visit_in_spatial_context(object, attribute = T.unsafe(nil)); end
end

Arel::Visitors::PostGIS::FUNC_MAP = T.let(T.unsafe(nil), Hash)

Arel::Visitors::PostGISSuperclass = Arel::Visitors::PostgreSQL

Arel::Visitors::VISITORS = T.let(T.unsafe(nil), Hash)
