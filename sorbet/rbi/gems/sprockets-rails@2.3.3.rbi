# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sprockets-rails` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module Rails
  extend(::ActiveSupport::Autoload)

  class << self
    def application; end
    def application=(_); end
    def backtrace_cleaner; end
    def cache; end
    def cache=(_); end
    def configuration; end
    def env; end
    def env=(environment); end
    def gem_version; end
    def groups(*groups); end
    def initialize!(*args, &block); end
    def initialized?(*args, &block); end
    def logger; end
    def logger=(_); end
    def public_path; end
    def root; end
    def version; end
  end
end

class Rails::Application < ::Rails::Engine
  def initialize(initial_variable_values = T.unsafe(nil), &block); end

  def add_lib_to_load_path!; end
  def assets; end
  def assets=(_); end
  def assets_manifest; end
  def assets_manifest=(_); end
  def build_middleware_stack; end
  def call(env); end
  def config; end
  def config=(configuration); end
  def default_url_options(*args, &block); end
  def default_url_options=(arg); end
  def env_config; end
  def helpers_paths; end
  def initialize!(group = T.unsafe(nil)); end
  def initialized?; end
  def initializer(name, opts = T.unsafe(nil), &block); end
  def initializers; end
  def isolate_namespace(mod); end
  def key_generator; end
  def message_verifier(verifier_name); end
  def rake_tasks(&block); end
  def reload_routes!; end
  def reloaders; end
  def require_environment!; end
  def routes_reloader; end
  def runner(&blk); end
  def sandbox; end
  def sandbox=(_); end
  def sandbox?; end
  def secrets; end
  def secrets=(secrets); end
  def to_app; end
  def watchable_args; end

  protected

  def build_original_fullpath(env); end
  def default_middleware_stack; end
  def ordered_railties; end
  def railties_initializers(current); end
  def run_console_blocks(app); end
  def run_generators_blocks(app); end
  def run_runner_blocks(app); end
  def run_tasks_blocks(app); end
  def validate_secret_key_config!; end

  class << self
    def inherited(base); end
  end
end

class Rails::Application::Configuration < ::Rails::Engine::Configuration
  def initialize(*_); end

  def allow_concurrency; end
  def allow_concurrency=(_); end
  def asset_host; end
  def asset_host=(_); end
  def assets=(_); end
  def autoflush_log; end
  def autoflush_log=(_); end
  def beginning_of_week; end
  def beginning_of_week=(_); end
  def cache_classes; end
  def cache_classes=(_); end
  def cache_store; end
  def cache_store=(_); end
  def colorize_logging; end
  def colorize_logging=(val); end
  def consider_all_requests_local; end
  def consider_all_requests_local=(_); end
  def console; end
  def console=(_); end
  def database_configuration; end
  def eager_load; end
  def eager_load=(_); end
  def encoding; end
  def encoding=(value); end
  def exceptions_app; end
  def exceptions_app=(_); end
  def file_watcher; end
  def file_watcher=(_); end
  def filter_parameters; end
  def filter_parameters=(_); end
  def filter_redirect; end
  def filter_redirect=(_); end
  def force_ssl; end
  def force_ssl=(_); end
  def helpers_paths; end
  def helpers_paths=(_); end
  def log_formatter; end
  def log_formatter=(_); end
  def log_level; end
  def log_level=(_); end
  def log_tags; end
  def log_tags=(_); end
  def logger; end
  def logger=(_); end
  def paths; end
  def railties_order; end
  def railties_order=(_); end
  def relative_url_root; end
  def relative_url_root=(_); end
  def reload_classes_only_on_change; end
  def reload_classes_only_on_change=(_); end
  def secret_key_base; end
  def secret_key_base=(_); end
  def secret_token; end
  def secret_token=(_); end
  def serve_static_assets; end
  def serve_static_assets=(_); end
  def session_options; end
  def session_options=(_); end
  def session_store(*args); end
  def ssl_options; end
  def ssl_options=(_); end
  def static_cache_control; end
  def static_cache_control=(_); end
  def time_zone; end
  def time_zone=(_); end
end

Rails::Application::INITIAL_VARIABLES = T.let(T.unsafe(nil), Array)

class Rails::Engine < ::Rails::Railtie
  def initialize; end

  def app; end
  def call(env); end
  def config; end
  def eager_load!; end
  def endpoint; end
  def engine_name(*args, &block); end
  def env_config; end
  def helpers; end
  def helpers_paths; end
  def isolated?(*args, &block); end
  def load_console(app = T.unsafe(nil)); end
  def load_generators(app = T.unsafe(nil)); end
  def load_runner(app = T.unsafe(nil)); end
  def load_seed; end
  def load_tasks(app = T.unsafe(nil)); end
  def middleware(*args, &block); end
  def paths(*args, &block); end
  def railties; end
  def root(*args, &block); end
  def routes; end
  def routes?; end

  protected

  def _all_autoload_once_paths; end
  def _all_autoload_paths; end
  def _all_load_paths; end
  def default_middleware_stack; end
  def find_root_with_flag(flag, default = T.unsafe(nil)); end
  def has_migrations?; end
  def load_config_initializer(initializer); end
  def run_tasks_blocks(*_); end

  class << self
    def called_from; end
    def called_from=(_); end
    def eager_load!(*args, &block); end
    def endpoint(endpoint = T.unsafe(nil)); end
    def engine_name(name = T.unsafe(nil)); end
    def find(path); end
    def inherited(base); end
    def isolate_namespace(mod); end
    def isolated; end
    def isolated=(_); end
    def isolated?; end
  end
end

module Sprockets
  extend(::Sprockets::Utils)
  extend(::Sprockets::URIUtils)
  extend(::Sprockets::PathUtils)
  extend(::Sprockets::DigestUtils)
  extend(::Sprockets::PathDigestUtils)
  extend(::Sprockets::Dependencies)
  extend(::Sprockets::Compressing)
  extend(::Sprockets::ProcessorUtils)
  extend(::Sprockets::Processing)
  extend(::Sprockets::HTTPUtils)
  extend(::Sprockets::Transformers)
  extend(::Sprockets::Engines)
  extend(::Sprockets::Mime)
  extend(::Sprockets::Paths)
  extend(::Sprockets::Configuration)
end

Sprockets::Index = Sprockets::CachedEnvironment

module Sprockets::Rails
end

module Sprockets::Rails::Helper
  include(::ActionView::Helpers::AssetUrlHelper)
  include(::ActionView::Helpers::CaptureHelper)
  include(::ActionView::Helpers::TagHelper)
  include(::ActionView::Helpers::AssetTagHelper)

  def asset_digest(path, options = T.unsafe(nil)); end
  def asset_digest_path(path, options = T.unsafe(nil)); end
  def asset_path(source, options = T.unsafe(nil)); end
  def assets; end
  def compute_asset_path(path, options = T.unsafe(nil)); end
  def javascript_include_tag(*sources); end
  def path_to_asset(source, options = T.unsafe(nil)); end
  def precompile; end
  def raise_runtime_errors; end
  def stylesheet_link_tag(*sources); end

  protected

  def asset_needs_precompile?(source, filename); end
  def check_dependencies!(dep); end
  def check_errors_for(source, options); end
  def lookup_asset_for_path(path, options = T.unsafe(nil)); end
  def request_debug_assets?; end

  class << self
    def assets; end
    def assets=(_); end
    def extended(obj); end
    def included(klass); end
    def precompile; end
    def precompile=(_); end
    def raise_runtime_errors; end
    def raise_runtime_errors=(_); end
  end
end

class Sprockets::Rails::Helper::AbsoluteAssetPathError < ::Sprockets::ArgumentError
  def initialize(bad_path, good_path, prefix); end
end

class Sprockets::Rails::Helper::AssetFilteredError < ::StandardError
  def initialize(source); end
end

Sprockets::Rails::Helper::VIEW_ACCESSORS = T.let(T.unsafe(nil), Array)

Sprockets::Rails::VERSION = T.let(T.unsafe(nil), String)

class Sprockets::Railtie < ::Rails::Railtie
end

Sprockets::Railtie::LOOSE_APP_ASSETS = T.let(T.unsafe(nil), Proc)

class Sprockets::Railtie::OrderedOptions < ::ActiveSupport::OrderedOptions
  def configure(&block); end
end

Sprockets::SassFunctions = Sprockets::SassProcessor::Functions

Sprockets::VERSION = T.let(T.unsafe(nil), String)
